
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033cc  0800afa0  0800afa0  0001afa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e36c  0800e36c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e36c  0800e36c  0001e36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e374  0800e374  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e374  0800e374  0001e374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e378  0800e378  0001e378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e37c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000440  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000624  20000624  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001afdb  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004264  00000000  00000000  0003b1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  0003f458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001588  00000000  00000000  00040b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015296  00000000  00000000  00042120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000062c2  00000000  00000000  000573b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005d678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007108  00000000  00000000  0005d6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af88 	.word	0x0800af88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800af88 	.word	0x0800af88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f60:	4a3d      	ldr	r2, [pc, #244]	; (8001058 <MX_ADC1_Init+0x10c>)
 8000f62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f64:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8a:	4b32      	ldr	r3, [pc, #200]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f8c:	4a33      	ldr	r2, [pc, #204]	; (800105c <MX_ADC1_Init+0x110>)
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f90:	4b30      	ldr	r3, [pc, #192]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f98:	2205      	movs	r2, #5
 8000f9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <MX_ADC1_Init+0x108>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <MX_ADC1_Init+0x108>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000faa:	482a      	ldr	r0, [pc, #168]	; (8001054 <MX_ADC1_Init+0x108>)
 8000fac:	f002 f938 	bl	8003220 <HAL_ADC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f001 fa77 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4822      	ldr	r0, [pc, #136]	; (8001054 <MX_ADC1_Init+0x108>)
 8000fcc:	f002 fa9a 	bl	8003504 <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fd6:	f001 fa67 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fda:	2309      	movs	r3, #9
 8000fdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481b      	ldr	r0, [pc, #108]	; (8001054 <MX_ADC1_Init+0x108>)
 8000fe8:	f002 fa8c 	bl	8003504 <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000ff2:	f001 fa59 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <MX_ADC1_Init+0x108>)
 8001004:	f002 fa7e 	bl	8003504 <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800100e:	f001 fa4b 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001012:	230b      	movs	r3, #11
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001016:	2304      	movs	r3, #4
 8001018:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_ADC1_Init+0x108>)
 8001020:	f002 fa70 	bl	8003504 <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800102a:	f001 fa3d 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800102e:	230c      	movs	r3, #12
 8001030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001032:	2305      	movs	r3, #5
 8001034:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_ADC1_Init+0x108>)
 800103c:	f002 fa62 	bl	8003504 <HAL_ADC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001046:	f001 fa2f 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000200 	.word	0x20000200
 8001058:	40012000 	.word	0x40012000
 800105c:	0f000001 	.word	0x0f000001

08001060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <HAL_ADC_MspInit+0x110>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d171      	bne.n	8001166 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <HAL_ADC_MspInit+0x114>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a3a      	ldr	r2, [pc, #232]	; (8001174 <HAL_ADC_MspInit+0x114>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <HAL_ADC_MspInit+0x114>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b34      	ldr	r3, [pc, #208]	; (8001174 <HAL_ADC_MspInit+0x114>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a33      	ldr	r2, [pc, #204]	; (8001174 <HAL_ADC_MspInit+0x114>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <HAL_ADC_MspInit+0x114>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_ADC_MspInit+0x114>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a2c      	ldr	r2, [pc, #176]	; (8001174 <HAL_ADC_MspInit+0x114>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_ADC_MspInit+0x114>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010d6:	2307      	movs	r3, #7
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010da:	2303      	movs	r3, #3
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4823      	ldr	r0, [pc, #140]	; (8001178 <HAL_ADC_MspInit+0x118>)
 80010ea:	f003 f9bf 	bl	800446c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ee:	2303      	movs	r3, #3
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	481e      	ldr	r0, [pc, #120]	; (800117c <HAL_ADC_MspInit+0x11c>)
 8001102:	f003 f9b3 	bl	800446c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_ADC_MspInit+0x120>)
 8001108:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_ADC_MspInit+0x124>)
 800110a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_ADC_MspInit+0x120>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_ADC_MspInit+0x120>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_ADC_MspInit+0x120>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_ADC_MspInit+0x120>)
 8001120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001124:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_ADC_MspInit+0x120>)
 8001128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800112c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_ADC_MspInit+0x120>)
 8001130:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001134:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_ADC_MspInit+0x120>)
 8001138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_ADC_MspInit+0x120>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_ADC_MspInit+0x120>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <HAL_ADC_MspInit+0x120>)
 800114c:	f002 fd8c 	bl	8003c68 <HAL_DMA_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001156:	f001 f9a7 	bl	80024a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_ADC_MspInit+0x120>)
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_ADC_MspInit+0x120>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40012000 	.word	0x40012000
 8001174:	40023800 	.word	0x40023800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020400 	.word	0x40020400
 8001180:	20000248 	.word	0x20000248
 8001184:	40026410 	.word	0x40026410

08001188 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800118c:	2201      	movs	r2, #1
 800118e:	2108      	movs	r1, #8
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <button_init+0x14>)
 8001192:	f003 fb07 	bl	80047a4 <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40020c00 	.word	0x40020c00

080011a0 <button_Scan>:

void button_Scan(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2108      	movs	r1, #8
 80011aa:	482f      	ldr	r0, [pc, #188]	; (8001268 <button_Scan+0xc8>)
 80011ac:	f003 fafa 	bl	80047a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2108      	movs	r1, #8
 80011b4:	482c      	ldr	r0, [pc, #176]	; (8001268 <button_Scan+0xc8>)
 80011b6:	f003 faf5 	bl	80047a4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80011ba:	230a      	movs	r3, #10
 80011bc:	2202      	movs	r2, #2
 80011be:	492b      	ldr	r1, [pc, #172]	; (800126c <button_Scan+0xcc>)
 80011c0:	482b      	ldr	r0, [pc, #172]	; (8001270 <button_Scan+0xd0>)
 80011c2:	f004 faaa 	bl	800571a <HAL_SPI_Receive>
	  int button_index = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80011ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ce:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	e03f      	b.n	8001256 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db06      	blt.n	80011ea <button_Scan+0x4a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	dc03      	bgt.n	80011ea <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3304      	adds	r3, #4
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e018      	b.n	800121c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	dd07      	ble.n	8001200 <button_Scan+0x60>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	dc04      	bgt.n	8001200 <button_Scan+0x60>
			  button_index = 7 - i;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f1c3 0307 	rsb	r3, r3, #7
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e00d      	b.n	800121c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b07      	cmp	r3, #7
 8001204:	dd06      	ble.n	8001214 <button_Scan+0x74>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0b      	cmp	r3, #11
 800120a:	dc03      	bgt.n	8001214 <button_Scan+0x74>
			  button_index = i + 4;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3304      	adds	r3, #4
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e003      	b.n	800121c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f1c3 0317 	rsb	r3, r3, #23
 800121a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <button_Scan+0xcc>)
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	897b      	ldrh	r3, [r7, #10]
 8001222:	4013      	ands	r3, r2
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <button_Scan+0x96>
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <button_Scan+0xd4>)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2100      	movs	r1, #0
 8001230:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001234:	e009      	b.n	800124a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <button_Scan+0xd4>)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123e:	3301      	adds	r3, #1
 8001240:	b299      	uxth	r1, r3
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <button_Scan+0xd4>)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800124a:	897b      	ldrh	r3, [r7, #10]
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3301      	adds	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	ddbc      	ble.n	80011d6 <button_Scan+0x36>
	  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40020c00 	.word	0x40020c00
 800126c:	200002c8 	.word	0x200002c8
 8001270:	200003ec 	.word	0x200003ec
 8001274:	200002a8 	.word	0x200002a8

08001278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_DMA_Init+0x3c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <MX_DMA_Init+0x3c>)
 8001288:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_DMA_Init+0x3c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2038      	movs	r0, #56	; 0x38
 80012a0:	f002 fcab 	bl	8003bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012a4:	2038      	movs	r0, #56	; 0x38
 80012a6:	f002 fcc4 	bl	8003c32 <HAL_NVIC_EnableIRQ>

}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08e      	sub	sp, #56	; 0x38
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <MX_FSMC_Init+0xec>)
 80012e6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012ea:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <MX_FSMC_Init+0xec>)
 80012ee:	4a2e      	ldr	r2, [pc, #184]	; (80013a8 <MX_FSMC_Init+0xf0>)
 80012f0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <MX_FSMC_Init+0xec>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <MX_FSMC_Init+0xec>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <MX_FSMC_Init+0xec>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <MX_FSMC_Init+0xec>)
 8001306:	2210      	movs	r2, #16
 8001308:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <MX_FSMC_Init+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <MX_FSMC_Init+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001316:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <MX_FSMC_Init+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <MX_FSMC_Init+0xec>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_FSMC_Init+0xec>)
 8001324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_FSMC_Init+0xec>)
 800132c:	2200      	movs	r2, #0
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_FSMC_Init+0xec>)
 8001332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_FSMC_Init+0xec>)
 800133a:	2200      	movs	r2, #0
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_FSMC_Init+0xec>)
 8001340:	2200      	movs	r2, #0
 8001342:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_FSMC_Init+0xec>)
 8001346:	2200      	movs	r2, #0
 8001348:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800134a:	230f      	movs	r3, #15
 800134c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800134e:	230f      	movs	r3, #15
 8001350:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001352:	233c      	movs	r3, #60	; 0x3c
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800135a:	2310      	movs	r3, #16
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800135e:	2311      	movs	r3, #17
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001362:	2300      	movs	r3, #0
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001366:	2308      	movs	r3, #8
 8001368:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800136a:	230f      	movs	r3, #15
 800136c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800136e:	2309      	movs	r3, #9
 8001370:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001376:	2310      	movs	r3, #16
 8001378:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800137a:	2311      	movs	r3, #17
 800137c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001382:	463a      	mov	r2, r7
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_FSMC_Init+0xec>)
 800138c:	f004 fda8 	bl	8005ee0 <HAL_SRAM_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001396:	f001 f887 	bl	80024a8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800139a:	bf00      	nop
 800139c:	3738      	adds	r7, #56	; 0x38
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002cc 	.word	0x200002cc
 80013a8:	a0000104 	.word	0xa0000104

080013ac <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_FSMC_MspInit+0x88>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d131      	bne.n	800142c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_FSMC_MspInit+0x88>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_FSMC_MspInit+0x8c>)
 80013d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d6:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_FSMC_MspInit+0x8c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6393      	str	r3, [r2, #56]	; 0x38
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_FSMC_MspInit+0x8c>)
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80013ea:	f64f 7388 	movw	r3, #65416	; 0xff88
 80013ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013fc:	230c      	movs	r3, #12
 80013fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4619      	mov	r1, r3
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <HAL_FSMC_MspInit+0x90>)
 8001406:	f003 f831 	bl	800446c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800140a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800140e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800141c:	230c      	movs	r3, #12
 800141e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4806      	ldr	r0, [pc, #24]	; (8001440 <HAL_FSMC_MspInit+0x94>)
 8001426:	f003 f821 	bl	800446c <HAL_GPIO_Init>
 800142a:	e000      	b.n	800142e <HAL_FSMC_MspInit+0x82>
    return;
 800142c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000031c 	.word	0x2000031c
 8001438:	40023800 	.word	0x40023800
 800143c:	40021000 	.word	0x40021000
 8001440:	40020c00 	.word	0x40020c00

08001444 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800144c:	f7ff ffae 	bl	80013ac <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
 8001472:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a8e      	ldr	r2, [pc, #568]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b8c      	ldr	r3, [pc, #560]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a87      	ldr	r2, [pc, #540]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <MX_GPIO_Init+0x258>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <MX_GPIO_Init+0x258>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a80      	ldr	r2, [pc, #512]	; (80016b0 <MX_GPIO_Init+0x258>)
 80014b0:	f043 0320 	orr.w	r3, r3, #32
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b7e      	ldr	r3, [pc, #504]	; (80016b0 <MX_GPIO_Init+0x258>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	4b7a      	ldr	r3, [pc, #488]	; (80016b0 <MX_GPIO_Init+0x258>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a79      	ldr	r2, [pc, #484]	; (80016b0 <MX_GPIO_Init+0x258>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <MX_GPIO_Init+0x258>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <MX_GPIO_Init+0x258>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a72      	ldr	r2, [pc, #456]	; (80016b0 <MX_GPIO_Init+0x258>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <MX_GPIO_Init+0x258>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b6c      	ldr	r3, [pc, #432]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a6b      	ldr	r2, [pc, #428]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <MX_GPIO_Init+0x258>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <MX_GPIO_Init+0x258>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a64      	ldr	r2, [pc, #400]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b62      	ldr	r3, [pc, #392]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a5d      	ldr	r2, [pc, #372]	; (80016b0 <MX_GPIO_Init+0x258>)
 800153c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <MX_GPIO_Init+0x258>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2170      	movs	r1, #112	; 0x70
 8001552:	4858      	ldr	r0, [pc, #352]	; (80016b4 <MX_GPIO_Init+0x25c>)
 8001554:	f003 f926 	bl	80047a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800155e:	4856      	ldr	r0, [pc, #344]	; (80016b8 <MX_GPIO_Init+0x260>)
 8001560:	f003 f920 	bl	80047a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156a:	4854      	ldr	r0, [pc, #336]	; (80016bc <MX_GPIO_Init+0x264>)
 800156c:	f003 f91a 	bl	80047a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001576:	4852      	ldr	r0, [pc, #328]	; (80016c0 <MX_GPIO_Init+0x268>)
 8001578:	f003 f914 	bl	80047a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001582:	4850      	ldr	r0, [pc, #320]	; (80016c4 <MX_GPIO_Init+0x26c>)
 8001584:	f003 f90e 	bl	80047a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2108      	movs	r1, #8
 800158c:	484e      	ldr	r0, [pc, #312]	; (80016c8 <MX_GPIO_Init+0x270>)
 800158e:	f003 f909 	bl	80047a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001592:	2370      	movs	r3, #112	; 0x70
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	4842      	ldr	r0, [pc, #264]	; (80016b4 <MX_GPIO_Init+0x25c>)
 80015aa:	f002 ff5f 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80015ae:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	483c      	ldr	r0, [pc, #240]	; (80016b8 <MX_GPIO_Init+0x260>)
 80015c8:	f002 ff50 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 80015cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	4836      	ldr	r0, [pc, #216]	; (80016bc <MX_GPIO_Init+0x264>)
 80015e2:	f002 ff43 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 80015e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	482f      	ldr	r0, [pc, #188]	; (80016bc <MX_GPIO_Init+0x264>)
 8001600:	f002 ff34 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001604:	23c0      	movs	r3, #192	; 0xc0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	482b      	ldr	r0, [pc, #172]	; (80016c4 <MX_GPIO_Init+0x26c>)
 8001618:	f002 ff28 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800161c:	2330      	movs	r3, #48	; 0x30
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <MX_GPIO_Init+0x260>)
 8001630:	f002 ff1c 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001634:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	481c      	ldr	r0, [pc, #112]	; (80016c0 <MX_GPIO_Init+0x268>)
 800164e:	f002 ff0d 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8001652:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2301      	movs	r3, #1
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <MX_GPIO_Init+0x260>)
 8001668:	f002 ff00 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800166c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	480f      	ldr	r0, [pc, #60]	; (80016c4 <MX_GPIO_Init+0x26c>)
 8001686:	f002 fef1 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800168a:	2308      	movs	r3, #8
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <MX_GPIO_Init+0x270>)
 80016a2:	f002 fee3 	bl	800446c <HAL_GPIO_Init>

}
 80016a6:	bf00      	nop
 80016a8:	3738      	adds	r7, #56	; 0x38
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40021400 	.word	0x40021400
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020c00 	.word	0x40020c00

080016cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_I2C1_Init+0x50>)
 80016d2:	4a13      	ldr	r2, [pc, #76]	; (8001720 <MX_I2C1_Init+0x54>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_I2C1_Init+0x50>)
 80016d8:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MX_I2C1_Init+0x58>)
 80016da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_I2C1_Init+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_I2C1_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_I2C1_Init+0x50>)
 80016ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <MX_I2C1_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_I2C1_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <MX_I2C1_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_I2C1_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_I2C1_Init+0x50>)
 800170a:	f003 f865 	bl	80047d8 <HAL_I2C_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001714:	f000 fec8 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000320 	.word	0x20000320
 8001720:	40005400 	.word	0x40005400
 8001724:	000186a0 	.word	0x000186a0

08001728 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_I2C_MspInit+0x84>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12b      	bne.n	80017a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176a:	2312      	movs	r3, #18
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001776:	2304      	movs	r3, #4
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <HAL_I2C_MspInit+0x8c>)
 8001782:	f002 fe73 	bl	800446c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020400 	.word	0x40020400

080017b8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <LCD_WR_REG+0x1c>)
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	8013      	strh	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	600ffffe 	.word	0x600ffffe

080017d8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <LCD_WR_DATA+0x1c>)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	8053      	strh	r3, [r2, #2]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	600ffffe 	.word	0x600ffffe

080017f8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <LCD_RD_DATA+0x20>)
 8001800:	885b      	ldrh	r3, [r3, #2]
 8001802:	b29b      	uxth	r3, r3
 8001804:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	b29b      	uxth	r3, r3
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	600ffffe 	.word	0x600ffffe

0800181c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4604      	mov	r4, r0
 8001824:	4608      	mov	r0, r1
 8001826:	4611      	mov	r1, r2
 8001828:	461a      	mov	r2, r3
 800182a:	4623      	mov	r3, r4
 800182c:	80fb      	strh	r3, [r7, #6]
 800182e:	4603      	mov	r3, r0
 8001830:	80bb      	strh	r3, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]
 8001836:	4613      	mov	r3, r2
 8001838:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800183a:	202a      	movs	r0, #42	; 0x2a
 800183c:	f7ff ffbc 	bl	80017b8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	b29b      	uxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ffc6 	bl	80017d8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	b29b      	uxth	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ffc0 	bl	80017d8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	b29b      	uxth	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ffba 	bl	80017d8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	b29b      	uxth	r3, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ffb4 	bl	80017d8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001870:	202b      	movs	r0, #43	; 0x2b
 8001872:	f7ff ffa1 	bl	80017b8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	b29b      	uxth	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ffab 	bl	80017d8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001882:	88bb      	ldrh	r3, [r7, #4]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	b29b      	uxth	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ffa5 	bl	80017d8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800188e:	883b      	ldrh	r3, [r7, #0]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff9f 	bl	80017d8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800189a:	883b      	ldrh	r3, [r7, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff99 	bl	80017d8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80018a6:	202c      	movs	r0, #44	; 0x2c
 80018a8:	f7ff ff86 	bl	80017b8 <LCD_WR_REG>
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}

080018b4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <lcd_Clear+0x60>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <lcd_Clear+0x60>)
 80018c8:	885b      	ldrh	r3, [r3, #2]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff ffa3 	bl	800181c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	81fb      	strh	r3, [r7, #14]
 80018da:	e011      	b.n	8001900 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80018dc:	2300      	movs	r3, #0
 80018de:	81bb      	strh	r3, [r7, #12]
 80018e0:	e006      	b.n	80018f0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff77 	bl	80017d8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80018ea:	89bb      	ldrh	r3, [r7, #12]
 80018ec:	3301      	adds	r3, #1
 80018ee:	81bb      	strh	r3, [r7, #12]
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <lcd_Clear+0x60>)
 80018f2:	885b      	ldrh	r3, [r3, #2]
 80018f4:	89ba      	ldrh	r2, [r7, #12]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d3f3      	bcc.n	80018e2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	3301      	adds	r3, #1
 80018fe:	81fb      	strh	r3, [r7, #14]
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <lcd_Clear+0x60>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	89fa      	ldrh	r2, [r7, #14]
 8001906:	429a      	cmp	r2, r3
 8001908:	d3e8      	bcc.n	80018dc <lcd_Clear+0x28>
		}
	}
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000374 	.word	0x20000374

08001918 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	80fb      	strh	r3, [r7, #6]
 8001922:	460b      	mov	r3, r1
 8001924:	80bb      	strh	r3, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800192a:	88bb      	ldrh	r3, [r7, #4]
 800192c:	88fa      	ldrh	r2, [r7, #6]
 800192e:	88b9      	ldrh	r1, [r7, #4]
 8001930:	88f8      	ldrh	r0, [r7, #6]
 8001932:	f7ff ff73 	bl	800181c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff4d 	bl	80017d8 <LCD_WR_DATA>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	4604      	mov	r4, r0
 8001950:	4608      	mov	r0, r1
 8001952:	4611      	mov	r1, r2
 8001954:	461a      	mov	r2, r3
 8001956:	4623      	mov	r3, r4
 8001958:	80fb      	strh	r3, [r7, #6]
 800195a:	4603      	mov	r3, r0
 800195c:	80bb      	strh	r3, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	70fb      	strb	r3, [r7, #3]
 8001962:	4613      	mov	r3, r2
 8001964:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001966:	2300      	movs	r3, #0
 8001968:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800196e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf14      	ite	ne
 800198a:	2301      	movne	r3, #1
 800198c:	2300      	moveq	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	4413      	add	r3, r2
 8001992:	b29a      	uxth	r2, r3
 8001994:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001998:	b29b      	uxth	r3, r3
 800199a:	fb12 f303 	smulbb	r3, r2, r3
 800199e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	3b20      	subs	r3, #32
 80019a4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4413      	add	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29c      	uxth	r4, r3
 80019b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	88bb      	ldrh	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	88b9      	ldrh	r1, [r7, #4]
 80019c6:	88f8      	ldrh	r0, [r7, #6]
 80019c8:	4622      	mov	r2, r4
 80019ca:	f7ff ff27 	bl	800181c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	827b      	strh	r3, [r7, #18]
 80019d2:	e07a      	b.n	8001aca <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80019d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d028      	beq.n	8001a2e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80019dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e0:	2b10      	cmp	r3, #16
 80019e2:	d108      	bne.n	80019f6 <lcd_ShowChar+0xae>
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	8a7b      	ldrh	r3, [r7, #18]
 80019e8:	493c      	ldr	r1, [pc, #240]	; (8001adc <lcd_ShowChar+0x194>)
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	440a      	add	r2, r1
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	75fb      	strb	r3, [r7, #23]
 80019f4:	e01b      	b.n	8001a2e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80019f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019fa:	2b18      	cmp	r3, #24
 80019fc:	d10b      	bne.n	8001a16 <lcd_ShowChar+0xce>
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	8a79      	ldrh	r1, [r7, #18]
 8001a02:	4837      	ldr	r0, [pc, #220]	; (8001ae0 <lcd_ShowChar+0x198>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	4403      	add	r3, r0
 8001a0e:	440b      	add	r3, r1
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	75fb      	strb	r3, [r7, #23]
 8001a14:	e00b      	b.n	8001a2e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001a16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d15a      	bne.n	8001ad4 <lcd_ShowChar+0x18c>
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	8a7b      	ldrh	r3, [r7, #18]
 8001a22:	4930      	ldr	r1, [pc, #192]	; (8001ae4 <lcd_ShowChar+0x19c>)
 8001a24:	0192      	lsls	r2, r2, #6
 8001a26:	440a      	add	r2, r1
 8001a28:	4413      	add	r3, r2
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75bb      	strb	r3, [r7, #22]
 8001a32:	e044      	b.n	8001abe <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001a34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d120      	bne.n	8001a7e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a3c:	7dfa      	ldrb	r2, [r7, #23]
 8001a3e:	7dbb      	ldrb	r3, [r7, #22]
 8001a40:	fa42 f303 	asr.w	r3, r2, r3
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <lcd_ShowChar+0x10e>
 8001a4c:	883b      	ldrh	r3, [r7, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fec2 	bl	80017d8 <LCD_WR_DATA>
 8001a54:	e003      	b.n	8001a5e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff febd 	bl	80017d8 <LCD_WR_DATA>
				m++;
 8001a5e:	7d7b      	ldrb	r3, [r7, #21]
 8001a60:	3301      	adds	r3, #1
 8001a62:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001a64:	7d7b      	ldrb	r3, [r7, #21]
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a6c:	fb01 f202 	mul.w	r2, r1, r2
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d11f      	bne.n	8001ab8 <lcd_ShowChar+0x170>
				{
					m=0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	757b      	strb	r3, [r7, #21]
					break;
 8001a7c:	e022      	b.n	8001ac4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001a7e:	7dfa      	ldrb	r2, [r7, #23]
 8001a80:	7dbb      	ldrb	r3, [r7, #22]
 8001a82:	fa42 f303 	asr.w	r3, r2, r3
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <lcd_ShowChar+0x152>
 8001a8e:	883a      	ldrh	r2, [r7, #0]
 8001a90:	88b9      	ldrh	r1, [r7, #4]
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff3f 	bl	8001918 <lcd_DrawPoint>
				x++;
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	8a3b      	ldrh	r3, [r7, #16]
 8001aa4:	1ad2      	subs	r2, r2, r3
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d105      	bne.n	8001ab8 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001aac:	8a3b      	ldrh	r3, [r7, #16]
 8001aae:	80fb      	strh	r3, [r7, #6]
					y++;
 8001ab0:	88bb      	ldrh	r3, [r7, #4]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	80bb      	strh	r3, [r7, #4]
					break;
 8001ab6:	e005      	b.n	8001ac4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001ab8:	7dbb      	ldrb	r3, [r7, #22]
 8001aba:	3301      	adds	r3, #1
 8001abc:	75bb      	strb	r3, [r7, #22]
 8001abe:	7dbb      	ldrb	r3, [r7, #22]
 8001ac0:	2b07      	cmp	r3, #7
 8001ac2:	d9b7      	bls.n	8001a34 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001ac4:	8a7b      	ldrh	r3, [r7, #18]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	827b      	strh	r3, [r7, #18]
 8001aca:	8a7a      	ldrh	r2, [r7, #18]
 8001acc:	89bb      	ldrh	r3, [r7, #12]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d380      	bcc.n	80019d4 <lcd_ShowChar+0x8c>
 8001ad2:	e000      	b.n	8001ad6 <lcd_ShowChar+0x18e>
		else return;
 8001ad4:	bf00      	nop
				}
			}
		}
	}
}
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	0800aff0 	.word	0x0800aff0
 8001ae0:	0800b5e0 	.word	0x0800b5e0
 8001ae4:	0800c7b0 	.word	0x0800c7b0

08001ae8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001afc:	e004      	b.n	8001b08 <mypow+0x20>
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	79bb      	ldrb	r3, [r7, #6]
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	71ba      	strb	r2, [r7, #6]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f5      	bne.n	8001afe <mypow+0x16>
	return result;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b08b      	sub	sp, #44	; 0x2c
 8001b24:	af04      	add	r7, sp, #16
 8001b26:	4604      	mov	r4, r0
 8001b28:	4608      	mov	r0, r1
 8001b2a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4623      	mov	r3, r4
 8001b34:	81fb      	strh	r3, [r7, #14]
 8001b36:	4603      	mov	r3, r0
 8001b38:	81bb      	strh	r3, [r7, #12]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001b42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001b4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b4e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c28 <lcd_ShowFloatNum+0x108>
 8001b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5a:	ee17 3a90 	vmov	r3, s15
 8001b5e:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	75fb      	strb	r3, [r7, #23]
 8001b64:	e057      	b.n	8001c16 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001b66:	8abc      	ldrh	r4, [r7, #20]
 8001b68:	79fa      	ldrb	r2, [r7, #7]
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	4619      	mov	r1, r3
 8001b76:	200a      	movs	r0, #10
 8001b78:	f7ff ffb6 	bl	8001ae8 <mypow>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <lcd_ShowFloatNum+0x10c>)
 8001b84:	fba3 2301 	umull	r2, r3, r3, r1
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	1aca      	subs	r2, r1, r3
 8001b94:	4613      	mov	r3, r2
 8001b96:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001b98:	7dfa      	ldrb	r2, [r7, #23]
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	3b02      	subs	r3, #2
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11d      	bne.n	8001bde <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	3b02      	subs	r3, #2
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	7dbb      	ldrb	r3, [r7, #22]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	fb12 f303 	smulbb	r3, r2, r3
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	89fb      	ldrh	r3, [r7, #14]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b298      	uxth	r0, r3
 8001bb8:	88ba      	ldrh	r2, [r7, #4]
 8001bba:	89b9      	ldrh	r1, [r7, #12]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9302      	str	r3, [sp, #8]
 8001bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	222e      	movs	r2, #46	; 0x2e
 8001bce:	f7ff febb 	bl	8001948 <lcd_ShowChar>
			t++;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	7dbb      	ldrb	r3, [r7, #22]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	fb12 f303 	smulbb	r3, r2, r3
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	89fb      	ldrh	r3, [r7, #14]
 8001bee:	4413      	add	r3, r2
 8001bf0:	b298      	uxth	r0, r3
 8001bf2:	7cfb      	ldrb	r3, [r7, #19]
 8001bf4:	3330      	adds	r3, #48	; 0x30
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	88bc      	ldrh	r4, [r7, #4]
 8001bfa:	89b9      	ldrh	r1, [r7, #12]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9302      	str	r3, [sp, #8]
 8001c00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	f7ff fe9c 	bl	8001948 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	3301      	adds	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
 8001c16:	7dfa      	ldrb	r2, [r7, #23]
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3a3      	bcc.n	8001b66 <lcd_ShowFloatNum+0x46>
	}
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}
 8001c28:	42c80000 	.word	0x42c80000
 8001c2c:	cccccccd 	.word	0xcccccccd

08001c30 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <lcd_SetDir+0x44>)
 8001c4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c50:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <lcd_SetDir+0x44>)
 8001c54:	22f0      	movs	r2, #240	; 0xf0
 8001c56:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c58:	e006      	b.n	8001c68 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <lcd_SetDir+0x44>)
 8001c5c:	22f0      	movs	r2, #240	; 0xf0
 8001c5e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <lcd_SetDir+0x44>)
 8001c62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c66:	805a      	strh	r2, [r3, #2]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20000374 	.word	0x20000374

08001c78 <lcd_init>:


void lcd_init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c82:	48aa      	ldr	r0, [pc, #680]	; (8001f2c <lcd_init+0x2b4>)
 8001c84:	f002 fd8e 	bl	80047a4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c8c:	f001 faa4 	bl	80031d8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c96:	48a5      	ldr	r0, [pc, #660]	; (8001f2c <lcd_init+0x2b4>)
 8001c98:	f002 fd84 	bl	80047a4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca0:	f001 fa9a 	bl	80031d8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff ffc3 	bl	8001c30 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001caa:	20d3      	movs	r0, #211	; 0xd3
 8001cac:	f7ff fd84 	bl	80017b8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001cb0:	f7ff fda2 	bl	80017f8 <LCD_RD_DATA>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b9d      	ldr	r3, [pc, #628]	; (8001f30 <lcd_init+0x2b8>)
 8001cba:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cbc:	f7ff fd9c 	bl	80017f8 <LCD_RD_DATA>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b9a      	ldr	r3, [pc, #616]	; (8001f30 <lcd_init+0x2b8>)
 8001cc6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cc8:	f7ff fd96 	bl	80017f8 <LCD_RD_DATA>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b97      	ldr	r3, [pc, #604]	; (8001f30 <lcd_init+0x2b8>)
 8001cd2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001cd4:	4b96      	ldr	r3, [pc, #600]	; (8001f30 <lcd_init+0x2b8>)
 8001cd6:	889b      	ldrh	r3, [r3, #4]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b94      	ldr	r3, [pc, #592]	; (8001f30 <lcd_init+0x2b8>)
 8001cde:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001ce0:	f7ff fd8a 	bl	80017f8 <LCD_RD_DATA>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <lcd_init+0x2b8>)
 8001cea:	889b      	ldrh	r3, [r3, #4]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b8f      	ldr	r3, [pc, #572]	; (8001f30 <lcd_init+0x2b8>)
 8001cf2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001cf4:	20cf      	movs	r0, #207	; 0xcf
 8001cf6:	f7ff fd5f 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fd6c 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d00:	20c1      	movs	r0, #193	; 0xc1
 8001d02:	f7ff fd69 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d06:	2030      	movs	r0, #48	; 0x30
 8001d08:	f7ff fd66 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d0c:	20ed      	movs	r0, #237	; 0xed
 8001d0e:	f7ff fd53 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d12:	2064      	movs	r0, #100	; 0x64
 8001d14:	f7ff fd60 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f7ff fd5d 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d1e:	2012      	movs	r0, #18
 8001d20:	f7ff fd5a 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d24:	2081      	movs	r0, #129	; 0x81
 8001d26:	f7ff fd57 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d2a:	20e8      	movs	r0, #232	; 0xe8
 8001d2c:	f7ff fd44 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d30:	2085      	movs	r0, #133	; 0x85
 8001d32:	f7ff fd51 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d36:	2010      	movs	r0, #16
 8001d38:	f7ff fd4e 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d3c:	207a      	movs	r0, #122	; 0x7a
 8001d3e:	f7ff fd4b 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d42:	20cb      	movs	r0, #203	; 0xcb
 8001d44:	f7ff fd38 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d48:	2039      	movs	r0, #57	; 0x39
 8001d4a:	f7ff fd45 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d4e:	202c      	movs	r0, #44	; 0x2c
 8001d50:	f7ff fd42 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fd3f 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d5a:	2034      	movs	r0, #52	; 0x34
 8001d5c:	f7ff fd3c 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d60:	2002      	movs	r0, #2
 8001d62:	f7ff fd39 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d66:	20f7      	movs	r0, #247	; 0xf7
 8001d68:	f7ff fd26 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d6c:	2020      	movs	r0, #32
 8001d6e:	f7ff fd33 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d72:	20ea      	movs	r0, #234	; 0xea
 8001d74:	f7ff fd20 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff fd2d 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff fd2a 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d84:	20c0      	movs	r0, #192	; 0xc0
 8001d86:	f7ff fd17 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d8a:	201b      	movs	r0, #27
 8001d8c:	f7ff fd24 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d90:	20c1      	movs	r0, #193	; 0xc1
 8001d92:	f7ff fd11 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7ff fd1e 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d9c:	20c5      	movs	r0, #197	; 0xc5
 8001d9e:	f7ff fd0b 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001da2:	2030      	movs	r0, #48	; 0x30
 8001da4:	f7ff fd18 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001da8:	2030      	movs	r0, #48	; 0x30
 8001daa:	f7ff fd15 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001dae:	20c7      	movs	r0, #199	; 0xc7
 8001db0:	f7ff fd02 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001db4:	20b7      	movs	r0, #183	; 0xb7
 8001db6:	f7ff fd0f 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001dba:	2036      	movs	r0, #54	; 0x36
 8001dbc:	f7ff fcfc 	bl	80017b8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001dc0:	2008      	movs	r0, #8
 8001dc2:	f7ff fd09 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001dc6:	203a      	movs	r0, #58	; 0x3a
 8001dc8:	f7ff fcf6 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001dcc:	2055      	movs	r0, #85	; 0x55
 8001dce:	f7ff fd03 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001dd2:	20b1      	movs	r0, #177	; 0xb1
 8001dd4:	f7ff fcf0 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fcfd 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001dde:	201a      	movs	r0, #26
 8001de0:	f7ff fcfa 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001de4:	20b6      	movs	r0, #182	; 0xb6
 8001de6:	f7ff fce7 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001dea:	200a      	movs	r0, #10
 8001dec:	f7ff fcf4 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001df0:	20a2      	movs	r0, #162	; 0xa2
 8001df2:	f7ff fcf1 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001df6:	20f2      	movs	r0, #242	; 0xf2
 8001df8:	f7ff fcde 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff fceb 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e02:	2026      	movs	r0, #38	; 0x26
 8001e04:	f7ff fcd8 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff fce5 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e0e:	20e0      	movs	r0, #224	; 0xe0
 8001e10:	f7ff fcd2 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e14:	200f      	movs	r0, #15
 8001e16:	f7ff fcdf 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e1a:	202a      	movs	r0, #42	; 0x2a
 8001e1c:	f7ff fcdc 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e20:	2028      	movs	r0, #40	; 0x28
 8001e22:	f7ff fcd9 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e26:	2008      	movs	r0, #8
 8001e28:	f7ff fcd6 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e2c:	200e      	movs	r0, #14
 8001e2e:	f7ff fcd3 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e32:	2008      	movs	r0, #8
 8001e34:	f7ff fcd0 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e38:	2054      	movs	r0, #84	; 0x54
 8001e3a:	f7ff fccd 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e3e:	20a9      	movs	r0, #169	; 0xa9
 8001e40:	f7ff fcca 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e44:	2043      	movs	r0, #67	; 0x43
 8001e46:	f7ff fcc7 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e4a:	200a      	movs	r0, #10
 8001e4c:	f7ff fcc4 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e50:	200f      	movs	r0, #15
 8001e52:	f7ff fcc1 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fcbe 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff fcbb 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fcb8 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fcb5 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e6e:	20e1      	movs	r0, #225	; 0xe1
 8001e70:	f7ff fca2 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fcaf 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e7a:	2015      	movs	r0, #21
 8001e7c:	f7ff fcac 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e80:	2017      	movs	r0, #23
 8001e82:	f7ff fca9 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e86:	2007      	movs	r0, #7
 8001e88:	f7ff fca6 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e8c:	2011      	movs	r0, #17
 8001e8e:	f7ff fca3 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e92:	2006      	movs	r0, #6
 8001e94:	f7ff fca0 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e98:	202b      	movs	r0, #43	; 0x2b
 8001e9a:	f7ff fc9d 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e9e:	2056      	movs	r0, #86	; 0x56
 8001ea0:	f7ff fc9a 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001ea4:	203c      	movs	r0, #60	; 0x3c
 8001ea6:	f7ff fc97 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001eaa:	2005      	movs	r0, #5
 8001eac:	f7ff fc94 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001eb0:	2010      	movs	r0, #16
 8001eb2:	f7ff fc91 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001eb6:	200f      	movs	r0, #15
 8001eb8:	f7ff fc8e 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ebc:	203f      	movs	r0, #63	; 0x3f
 8001ebe:	f7ff fc8b 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ec2:	203f      	movs	r0, #63	; 0x3f
 8001ec4:	f7ff fc88 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ec8:	200f      	movs	r0, #15
 8001eca:	f7ff fc85 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001ece:	202b      	movs	r0, #43	; 0x2b
 8001ed0:	f7ff fc72 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff fc7f 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff fc7c 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7ff fc79 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001ee6:	203f      	movs	r0, #63	; 0x3f
 8001ee8:	f7ff fc76 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001eec:	202a      	movs	r0, #42	; 0x2a
 8001eee:	f7ff fc63 	bl	80017b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fc70 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fc6d 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff fc6a 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f04:	20ef      	movs	r0, #239	; 0xef
 8001f06:	f7ff fc67 	bl	80017d8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f0a:	2011      	movs	r0, #17
 8001f0c:	f7ff fc54 	bl	80017b8 <LCD_WR_REG>
	HAL_Delay(120);
 8001f10:	2078      	movs	r0, #120	; 0x78
 8001f12:	f001 f961 	bl	80031d8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f16:	2029      	movs	r0, #41	; 0x29
 8001f18:	f7ff fc4e 	bl	80017b8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f22:	4804      	ldr	r0, [pc, #16]	; (8001f34 <lcd_init+0x2bc>)
 8001f24:	f002 fc3e 	bl	80047a4 <HAL_GPIO_WritePin>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	20000374 	.word	0x20000374
 8001f34:	40020000 	.word	0x40020000

08001f38 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b08b      	sub	sp, #44	; 0x2c
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	60ba      	str	r2, [r7, #8]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4603      	mov	r3, r0
 8001f44:	81fb      	strh	r3, [r7, #14]
 8001f46:	460b      	mov	r3, r1
 8001f48:	81bb      	strh	r3, [r7, #12]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f4e:	89fb      	ldrh	r3, [r7, #14]
 8001f50:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f56:	e048      	b.n	8001fea <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d145      	bne.n	8001fea <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f5e:	89fa      	ldrh	r2, [r7, #14]
 8001f60:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <lcd_ShowStr+0xc4>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	1acb      	subs	r3, r1, r3
 8001f70:	429a      	cmp	r2, r3
 8001f72:	dc3f      	bgt.n	8001ff4 <lcd_ShowStr+0xbc>
 8001f74:	89ba      	ldrh	r2, [r7, #12]
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <lcd_ShowStr+0xc4>)
 8001f78:	885b      	ldrh	r3, [r3, #2]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f80:	1acb      	subs	r3, r1, r3
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dc36      	bgt.n	8001ff4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b80      	cmp	r3, #128	; 0x80
 8001f8c:	d902      	bls.n	8001f94 <lcd_ShowStr+0x5c>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	75fb      	strb	r3, [r7, #23]
 8001f92:	e02a      	b.n	8001fea <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b0d      	cmp	r3, #13
 8001f9a:	d10b      	bne.n	8001fb4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	89bb      	ldrh	r3, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001fa8:	8abb      	ldrh	r3, [r7, #20]
 8001faa:	81fb      	strh	r3, [r7, #14]
					str++;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	e017      	b.n	8001fe4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	781a      	ldrb	r2, [r3, #0]
 8001fb8:	88fc      	ldrh	r4, [r7, #6]
 8001fba:	89b9      	ldrh	r1, [r7, #12]
 8001fbc:	89f8      	ldrh	r0, [r7, #14]
 8001fbe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	4623      	mov	r3, r4
 8001fd0:	f7ff fcba 	bl	8001948 <lcd_ShowChar>
					x+=sizey/2;
 8001fd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	89fb      	ldrh	r3, [r7, #14]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1b2      	bne.n	8001f58 <lcd_ShowStr+0x20>
 8001ff2:	e000      	b.n	8001ff6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001ff4:	bf00      	nop
			}
		}
	}
}
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	20000374 	.word	0x20000374

08002000 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002004:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <led7_Scan+0x104>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <led7_Scan+0x104>)
 800200e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <led7_Scan+0x108>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3d      	ldr	r2, [pc, #244]	; (800210c <led7_Scan+0x10c>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	b21a      	sxth	r2, r3
 800201c:	4b39      	ldr	r3, [pc, #228]	; (8002104 <led7_Scan+0x104>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b21b      	sxth	r3, r3
 8002022:	4313      	orrs	r3, r2
 8002024:	b21b      	sxth	r3, r3
 8002026:	b29a      	uxth	r2, r3
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <led7_Scan+0x104>)
 800202a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <led7_Scan+0x108>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d847      	bhi.n	80020c4 <led7_Scan+0xc4>
 8002034:	a201      	add	r2, pc, #4	; (adr r2, 800203c <led7_Scan+0x3c>)
 8002036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203a:	bf00      	nop
 800203c:	0800204d 	.word	0x0800204d
 8002040:	0800206b 	.word	0x0800206b
 8002044:	08002089 	.word	0x08002089
 8002048:	080020a7 	.word	0x080020a7
	case 0:
		spi_buffer |= 0x00b0;
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <led7_Scan+0x104>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <led7_Scan+0x104>)
 8002058:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <led7_Scan+0x104>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <led7_Scan+0x104>)
 8002066:	801a      	strh	r2, [r3, #0]
		break;
 8002068:	e02d      	b.n	80020c6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <led7_Scan+0x104>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <led7_Scan+0x104>)
 8002076:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <led7_Scan+0x104>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	f023 0320 	bic.w	r3, r3, #32
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <led7_Scan+0x104>)
 8002084:	801a      	strh	r2, [r3, #0]
		break;
 8002086:	e01e      	b.n	80020c6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <led7_Scan+0x104>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <led7_Scan+0x104>)
 8002094:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <led7_Scan+0x104>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	f023 0310 	bic.w	r3, r3, #16
 800209e:	b29a      	uxth	r2, r3
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <led7_Scan+0x104>)
 80020a2:	801a      	strh	r2, [r3, #0]
		break;
 80020a4:	e00f      	b.n	80020c6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <led7_Scan+0x104>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <led7_Scan+0x104>)
 80020b2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <led7_Scan+0x104>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <led7_Scan+0x104>)
 80020c0:	801a      	strh	r2, [r3, #0]
		break;
 80020c2:	e000      	b.n	80020c6 <led7_Scan+0xc6>
	default:
		break;
 80020c4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <led7_Scan+0x108>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	425a      	negs	r2, r3
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	f002 0203 	and.w	r2, r2, #3
 80020d6:	bf58      	it	pl
 80020d8:	4253      	negpl	r3, r2
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <led7_Scan+0x108>)
 80020dc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2140      	movs	r1, #64	; 0x40
 80020e2:	480b      	ldr	r0, [pc, #44]	; (8002110 <led7_Scan+0x110>)
 80020e4:	f002 fb5e 	bl	80047a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80020e8:	2301      	movs	r3, #1
 80020ea:	2202      	movs	r2, #2
 80020ec:	4905      	ldr	r1, [pc, #20]	; (8002104 <led7_Scan+0x104>)
 80020ee:	4809      	ldr	r0, [pc, #36]	; (8002114 <led7_Scan+0x114>)
 80020f0:	f003 f9d7 	bl	80054a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80020f4:	2201      	movs	r2, #1
 80020f6:	2140      	movs	r1, #64	; 0x40
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <led7_Scan+0x110>)
 80020fa:	f002 fb53 	bl	80047a4 <HAL_GPIO_WritePin>
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000004 	.word	0x20000004
 8002108:	2000037c 	.word	0x2000037c
 800210c:	20000000 	.word	0x20000000
 8002110:	40021800 	.word	0x40021800
 8002114:	200003ec 	.word	0x200003ec

08002118 <lightProcess>:
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess()
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	if (button_count[0] == 1)
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <lightProcess+0x58>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d113      	bne.n	800214c <lightProcess+0x34>
	{
		light_status = 1 - light_status;
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <lightProcess+0x5c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	f1c3 0301 	rsb	r3, r3, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <lightProcess+0x5c>)
 8002130:	701a      	strb	r2, [r3, #0]
		if (light_status == 1)
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <lightProcess+0x5c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d104      	bne.n	8002144 <lightProcess+0x2c>
		{
			uart_EspSendBytes("A", 1);
 800213a:	2101      	movs	r1, #1
 800213c:	480e      	ldr	r0, [pc, #56]	; (8002178 <lightProcess+0x60>)
 800213e:	f000 fe5f 	bl	8002e00 <uart_EspSendBytes>
 8002142:	e003      	b.n	800214c <lightProcess+0x34>
		}
		else
		{
			uart_EspSendBytes("a", 1);
 8002144:	2101      	movs	r1, #1
 8002146:	480d      	ldr	r0, [pc, #52]	; (800217c <lightProcess+0x64>)
 8002148:	f000 fe5a 	bl	8002e00 <uart_EspSendBytes>
		}
	}
	if (light_status == 1)
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <lightProcess+0x5c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <lightProcess+0x48>
	{
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8002154:	2201      	movs	r2, #1
 8002156:	2120      	movs	r1, #32
 8002158:	4809      	ldr	r0, [pc, #36]	; (8002180 <lightProcess+0x68>)
 800215a:	f002 fb23 	bl	80047a4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 800215e:	e004      	b.n	800216a <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2120      	movs	r1, #32
 8002164:	4806      	ldr	r0, [pc, #24]	; (8002180 <lightProcess+0x68>)
 8002166:	f002 fb1d 	bl	80047a4 <HAL_GPIO_WritePin>
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200002a8 	.word	0x200002a8
 8002174:	20000380 	.word	0x20000380
 8002178:	0800afa0 	.word	0x0800afa0
 800217c:	0800afa4 	.word	0x0800afa4
 8002180:	40021000 	.word	0x40021000

08002184 <test_Esp>:

void test_Esp()
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af04      	add	r7, sp, #16
	if (uart_EspCheck() == 0)
 800218a:	f000 fe99 	bl	8002ec0 <uart_EspCheck>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <test_Esp+0x1a>
		uart_EspSendBytes("o", 1);
 8002194:	2101      	movs	r1, #1
 8002196:	480a      	ldr	r0, [pc, #40]	; (80021c0 <test_Esp+0x3c>)
 8002198:	f000 fe32 	bl	8002e00 <uart_EspSendBytes>
	else
		lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 800219c:	e00c      	b.n	80021b8 <test_Esp+0x34>
		lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 800219e:	2300      	movs	r3, #0
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	2318      	movs	r3, #24
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	2300      	movs	r3, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <test_Esp+0x40>)
 80021b0:	2132      	movs	r1, #50	; 0x32
 80021b2:	200a      	movs	r0, #10
 80021b4:	f7ff fec0 	bl	8001f38 <lcd_ShowStr>
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	0800afa8 	.word	0x0800afa8
 80021c4:	0800afac 	.word	0x0800afac

080021c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021cc:	f000 ff92 	bl	80030f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d0:	f000 f82e 	bl	8002230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d4:	f7ff f940 	bl	8001458 <MX_GPIO_Init>
  MX_TIM2_Init();
 80021d8:	f000 fcbc 	bl	8002b54 <MX_TIM2_Init>
  MX_SPI1_Init();
 80021dc:	f000 fa9a 	bl	8002714 <MX_SPI1_Init>
  MX_FSMC_Init();
 80021e0:	f7ff f86a 	bl	80012b8 <MX_FSMC_Init>
  MX_I2C1_Init();
 80021e4:	f7ff fa72 	bl	80016cc <MX_I2C1_Init>
  MX_TIM13_Init();
 80021e8:	f000 fd00 	bl	8002bec <MX_TIM13_Init>
  MX_DMA_Init();
 80021ec:	f7ff f844 	bl	8001278 <MX_DMA_Init>
  MX_ADC1_Init();
 80021f0:	f7fe feac 	bl	8000f4c <MX_ADC1_Init>
  MX_TIM1_Init();
 80021f4:	f000 fc5e 	bl	8002ab4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80021f8:	f000 fe9c 	bl	8002f34 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80021fc:	f000 fe70 	bl	8002ee0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002200:	f000 f880 	bl	8002304 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff fb55 	bl	80018b4 <lcd_Clear>
  while (1)
  {
    // 50ms task
    if (flag_timer2 == 1)
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <main+0x64>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d1fb      	bne.n	800220a <main+0x42>
    {
      flag_timer2 = 0;
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <main+0x64>)
 8002214:	2200      	movs	r2, #0
 8002216:	801a      	strh	r2, [r3, #0]
      button_Scan();
 8002218:	f7fe ffc2 	bl	80011a0 <button_Scan>
      test_Esp();
 800221c:	f7ff ffb2 	bl	8002184 <test_Esp>
      lightProcess();
 8002220:	f7ff ff7a 	bl	8002118 <lightProcess>
      getData();
 8002224:	f000 f880 	bl	8002328 <getData>
    if (flag_timer2 == 1)
 8002228:	e7ef      	b.n	800220a <main+0x42>
 800222a:	bf00      	nop
 800222c:	200003e6 	.word	0x200003e6

08002230 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b094      	sub	sp, #80	; 0x50
 8002234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002236:	f107 0320 	add.w	r3, r7, #32
 800223a:	2230      	movs	r2, #48	; 0x30
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f005 ffb6 	bl	80081b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	4b28      	ldr	r3, [pc, #160]	; (80022fc <SystemClock_Config+0xcc>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	4a27      	ldr	r2, [pc, #156]	; (80022fc <SystemClock_Config+0xcc>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	6413      	str	r3, [r2, #64]	; 0x40
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <SystemClock_Config+0xcc>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002270:	2300      	movs	r3, #0
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <SystemClock_Config+0xd0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a21      	ldr	r2, [pc, #132]	; (8002300 <SystemClock_Config+0xd0>)
 800227a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <SystemClock_Config+0xd0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002290:	2301      	movs	r3, #1
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002294:	2310      	movs	r3, #16
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002298:	2302      	movs	r3, #2
 800229a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800229c:	2300      	movs	r3, #0
 800229e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022a0:	2308      	movs	r3, #8
 80022a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022a4:	23a8      	movs	r3, #168	; 0xa8
 80022a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022a8:	2302      	movs	r3, #2
 80022aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022ac:	2304      	movs	r3, #4
 80022ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b0:	f107 0320 	add.w	r3, r7, #32
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fbd3 	bl	8004a60 <HAL_RCC_OscConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022c0:	f000 f8f2 	bl	80024a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022c4:	230f      	movs	r3, #15
 80022c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c8:	2302      	movs	r3, #2
 80022ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80022d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	2105      	movs	r1, #5
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 fe34 	bl	8004f50 <HAL_RCC_ClockConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022ee:	f000 f8db 	bl	80024a8 <Error_Handler>
  }
}
 80022f2:	bf00      	nop
 80022f4:	3750      	adds	r7, #80	; 0x50
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40007000 	.word	0x40007000

08002304 <system_init>:

/* USER CODE BEGIN 4 */
void system_init()
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  timer_init();
 8002308:	f000 f9b0 	bl	800266c <timer_init>
  button_init();
 800230c:	f7fe ff3c 	bl	8001188 <button_init>
  lcd_init();
 8002310:	f7ff fcb2 	bl	8001c78 <lcd_init>
  uart_init_esp();
 8002314:	f000 fd5e 	bl	8002dd4 <uart_init_esp>
  setTimer2(50);
 8002318:	2032      	movs	r0, #50	; 0x32
 800231a:	f000 f9b5 	bl	8002688 <setTimer2>
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	0000      	movs	r0, r0
 8002324:	0000      	movs	r0, r0
	...

08002328 <getData>:
    HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
  }
}

void getData()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af04      	add	r7, sp, #16
  count_adc = (count_adc + 1) % 600;
 800232e:	4b50      	ldr	r3, [pc, #320]	; (8002470 <getData+0x148>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	4a4f      	ldr	r2, [pc, #316]	; (8002474 <getData+0x14c>)
 8002336:	fb82 1203 	smull	r1, r2, r2, r3
 800233a:	1191      	asrs	r1, r2, #6
 800233c:	17da      	asrs	r2, r3, #31
 800233e:	1a8a      	subs	r2, r1, r2
 8002340:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002344:	fb01 f202 	mul.w	r2, r1, r2
 8002348:	1a9a      	subs	r2, r3, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	4b48      	ldr	r3, [pc, #288]	; (8002470 <getData+0x148>)
 800234e:	701a      	strb	r2, [r3, #0]
  if (count_adc == 0)
 8002350:	4b47      	ldr	r3, [pc, #284]	; (8002470 <getData+0x148>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 8081 	bne.w	800245c <getData+0x134>
  {
    sensor_Read();
 800235a:	f000 f8ab 	bl	80024b4 <sensor_Read>
    voltage = sensor_GetVoltage();
 800235e:	f000 f8cf 	bl	8002500 <sensor_GetVoltage>
 8002362:	eef0 7a40 	vmov.f32	s15, s0
 8002366:	4b44      	ldr	r3, [pc, #272]	; (8002478 <getData+0x150>)
 8002368:	edc3 7a00 	vstr	s15, [r3]
    current = sensor_GetCurrent();
 800236c:	f000 f904 	bl	8002578 <sensor_GetCurrent>
 8002370:	eef0 7a40 	vmov.f32	s15, s0
 8002374:	4b41      	ldr	r3, [pc, #260]	; (800247c <getData+0x154>)
 8002376:	edc3 7a00 	vstr	s15, [r3]
    temp = sensor_GetTemperature();
 800237a:	f000 f959 	bl	8002630 <sensor_GetTemperature>
 800237e:	eef0 7a40 	vmov.f32	s15, s0
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <getData+0x158>)
 8002384:	edc3 7a00 	vstr	s15, [r3]
    light = sensor_GetLight();
 8002388:	f000 f8a2 	bl	80024d0 <sensor_GetLight>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <getData+0x15c>)
 8002392:	601a      	str	r2, [r3, #0]
    rawHumid = sensor_GetPotentiometer();
 8002394:	f000 f8a8 	bl	80024e8 <sensor_GetPotentiometer>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <getData+0x160>)
 800239e:	601a      	str	r2, [r3, #0]
    power = voltage * current;
 80023a0:	4b35      	ldr	r3, [pc, #212]	; (8002478 <getData+0x150>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	4b35      	ldr	r3, [pc, #212]	; (800247c <getData+0x154>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b0:	4b36      	ldr	r3, [pc, #216]	; (800248c <getData+0x164>)
 80023b2:	edc3 7a00 	vstr	s15, [r3]
    humid = ((float)rawHumid / 4095.0) * 100;
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <getData+0x160>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c2:	ee17 0a90 	vmov	r0, s15
 80023c6:	f7fe f8bf 	bl	8000548 <__aeabi_f2d>
 80023ca:	a327      	add	r3, pc, #156	; (adr r3, 8002468 <getData+0x140>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fe fa3c 	bl	800084c <__aeabi_ddiv>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <getData+0x168>)
 80023e2:	f7fe f909 	bl	80005f8 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fbdb 	bl	8000ba8 <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <getData+0x16c>)
 80023f6:	6013      	str	r3, [r2, #0]
    lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 80023f8:	2300      	movs	r3, #0
 80023fa:	9302      	str	r3, [sp, #8]
 80023fc:	2310      	movs	r3, #16
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2300      	movs	r3, #0
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002408:	4a23      	ldr	r2, [pc, #140]	; (8002498 <getData+0x170>)
 800240a:	21b4      	movs	r1, #180	; 0xb4
 800240c:	200a      	movs	r0, #10
 800240e:	f7ff fd93 	bl	8001f38 <lcd_ShowStr>
    lcd_ShowFloatNum(130, 180, temp, 4, RED, BLACK, 16);
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <getData+0x158>)
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	2310      	movs	r3, #16
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2300      	movs	r3, #0
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002424:	2204      	movs	r2, #4
 8002426:	eeb0 0a67 	vmov.f32	s0, s15
 800242a:	21b4      	movs	r1, #180	; 0xb4
 800242c:	2082      	movs	r0, #130	; 0x82
 800242e:	f7ff fb77 	bl	8001b20 <lcd_ShowFloatNum>
    length = sprintf(str, "%.2f", temp);
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <getData+0x158>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f886 	bl	8000548 <__aeabi_f2d>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4916      	ldr	r1, [pc, #88]	; (800249c <getData+0x174>)
 8002442:	4817      	ldr	r0, [pc, #92]	; (80024a0 <getData+0x178>)
 8002444:	f006 fb26 	bl	8008a94 <siprintf>
 8002448:	4603      	mov	r3, r0
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <getData+0x17c>)
 800244c:	6013      	str	r3, [r2, #0]
    uart_EspSendBytes(str, length);
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <getData+0x17c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	4812      	ldr	r0, [pc, #72]	; (80024a0 <getData+0x178>)
 8002458:	f000 fcd2 	bl	8002e00 <uart_EspSendBytes>
  }
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	f3af 8000 	nop.w
 8002468:	00000000 	.word	0x00000000
 800246c:	40affe00 	.word	0x40affe00
 8002470:	200003a0 	.word	0x200003a0
 8002474:	1b4e81b5 	.word	0x1b4e81b5
 8002478:	20000388 	.word	0x20000388
 800247c:	2000038c 	.word	0x2000038c
 8002480:	20000384 	.word	0x20000384
 8002484:	20000398 	.word	0x20000398
 8002488:	2000039c 	.word	0x2000039c
 800248c:	20000394 	.word	0x20000394
 8002490:	40590000 	.word	0x40590000
 8002494:	20000390 	.word	0x20000390
 8002498:	0800afb8 	.word	0x0800afb8
 800249c:	0800afc8 	.word	0x0800afc8
 80024a0:	200003a4 	.word	0x200003a4
 80024a4:	200003d8 	.word	0x200003d8

080024a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ac:	b672      	cpsid	i
}
 80024ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <Error_Handler+0x8>
	...

080024b4 <sensor_Read>:

void sensor_init(){
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}

void sensor_Read(){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80024b8:	2205      	movs	r2, #5
 80024ba:	4903      	ldr	r1, [pc, #12]	; (80024c8 <sensor_Read+0x14>)
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <sensor_Read+0x18>)
 80024be:	f000 fef3 	bl	80032a8 <HAL_ADC_Start_DMA>
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200003dc 	.word	0x200003dc
 80024cc:	20000200 	.word	0x20000200

080024d0 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
	return adc_receive[2];
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <sensor_GetLight+0x14>)
 80024d6:	889b      	ldrh	r3, [r3, #4]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	200003dc 	.word	0x200003dc

080024e8 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <sensor_GetPotentiometer+0x14>)
 80024ee:	88db      	ldrh	r3, [r3, #6]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	200003dc 	.word	0x200003dc

08002500 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <sensor_GetVoltage+0x70>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002510:	ee17 0a90 	vmov	r0, s15
 8002514:	f7fe f818 	bl	8000548 <__aeabi_f2d>
 8002518:	a311      	add	r3, pc, #68	; (adr r3, 8002560 <sensor_GetVoltage+0x60>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	f7fe f86b 	bl	80005f8 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <sensor_GetVoltage+0x74>)
 8002530:	f7fe f862 	bl	80005f8 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	a30a      	add	r3, pc, #40	; (adr r3, 8002568 <sensor_GetVoltage+0x68>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe f983 	bl	800084c <__aeabi_ddiv>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe fb2b 	bl	8000ba8 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	ee07 3a90 	vmov	s15, r3
}
 8002558:	eeb0 0a67 	vmov.f32	s0, s15
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	66666666 	.word	0x66666666
 8002564:	400a6666 	.word	0x400a6666
 8002568:	cccccccd 	.word	0xcccccccd
 800256c:	40b908ac 	.word	0x40b908ac
 8002570:	200003dc 	.word	0x200003dc
 8002574:	40280000 	.word	0x40280000

08002578 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <sensor_GetCurrent+0xa8>)
 800257e:	885b      	ldrh	r3, [r3, #2]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002588:	ee17 0a90 	vmov	r0, s15
 800258c:	f7fd ffdc 	bl	8000548 <__aeabi_f2d>
 8002590:	a31f      	add	r3, pc, #124	; (adr r3, 8002610 <sensor_GetCurrent+0x98>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fe f82f 	bl	80005f8 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <sensor_GetCurrent+0xac>)
 80025a8:	f7fe f826 	bl	80005f8 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	a318      	add	r3, pc, #96	; (adr r3, 8002618 <sensor_GetCurrent+0xa0>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	f7fe f947 	bl	800084c <__aeabi_ddiv>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <sensor_GetCurrent+0xb0>)
 80025cc:	f7fd fe5c 	bl	8000288 <__aeabi_dsub>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <sensor_GetCurrent+0xb4>)
 80025de:	f7fe f80b 	bl	80005f8 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <sensor_GetCurrent+0xb0>)
 80025f0:	f7fe f92c 	bl	800084c <__aeabi_ddiv>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7fe fad4 	bl	8000ba8 <__aeabi_d2f>
 8002600:	4603      	mov	r3, r0
 8002602:	ee07 3a90 	vmov	s15, r3
}
 8002606:	eeb0 0a67 	vmov.f32	s0, s15
 800260a:	bd80      	pop	{r7, pc}
 800260c:	f3af 8000 	nop.w
 8002610:	66666666 	.word	0x66666666
 8002614:	400a6666 	.word	0x400a6666
 8002618:	147ae148 	.word	0x147ae148
 800261c:	40a4b2ee 	.word	0x40a4b2ee
 8002620:	200003dc 	.word	0x200003dc
 8002624:	408f4000 	.word	0x408f4000
 8002628:	40040000 	.word	0x40040000
 800262c:	40140000 	.word	0x40140000

08002630 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <sensor_GetTemperature+0x30>)
 8002636:	891b      	ldrh	r3, [r3, #8]
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002640:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002664 <sensor_GetTemperature+0x34>
 8002644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002648:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002668 <sensor_GetTemperature+0x38>
 800264c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002650:	eef0 7a66 	vmov.f32	s15, s13
}
 8002654:	eeb0 0a67 	vmov.f32	s0, s15
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	200003dc 	.word	0x200003dc
 8002664:	43a50000 	.word	0x43a50000
 8002668:	457ff000 	.word	0x457ff000

0800266c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002670:	4803      	ldr	r0, [pc, #12]	; (8002680 <timer_init+0x14>)
 8002672:	f003 fd31 	bl	80060d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002676:	4803      	ldr	r0, [pc, #12]	; (8002684 <timer_init+0x18>)
 8002678:	f003 fcc6 	bl	8006008 <HAL_TIM_Base_Start>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000490 	.word	0x20000490
 8002684:	20000448 	.word	0x20000448

08002688 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <setTimer2+0x2c>)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <setTimer2+0x2c>)
 800269a:	881a      	ldrh	r2, [r3, #0]
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <setTimer2+0x30>)
 800269e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <setTimer2+0x34>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	200003ea 	.word	0x200003ea
 80026b8:	200003e8 	.word	0x200003e8
 80026bc:	200003e6 	.word	0x200003e6

080026c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d0:	d116      	bne.n	8002700 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d010      	beq.n	80026fc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026e4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026fa:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80026fc:	f7ff fc80 	bl	8002000 <led7_Scan>
	}
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200003e8 	.word	0x200003e8
 800270c:	200003e6 	.word	0x200003e6
 8002710:	200003ea 	.word	0x200003ea

08002714 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MX_SPI1_Init+0x64>)
 800271a:	4a18      	ldr	r2, [pc, #96]	; (800277c <MX_SPI1_Init+0x68>)
 800271c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <MX_SPI1_Init+0x64>)
 8002720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_SPI1_Init+0x64>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_SPI1_Init+0x64>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_SPI1_Init+0x64>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_SPI1_Init+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_SPI1_Init+0x64>)
 8002740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002744:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_SPI1_Init+0x64>)
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <MX_SPI1_Init+0x64>)
 800274e:	2200      	movs	r2, #0
 8002750:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_SPI1_Init+0x64>)
 8002754:	2200      	movs	r2, #0
 8002756:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <MX_SPI1_Init+0x64>)
 800275a:	2200      	movs	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_SPI1_Init+0x64>)
 8002760:	220a      	movs	r2, #10
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002764:	4804      	ldr	r0, [pc, #16]	; (8002778 <MX_SPI1_Init+0x64>)
 8002766:	f002 fe13 	bl	8005390 <HAL_SPI_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002770:	f7ff fe9a 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200003ec 	.word	0x200003ec
 800277c:	40013000 	.word	0x40013000

08002780 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a19      	ldr	r2, [pc, #100]	; (8002804 <HAL_SPI_MspInit+0x84>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d12b      	bne.n	80027fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <HAL_SPI_MspInit+0x88>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_SPI_MspInit+0x88>)
 80027ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_SPI_MspInit+0x88>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_SPI_MspInit+0x88>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a10      	ldr	r2, [pc, #64]	; (8002808 <HAL_SPI_MspInit+0x88>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_SPI_MspInit+0x88>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027da:	2338      	movs	r3, #56	; 0x38
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027ea:	2305      	movs	r3, #5
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	4805      	ldr	r0, [pc, #20]	; (800280c <HAL_SPI_MspInit+0x8c>)
 80027f6:	f001 fe39 	bl	800446c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027fa:	bf00      	nop
 80027fc:	3728      	adds	r7, #40	; 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40013000 	.word	0x40013000
 8002808:	40023800 	.word	0x40023800
 800280c:	40020400 	.word	0x40020400

08002810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_MspInit+0x4c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4a0f      	ldr	r2, [pc, #60]	; (800285c <HAL_MspInit+0x4c>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002824:	6453      	str	r3, [r2, #68]	; 0x44
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <HAL_MspInit+0x4c>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_MspInit+0x4c>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a08      	ldr	r2, [pc, #32]	; (800285c <HAL_MspInit+0x4c>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_MspInit+0x4c>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800

08002860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <NMI_Handler+0x4>

08002866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286a:	e7fe      	b.n	800286a <HardFault_Handler+0x4>

0800286c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <MemManage_Handler+0x4>

08002872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002876:	e7fe      	b.n	8002876 <BusFault_Handler+0x4>

08002878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800287c:	e7fe      	b.n	800287c <UsageFault_Handler+0x4>

0800287e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ac:	f000 fc74 	bl	8003198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <TIM2_IRQHandler+0x10>)
 80028ba:	f003 fcd6 	bl	800626a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000490 	.word	0x20000490

080028c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <USART1_IRQHandler+0x10>)
 80028ce:	f004 fc11 	bl	80070f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000588 	.word	0x20000588

080028dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <USART2_IRQHandler+0x10>)
 80028e2:	f004 fc07 	bl	80070f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200005cc 	.word	0x200005cc

080028f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <DMA2_Stream0_IRQHandler+0x10>)
 80028f6:	f001 fb4f 	bl	8003f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000248 	.word	0x20000248

08002904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	return 1;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_kill>:

int _kill(int pid, int sig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800291e:	f005 fc1d 	bl	800815c <__errno>
 8002922:	4603      	mov	r3, r0
 8002924:	2216      	movs	r2, #22
 8002926:	601a      	str	r2, [r3, #0]
	return -1;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_exit>:

void _exit (int status)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ffe7 	bl	8002914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002946:	e7fe      	b.n	8002946 <_exit+0x12>

08002948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e00a      	b.n	8002970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800295a:	f3af 8000 	nop.w
 800295e:	4601      	mov	r1, r0
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	60ba      	str	r2, [r7, #8]
 8002966:	b2ca      	uxtb	r2, r1
 8002968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3301      	adds	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	dbf0      	blt.n	800295a <_read+0x12>
	}

return len;
 8002978:	687b      	ldr	r3, [r7, #4]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e009      	b.n	80029a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	60ba      	str	r2, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbf1      	blt.n	8002994 <_write+0x12>
	}
	return len;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_close>:

int _close(int file)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
	return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e2:	605a      	str	r2, [r3, #4]
	return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_isatty>:

int _isatty(int file)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
	return 1;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
	return 0;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <_sbrk+0x5c>)
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <_sbrk+0x60>)
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <_sbrk+0x64>)
 8002a42:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <_sbrk+0x68>)
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <_sbrk+0x64>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d207      	bcs.n	8002a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a54:	f005 fb82 	bl	800815c <__errno>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	e009      	b.n	8002a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <_sbrk+0x64>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <_sbrk+0x64>)
 8002a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20020000 	.word	0x20020000
 8002a84:	00000400 	.word	0x00000400
 8002a88:	20000444 	.word	0x20000444
 8002a8c:	20000628 	.word	0x20000628

08002a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <SystemInit+0x20>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <SystemInit+0x20>)
 8002a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac8:	463b      	mov	r3, r7
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <MX_TIM1_Init+0x9c>)
 8002ad4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002ad8:	2253      	movs	r2, #83	; 0x53
 8002ada:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002afc:	4813      	ldr	r0, [pc, #76]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002afe:	f003 fa33 	bl	8005f68 <HAL_TIM_Base_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002b08:	f7ff fcce 	bl	80024a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4619      	mov	r1, r3
 8002b18:	480c      	ldr	r0, [pc, #48]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002b1a:	f003 fd71 	bl	8006600 <HAL_TIM_ConfigClockSource>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002b24:	f7ff fcc0 	bl	80024a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b30:	463b      	mov	r3, r7
 8002b32:	4619      	mov	r1, r3
 8002b34:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_TIM1_Init+0x98>)
 8002b36:	f004 f93d 	bl	8006db4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002b40:	f7ff fcb2 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000448 	.word	0x20000448
 8002b50:	40010000 	.word	0x40010000

08002b54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b68:	463b      	mov	r3, r7
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <MX_TIM2_Init+0x94>)
 8002b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <MX_TIM2_Init+0x94>)
 8002b7a:	f240 3247 	movw	r2, #839	; 0x347
 8002b7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <MX_TIM2_Init+0x94>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <MX_TIM2_Init+0x94>)
 8002b88:	2263      	movs	r2, #99	; 0x63
 8002b8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8c:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <MX_TIM2_Init+0x94>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <MX_TIM2_Init+0x94>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b98:	4813      	ldr	r0, [pc, #76]	; (8002be8 <MX_TIM2_Init+0x94>)
 8002b9a:	f003 f9e5 	bl	8005f68 <HAL_TIM_Base_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ba4:	f7ff fc80 	bl	80024a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bae:	f107 0308 	add.w	r3, r7, #8
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480c      	ldr	r0, [pc, #48]	; (8002be8 <MX_TIM2_Init+0x94>)
 8002bb6:	f003 fd23 	bl	8006600 <HAL_TIM_ConfigClockSource>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002bc0:	f7ff fc72 	bl	80024a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bcc:	463b      	mov	r3, r7
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4805      	ldr	r0, [pc, #20]	; (8002be8 <MX_TIM2_Init+0x94>)
 8002bd2:	f004 f8ef 	bl	8006db4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002bdc:	f7ff fc64 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000490 	.word	0x20000490

08002bec <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	615a      	str	r2, [r3, #20]
 8002c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <MX_TIM13_Init+0x98>)
 8002c08:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c0c:	f240 3247 	movw	r2, #839	; 0x347
 8002c10:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c1a:	2263      	movs	r2, #99	; 0x63
 8002c1c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002c2a:	4815      	ldr	r0, [pc, #84]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c2c:	f003 f99c 	bl	8005f68 <HAL_TIM_Base_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002c36:	f7ff fc37 	bl	80024a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002c3a:	4811      	ldr	r0, [pc, #68]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c3c:	f003 fabc 	bl	80061b8 <HAL_TIM_PWM_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002c46:	f7ff fc2f 	bl	80024a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c4a:	2360      	movs	r3, #96	; 0x60
 8002c4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4807      	ldr	r0, [pc, #28]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c62:	f003 fc0b 	bl	800647c <HAL_TIM_PWM_ConfigChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002c6c:	f7ff fc1c 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002c70:	4803      	ldr	r0, [pc, #12]	; (8002c80 <MX_TIM13_Init+0x94>)
 8002c72:	f000 f85b 	bl	8002d2c <HAL_TIM_MspPostInit>

}
 8002c76:	bf00      	nop
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200004d8 	.word	0x200004d8
 8002c84:	40001c00 	.word	0x40001c00

08002c88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <HAL_TIM_Base_MspInit+0x98>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10e      	bne.n	8002cb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_TIM_Base_MspInit+0x9c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a20      	ldr	r2, [pc, #128]	; (8002d24 <HAL_TIM_Base_MspInit+0x9c>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_TIM_Base_MspInit+0x9c>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002cb6:	e02e      	b.n	8002d16 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc0:	d116      	bne.n	8002cf0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_TIM_Base_MspInit+0x9c>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <HAL_TIM_Base_MspInit+0x9c>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_TIM_Base_MspInit+0x9c>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	201c      	movs	r0, #28
 8002ce4:	f000 ff89 	bl	8003bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ce8:	201c      	movs	r0, #28
 8002cea:	f000 ffa2 	bl	8003c32 <HAL_NVIC_EnableIRQ>
}
 8002cee:	e012      	b.n	8002d16 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <HAL_TIM_Base_MspInit+0xa0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10d      	bne.n	8002d16 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_TIM_Base_MspInit+0x9c>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_TIM_Base_MspInit+0x9c>)
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_TIM_Base_MspInit+0x9c>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40001c00 	.word	0x40001c00

08002d2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <HAL_TIM_MspPostInit+0x68>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d11e      	bne.n	8002d8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_TIM_MspPostInit+0x6c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <HAL_TIM_MspPostInit+0x6c>)
 8002d58:	f043 0320 	orr.w	r3, r3, #32
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_TIM_MspPostInit+0x6c>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002d7c:	2309      	movs	r3, #9
 8002d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	4619      	mov	r1, r3
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <HAL_TIM_MspPostInit+0x70>)
 8002d88:	f001 fb70 	bl	800446c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40001c00 	.word	0x40001c00
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40021400 	.word	0x40021400

08002da0 <uart_Rs232SendString>:
{
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
}

void uart_Rs232SendString(uint8_t *str)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void *)msg, sprintf((void *)msg, "%s", str), 10);
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <uart_Rs232SendString+0x28>)
 8002dac:	4807      	ldr	r0, [pc, #28]	; (8002dcc <uart_Rs232SendString+0x2c>)
 8002dae:	f005 fe71 	bl	8008a94 <siprintf>
 8002db2:	4603      	mov	r3, r0
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	230a      	movs	r3, #10
 8002db8:	4904      	ldr	r1, [pc, #16]	; (8002dcc <uart_Rs232SendString+0x2c>)
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <uart_Rs232SendString+0x30>)
 8002dbc:	f004 f8d7 	bl	8006f6e <HAL_UART_Transmit>
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	0800afd0 	.word	0x0800afd0
 8002dcc:	20000520 	.word	0x20000520
 8002dd0:	20000588 	.word	0x20000588

08002dd4 <uart_init_esp>:
	sprintf((void *)msg, "%ld", num % 100);
	uart_Rs232SendString(msg);
}

void uart_init_esp()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4906      	ldr	r1, [pc, #24]	; (8002df4 <uart_init_esp+0x20>)
 8002ddc:	4806      	ldr	r0, [pc, #24]	; (8002df8 <uart_init_esp+0x24>)
 8002dde:	f004 f958 	bl	8007092 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8002de2:	2201      	movs	r2, #1
 8002de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <uart_init_esp+0x28>)
 8002dea:	f001 fcdb 	bl	80047a4 <HAL_GPIO_WritePin>
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000585 	.word	0x20000585
 8002df8:	200005cc 	.word	0x200005cc
 8002dfc:	40021400 	.word	0x40021400

08002e00 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t *bytes, uint16_t size)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	230a      	movs	r3, #10
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4803      	ldr	r0, [pc, #12]	; (8002e20 <uart_EspSendBytes+0x20>)
 8002e14:	f004 f8ab 	bl	8006f6e <HAL_UART_Transmit>
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200005cc 	.word	0x200005cc

08002e24 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <HAL_UART_RxCpltCallback+0x78>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10a      	bne.n	8002e4c <HAL_UART_RxCpltCallback+0x28>
	{
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002e36:	230a      	movs	r3, #10
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4919      	ldr	r1, [pc, #100]	; (8002ea0 <HAL_UART_RxCpltCallback+0x7c>)
 8002e3c:	4819      	ldr	r0, [pc, #100]	; (8002ea4 <HAL_UART_RxCpltCallback+0x80>)
 8002e3e:	f004 f896 	bl	8006f6e <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002e42:	2201      	movs	r2, #1
 8002e44:	4916      	ldr	r1, [pc, #88]	; (8002ea0 <HAL_UART_RxCpltCallback+0x7c>)
 8002e46:	4817      	ldr	r0, [pc, #92]	; (8002ea4 <HAL_UART_RxCpltCallback+0x80>)
 8002e48:	f004 f923 	bl	8007092 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == USART2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <HAL_UART_RxCpltCallback+0x84>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d11e      	bne.n	8002e94 <HAL_UART_RxCpltCallback+0x70>
	{
		if (receive_buffer2 == 'O')
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_UART_RxCpltCallback+0x88>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b4f      	cmp	r3, #79	; 0x4f
 8002e5c:	d106      	bne.n	8002e6c <HAL_UART_RxCpltCallback+0x48>
		{
			check_esp = 1;
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_UART_RxCpltCallback+0x8c>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
			uart_Rs232SendString("ESP Respond");
 8002e64:	4813      	ldr	r0, [pc, #76]	; (8002eb4 <HAL_UART_RxCpltCallback+0x90>)
 8002e66:	f7ff ff9b 	bl	8002da0 <uart_Rs232SendString>
 8002e6a:	e00e      	b.n	8002e8a <HAL_UART_RxCpltCallback+0x66>

		}
		else if (receive_buffer2 == 'a')
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_UART_RxCpltCallback+0x88>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b61      	cmp	r3, #97	; 0x61
 8002e72:	d103      	bne.n	8002e7c <HAL_UART_RxCpltCallback+0x58>
			light_status = 0;
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_UART_RxCpltCallback+0x94>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e006      	b.n	8002e8a <HAL_UART_RxCpltCallback+0x66>
		else if (receive_buffer2 == 'A')
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_UART_RxCpltCallback+0x88>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b41      	cmp	r3, #65	; 0x41
 8002e82:	d102      	bne.n	8002e8a <HAL_UART_RxCpltCallback+0x66>
			light_status = 1;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_UART_RxCpltCallback+0x94>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <HAL_UART_RxCpltCallback+0x88>)
 8002e8e:	480b      	ldr	r0, [pc, #44]	; (8002ebc <HAL_UART_RxCpltCallback+0x98>)
 8002e90:	f004 f8ff 	bl	8007092 <HAL_UART_Receive_IT>
	}
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40011000 	.word	0x40011000
 8002ea0:	20000584 	.word	0x20000584
 8002ea4:	20000588 	.word	0x20000588
 8002ea8:	40004400 	.word	0x40004400
 8002eac:	20000585 	.word	0x20000585
 8002eb0:	20000586 	.word	0x20000586
 8002eb4:	0800afe4 	.word	0x0800afe4
 8002eb8:	20000380 	.word	0x20000380
 8002ebc:	200005cc 	.word	0x200005cc

08002ec0 <uart_EspCheck>:

uint8_t uart_EspCheck()
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
	if (check_esp == 1)
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <uart_EspCheck+0x1c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <uart_EspCheck+0x10>
		return 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <uart_EspCheck+0x12>
	return 0;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	20000586 	.word	0x20000586

08002ee0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee4:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <MX_USART1_UART_Init+0x4c>)
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <MX_USART1_UART_Init+0x50>)
 8002ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <MX_USART1_UART_Init+0x4c>)
 8002eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <MX_USART1_UART_Init+0x4c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <MX_USART1_UART_Init+0x4c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <MX_USART1_UART_Init+0x4c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <MX_USART1_UART_Init+0x4c>)
 8002f06:	220c      	movs	r2, #12
 8002f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <MX_USART1_UART_Init+0x4c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <MX_USART1_UART_Init+0x4c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f16:	4805      	ldr	r0, [pc, #20]	; (8002f2c <MX_USART1_UART_Init+0x4c>)
 8002f18:	f003 ffdc 	bl	8006ed4 <HAL_UART_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f22:	f7ff fac1 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000588 	.word	0x20000588
 8002f30:	40011000 	.word	0x40011000

08002f34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <MX_USART2_UART_Init+0x50>)
 8002f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f6a:	4805      	ldr	r0, [pc, #20]	; (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f6c:	f003 ffb2 	bl	8006ed4 <HAL_UART_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f76:	f7ff fa97 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200005cc 	.word	0x200005cc
 8002f84:	40004400 	.word	0x40004400

08002f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	; 0x30
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 031c 	add.w	r3, r7, #28
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3a      	ldr	r2, [pc, #232]	; (8003090 <HAL_UART_MspInit+0x108>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d135      	bne.n	8003016 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	4a38      	ldr	r2, [pc, #224]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8002fb4:	f043 0310 	orr.w	r3, r3, #16
 8002fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a31      	ldr	r2, [pc, #196]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fe2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ff4:	2307      	movs	r3, #7
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4826      	ldr	r0, [pc, #152]	; (8003098 <HAL_UART_MspInit+0x110>)
 8003000:	f001 fa34 	bl	800446c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	2025      	movs	r0, #37	; 0x25
 800300a:	f000 fdf6 	bl	8003bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800300e:	2025      	movs	r0, #37	; 0x25
 8003010:	f000 fe0f 	bl	8003c32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003014:	e038      	b.n	8003088 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a20      	ldr	r2, [pc, #128]	; (800309c <HAL_UART_MspInit+0x114>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d133      	bne.n	8003088 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <HAL_UART_MspInit+0x10c>)
 800302a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302e:	6413      	str	r3, [r2, #64]	; 0x40
 8003030:	4b18      	ldr	r3, [pc, #96]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	4a13      	ldr	r2, [pc, #76]	; (8003094 <HAL_UART_MspInit+0x10c>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6313      	str	r3, [r2, #48]	; 0x30
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_UART_MspInit+0x10c>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003058:	230c      	movs	r3, #12
 800305a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003068:	2307      	movs	r3, #7
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	f107 031c 	add.w	r3, r7, #28
 8003070:	4619      	mov	r1, r3
 8003072:	4809      	ldr	r0, [pc, #36]	; (8003098 <HAL_UART_MspInit+0x110>)
 8003074:	f001 f9fa 	bl	800446c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003078:	2200      	movs	r2, #0
 800307a:	2100      	movs	r1, #0
 800307c:	2026      	movs	r0, #38	; 0x26
 800307e:	f000 fdbc 	bl	8003bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003082:	2026      	movs	r0, #38	; 0x26
 8003084:	f000 fdd5 	bl	8003c32 <HAL_NVIC_EnableIRQ>
}
 8003088:	bf00      	nop
 800308a:	3730      	adds	r7, #48	; 0x30
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40011000 	.word	0x40011000
 8003094:	40023800 	.word	0x40023800
 8003098:	40020000 	.word	0x40020000
 800309c:	40004400 	.word	0x40004400

080030a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030a4:	480d      	ldr	r0, [pc, #52]	; (80030dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030a6:	490e      	ldr	r1, [pc, #56]	; (80030e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030a8:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ac:	e002      	b.n	80030b4 <LoopCopyDataInit>

080030ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b2:	3304      	adds	r3, #4

080030b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b8:	d3f9      	bcc.n	80030ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ba:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030bc:	4c0b      	ldr	r4, [pc, #44]	; (80030ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80030be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c0:	e001      	b.n	80030c6 <LoopFillZerobss>

080030c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c4:	3204      	adds	r2, #4

080030c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c8:	d3fb      	bcc.n	80030c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ca:	f7ff fce1 	bl	8002a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ce:	f005 f84b 	bl	8008168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030d2:	f7ff f879 	bl	80021c8 <main>
  bx  lr    
 80030d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80030e4:	0800e37c 	.word	0x0800e37c
  ldr r2, =_sbss
 80030e8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80030ec:	20000624 	.word	0x20000624

080030f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f0:	e7fe      	b.n	80030f0 <ADC_IRQHandler>
	...

080030f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HAL_Init+0x40>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <HAL_Init+0x40>)
 80030fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_Init+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_Init+0x40>)
 800310a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800310e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <HAL_Init+0x40>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a07      	ldr	r2, [pc, #28]	; (8003134 <HAL_Init+0x40>)
 8003116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800311c:	2003      	movs	r0, #3
 800311e:	f000 fd61 	bl	8003be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003122:	200f      	movs	r0, #15
 8003124:	f000 f808 	bl	8003138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003128:	f7ff fb72 	bl	8002810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023c00 	.word	0x40023c00

08003138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_InitTick+0x54>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_InitTick+0x58>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fd79 	bl	8003c4e <HAL_SYSTICK_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e00e      	b.n	8003184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d80a      	bhi.n	8003182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800316c:	2200      	movs	r2, #0
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f000 fd41 	bl	8003bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003178:	4a06      	ldr	r2, [pc, #24]	; (8003194 <HAL_InitTick+0x5c>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20000008 	.word	0x20000008
 8003190:	20000010 	.word	0x20000010
 8003194:	2000000c 	.word	0x2000000c

08003198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_IncTick+0x20>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_IncTick+0x24>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4413      	add	r3, r2
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <HAL_IncTick+0x24>)
 80031aa:	6013      	str	r3, [r2, #0]
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000010 	.word	0x20000010
 80031bc:	20000610 	.word	0x20000610

080031c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return uwTick;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_GetTick+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000610 	.word	0x20000610

080031d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7ff ffee 	bl	80031c0 <HAL_GetTick>
 80031e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d005      	beq.n	80031fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_Delay+0x44>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031fe:	bf00      	nop
 8003200:	f7ff ffde 	bl	80031c0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	429a      	cmp	r2, r3
 800320e:	d8f7      	bhi.n	8003200 <HAL_Delay+0x28>
  {
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000010 	.word	0x20000010

08003220 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e033      	b.n	800329e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd ff0e 	bl	8001060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d118      	bne.n	8003290 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003266:	f023 0302 	bic.w	r3, r3, #2
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa68 	bl	8003748 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
 800328e:	e001      	b.n	8003294 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Start_DMA+0x1e>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e0e9      	b.n	800349a <HAL_ADC_Start_DMA+0x1f2>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d018      	beq.n	800330e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032ec:	4b6d      	ldr	r3, [pc, #436]	; (80034a4 <HAL_ADC_Start_DMA+0x1fc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6d      	ldr	r2, [pc, #436]	; (80034a8 <HAL_ADC_Start_DMA+0x200>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	0c9a      	lsrs	r2, r3, #18
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003300:	e002      	b.n	8003308 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	3b01      	subs	r3, #1
 8003306:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f9      	bne.n	8003302 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331c:	d107      	bne.n	800332e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800332c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	f040 80a1 	bne.w	8003480 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003368:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	d106      	bne.n	800338c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f023 0206 	bic.w	r2, r3, #6
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
 800338a:	e002      	b.n	8003392 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800339a:	4b44      	ldr	r3, [pc, #272]	; (80034ac <HAL_ADC_Start_DMA+0x204>)
 800339c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	4a43      	ldr	r2, [pc, #268]	; (80034b0 <HAL_ADC_Start_DMA+0x208>)
 80033a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	4a42      	ldr	r2, [pc, #264]	; (80034b4 <HAL_ADC_Start_DMA+0x20c>)
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	4a41      	ldr	r2, [pc, #260]	; (80034b8 <HAL_ADC_Start_DMA+0x210>)
 80033b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	334c      	adds	r3, #76	; 0x4c
 80033ea:	4619      	mov	r1, r3
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f000 fce8 	bl	8003dc4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d12a      	bne.n	8003456 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2d      	ldr	r2, [pc, #180]	; (80034bc <HAL_ADC_Start_DMA+0x214>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d015      	beq.n	8003436 <HAL_ADC_Start_DMA+0x18e>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <HAL_ADC_Start_DMA+0x218>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d105      	bne.n	8003420 <HAL_ADC_Start_DMA+0x178>
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_ADC_Start_DMA+0x204>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <HAL_ADC_Start_DMA+0x21c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d136      	bne.n	8003498 <HAL_ADC_Start_DMA+0x1f0>
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_ADC_Start_DMA+0x204>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d130      	bne.n	8003498 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d129      	bne.n	8003498 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	e020      	b.n	8003498 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_ADC_Start_DMA+0x214>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d11b      	bne.n	8003498 <HAL_ADC_Start_DMA+0x1f0>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d114      	bne.n	8003498 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	e00b      	b.n	8003498 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0210 	orr.w	r2, r3, #16
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000008 	.word	0x20000008
 80034a8:	431bde83 	.word	0x431bde83
 80034ac:	40012300 	.word	0x40012300
 80034b0:	08003941 	.word	0x08003941
 80034b4:	080039fb 	.word	0x080039fb
 80034b8:	08003a17 	.word	0x08003a17
 80034bc:	40012000 	.word	0x40012000
 80034c0:	40012100 	.word	0x40012100
 80034c4:	40012200 	.word	0x40012200

080034c8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x1c>
 800351c:	2302      	movs	r3, #2
 800351e:	e105      	b.n	800372c <HAL_ADC_ConfigChannel+0x228>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b09      	cmp	r3, #9
 800352e:	d925      	bls.n	800357c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	3b1e      	subs	r3, #30
 8003546:	2207      	movs	r2, #7
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43da      	mvns	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	400a      	ands	r2, r1
 8003554:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68d9      	ldr	r1, [r3, #12]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	4618      	mov	r0, r3
 8003568:	4603      	mov	r3, r0
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4403      	add	r3, r0
 800356e:	3b1e      	subs	r3, #30
 8003570:	409a      	lsls	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	e022      	b.n	80035c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6919      	ldr	r1, [r3, #16]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	2207      	movs	r2, #7
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43da      	mvns	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	400a      	ands	r2, r1
 800359e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6919      	ldr	r1, [r3, #16]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	4618      	mov	r0, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4403      	add	r3, r0
 80035b8:	409a      	lsls	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d824      	bhi.n	8003614 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	3b05      	subs	r3, #5
 80035dc:	221f      	movs	r2, #31
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	400a      	ands	r2, r1
 80035ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	3b05      	subs	r3, #5
 8003606:	fa00 f203 	lsl.w	r2, r0, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	635a      	str	r2, [r3, #52]	; 0x34
 8003612:	e04c      	b.n	80036ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b0c      	cmp	r3, #12
 800361a:	d824      	bhi.n	8003666 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	3b23      	subs	r3, #35	; 0x23
 800362e:	221f      	movs	r2, #31
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43da      	mvns	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	400a      	ands	r2, r1
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	4618      	mov	r0, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	3b23      	subs	r3, #35	; 0x23
 8003658:	fa00 f203 	lsl.w	r2, r0, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
 8003664:	e023      	b.n	80036ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	3b41      	subs	r3, #65	; 0x41
 8003678:	221f      	movs	r2, #31
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	400a      	ands	r2, r1
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	4618      	mov	r0, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	3b41      	subs	r3, #65	; 0x41
 80036a2:	fa00 f203 	lsl.w	r2, r0, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <HAL_ADC_ConfigChannel+0x234>)
 80036b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a21      	ldr	r2, [pc, #132]	; (800373c <HAL_ADC_ConfigChannel+0x238>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d109      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x1cc>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b12      	cmp	r3, #18
 80036c2:	d105      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <HAL_ADC_ConfigChannel+0x238>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d123      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x21e>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d003      	beq.n	80036ea <HAL_ADC_ConfigChannel+0x1e6>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b11      	cmp	r3, #17
 80036e8:	d11b      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d111      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_ADC_ConfigChannel+0x23c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <HAL_ADC_ConfigChannel+0x240>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	0c9a      	lsrs	r2, r3, #18
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003714:	e002      	b.n	800371c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3b01      	subs	r3, #1
 800371a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f9      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40012300 	.word	0x40012300
 800373c:	40012000 	.word	0x40012000
 8003740:	20000008 	.word	0x20000008
 8003744:	431bde83 	.word	0x431bde83

08003748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <ADC_Init+0x1f0>)
 8003752:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	431a      	orrs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800377c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	021a      	lsls	r2, r3, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	4a58      	ldr	r2, [pc, #352]	; (800393c <ADC_Init+0x1f4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6899      	ldr	r1, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	e00f      	b.n	8003846 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003844:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0202 	bic.w	r2, r2, #2
 8003854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6899      	ldr	r1, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7e1b      	ldrb	r3, [r3, #24]
 8003860:	005a      	lsls	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01b      	beq.n	80038ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003882:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	3b01      	subs	r3, #1
 80038a0:	035a      	lsls	r2, r3, #13
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	e007      	b.n	80038bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	051a      	lsls	r2, r3, #20
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038fe:	025a      	lsls	r2, r3, #9
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6899      	ldr	r1, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	029a      	lsls	r2, r3, #10
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40012300 	.word	0x40012300
 800393c:	0f000001 	.word	0x0f000001

08003940 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003956:	2b00      	cmp	r3, #0
 8003958:	d13c      	bne.n	80039d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d12b      	bne.n	80039cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003978:	2b00      	cmp	r3, #0
 800397a:	d127      	bne.n	80039cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003986:	2b00      	cmp	r3, #0
 8003988:	d006      	beq.n	8003998 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003994:	2b00      	cmp	r3, #0
 8003996:	d119      	bne.n	80039cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0220 	bic.w	r2, r2, #32
 80039a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff fd7b 	bl	80034c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039d2:	e00e      	b.n	80039f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f7ff fd85 	bl	80034f0 <HAL_ADC_ErrorCallback>
}
 80039e6:	e004      	b.n	80039f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7ff fd67 	bl	80034dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff fd5a 	bl	80034f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a60:	4013      	ands	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a76:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	60d3      	str	r3, [r2, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	f003 0307 	and.w	r3, r3, #7
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	db0b      	blt.n	8003ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	f003 021f 	and.w	r2, r3, #31
 8003ac0:	4907      	ldr	r1, [pc, #28]	; (8003ae0 <__NVIC_EnableIRQ+0x38>)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	2001      	movs	r0, #1
 8003aca:	fa00 f202 	lsl.w	r2, r0, r2
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	e000e100 	.word	0xe000e100

08003ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db0a      	blt.n	8003b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	490c      	ldr	r1, [pc, #48]	; (8003b30 <__NVIC_SetPriority+0x4c>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	0112      	lsls	r2, r2, #4
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	440b      	add	r3, r1
 8003b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b0c:	e00a      	b.n	8003b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4908      	ldr	r1, [pc, #32]	; (8003b34 <__NVIC_SetPriority+0x50>)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3b04      	subs	r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	440b      	add	r3, r1
 8003b22:	761a      	strb	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000e100 	.word	0xe000e100
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f1c3 0307 	rsb	r3, r3, #7
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf28      	it	cs
 8003b56:	2304      	movcs	r3, #4
 8003b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d902      	bls.n	8003b68 <NVIC_EncodePriority+0x30>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3b03      	subs	r3, #3
 8003b66:	e000      	b.n	8003b6a <NVIC_EncodePriority+0x32>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43d9      	mvns	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	4313      	orrs	r3, r2
         );
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bb0:	d301      	bcc.n	8003bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00f      	b.n	8003bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <SysTick_Config+0x40>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bbe:	210f      	movs	r1, #15
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	f7ff ff8e 	bl	8003ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <SysTick_Config+0x40>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bce:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <SysTick_Config+0x40>)
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	e000e010 	.word	0xe000e010

08003be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff29 	bl	8003a44 <__NVIC_SetPriorityGrouping>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	4603      	mov	r3, r0
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c0c:	f7ff ff3e 	bl	8003a8c <__NVIC_GetPriorityGrouping>
 8003c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	6978      	ldr	r0, [r7, #20]
 8003c18:	f7ff ff8e 	bl	8003b38 <NVIC_EncodePriority>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff ff5d 	bl	8003ae4 <__NVIC_SetPriority>
}
 8003c2a:	bf00      	nop
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	4603      	mov	r3, r0
 8003c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ff31 	bl	8003aa8 <__NVIC_EnableIRQ>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff ffa2 	bl	8003ba0 <SysTick_Config>
 8003c5c:	4603      	mov	r3, r0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c74:	f7ff faa4 	bl	80031c0 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e099      	b.n	8003db8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca4:	e00f      	b.n	8003cc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ca6:	f7ff fa8b 	bl	80031c0 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d908      	bls.n	8003cc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e078      	b.n	8003db8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e8      	bne.n	8003ca6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4b38      	ldr	r3, [pc, #224]	; (8003dc0 <HAL_DMA_Init+0x158>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d107      	bne.n	8003d30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0307 	bic.w	r3, r3, #7
 8003d46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d117      	bne.n	8003d8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00e      	beq.n	8003d8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fb01 	bl	8004374 <DMA_CheckFifoParam>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2240      	movs	r2, #64	; 0x40
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d86:	2301      	movs	r3, #1
 8003d88:	e016      	b.n	8003db8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fab8 	bl	8004308 <DMA_CalcBaseAndBitshift>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	223f      	movs	r2, #63	; 0x3f
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	f010803f 	.word	0xf010803f

08003dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_DMA_Start_IT+0x26>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e040      	b.n	8003e6c <HAL_DMA_Start_IT+0xa8>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d12f      	bne.n	8003e5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa4a 	bl	80042ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	223f      	movs	r2, #63	; 0x3f
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0216 	orr.w	r2, r2, #22
 8003e32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0208 	orr.w	r2, r2, #8
 8003e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	e005      	b.n	8003e6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
 8003e68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e82:	f7ff f99d 	bl	80031c0 <HAL_GetTick>
 8003e86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d008      	beq.n	8003ea6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2280      	movs	r2, #128	; 0x80
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e052      	b.n	8003f4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0216 	bic.w	r2, r2, #22
 8003eb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_DMA_Abort+0x62>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0208 	bic.w	r2, r2, #8
 8003ee4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef6:	e013      	b.n	8003f20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ef8:	f7ff f962 	bl	80031c0 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	d90c      	bls.n	8003f20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2203      	movs	r2, #3
 8003f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e015      	b.n	8003f4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e4      	bne.n	8003ef8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	223f      	movs	r2, #63	; 0x3f
 8003f34:	409a      	lsls	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d004      	beq.n	8003f72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2280      	movs	r2, #128	; 0x80
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e00c      	b.n	8003f8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2205      	movs	r2, #5
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fa4:	4b8e      	ldr	r3, [pc, #568]	; (80041e0 <HAL_DMA_IRQHandler+0x248>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a8e      	ldr	r2, [pc, #568]	; (80041e4 <HAL_DMA_IRQHandler+0x24c>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	0a9b      	lsrs	r3, r3, #10
 8003fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d01a      	beq.n	8004004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d013      	beq.n	8004004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0204 	bic.w	r2, r2, #4
 8003fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	2201      	movs	r2, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d012      	beq.n	800403a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	2201      	movs	r2, #1
 8004028:	409a      	lsls	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f043 0202 	orr.w	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403e:	2204      	movs	r2, #4
 8004040:	409a      	lsls	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d012      	beq.n	8004070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00b      	beq.n	8004070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	2204      	movs	r2, #4
 800405e:	409a      	lsls	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	2210      	movs	r2, #16
 8004076:	409a      	lsls	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d043      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d03c      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	2210      	movs	r2, #16
 8004094:	409a      	lsls	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d018      	beq.n	80040da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d024      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
 80040c6:	e01f      	b.n	8004108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01b      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
 80040d8:	e016      	b.n	8004108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0208 	bic.w	r2, r2, #8
 80040f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	2220      	movs	r2, #32
 800410e:	409a      	lsls	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 808f 	beq.w	8004238 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8087 	beq.w	8004238 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	2220      	movs	r2, #32
 8004130:	409a      	lsls	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b05      	cmp	r3, #5
 8004140:	d136      	bne.n	80041b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0216 	bic.w	r2, r2, #22
 8004150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <HAL_DMA_IRQHandler+0x1da>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0208 	bic.w	r2, r2, #8
 8004180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004186:	223f      	movs	r2, #63	; 0x3f
 8004188:	409a      	lsls	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d07e      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
        }
        return;
 80041ae:	e079      	b.n	80042a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01d      	beq.n	80041fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10d      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d031      	beq.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
 80041dc:	e02c      	b.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
 80041de:	bf00      	nop
 80041e0:	20000008 	.word	0x20000008
 80041e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d023      	beq.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
 80041f8:	e01e      	b.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10f      	bne.n	8004228 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0210 	bic.w	r2, r2, #16
 8004216:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	2b00      	cmp	r3, #0
 800423e:	d032      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d022      	beq.n	8004292 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2205      	movs	r2, #5
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3301      	adds	r3, #1
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	d307      	bcc.n	8004280 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f2      	bne.n	8004264 <HAL_DMA_IRQHandler+0x2cc>
 800427e:	e000      	b.n	8004282 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004280:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
 80042a2:	e000      	b.n	80042a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80042a4:	bf00      	nop
    }
  }
}
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d108      	bne.n	80042ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042ea:	e007      	b.n	80042fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	3b10      	subs	r3, #16
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <DMA_CalcBaseAndBitshift+0x64>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004322:	4a13      	ldr	r2, [pc, #76]	; (8004370 <DMA_CalcBaseAndBitshift+0x68>)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d909      	bls.n	800434a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	1d1a      	adds	r2, r3, #4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	659a      	str	r2, [r3, #88]	; 0x58
 8004348:	e007      	b.n	800435a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004352:	f023 0303 	bic.w	r3, r3, #3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	aaaaaaab 	.word	0xaaaaaaab
 8004370:	0800df88 	.word	0x0800df88

08004374 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d11f      	bne.n	80043ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d856      	bhi.n	8004442 <DMA_CheckFifoParam+0xce>
 8004394:	a201      	add	r2, pc, #4	; (adr r2, 800439c <DMA_CheckFifoParam+0x28>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043bf 	.word	0x080043bf
 80043a4:	080043ad 	.word	0x080043ad
 80043a8:	08004443 	.word	0x08004443
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d046      	beq.n	8004446 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043bc:	e043      	b.n	8004446 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043c6:	d140      	bne.n	800444a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043cc:	e03d      	b.n	800444a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d6:	d121      	bne.n	800441c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d837      	bhi.n	800444e <DMA_CheckFifoParam+0xda>
 80043de:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <DMA_CheckFifoParam+0x70>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	080043f5 	.word	0x080043f5
 80043e8:	080043fb 	.word	0x080043fb
 80043ec:	080043f5 	.word	0x080043f5
 80043f0:	0800440d 	.word	0x0800440d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      break;
 80043f8:	e030      	b.n	800445c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d025      	beq.n	8004452 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800440a:	e022      	b.n	8004452 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004414:	d11f      	bne.n	8004456 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800441a:	e01c      	b.n	8004456 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d903      	bls.n	800442a <DMA_CheckFifoParam+0xb6>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d003      	beq.n	8004430 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004428:	e018      	b.n	800445c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
      break;
 800442e:	e015      	b.n	800445c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00e      	beq.n	800445a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      break;
 8004440:	e00b      	b.n	800445a <DMA_CheckFifoParam+0xe6>
      break;
 8004442:	bf00      	nop
 8004444:	e00a      	b.n	800445c <DMA_CheckFifoParam+0xe8>
      break;
 8004446:	bf00      	nop
 8004448:	e008      	b.n	800445c <DMA_CheckFifoParam+0xe8>
      break;
 800444a:	bf00      	nop
 800444c:	e006      	b.n	800445c <DMA_CheckFifoParam+0xe8>
      break;
 800444e:	bf00      	nop
 8004450:	e004      	b.n	800445c <DMA_CheckFifoParam+0xe8>
      break;
 8004452:	bf00      	nop
 8004454:	e002      	b.n	800445c <DMA_CheckFifoParam+0xe8>
      break;   
 8004456:	bf00      	nop
 8004458:	e000      	b.n	800445c <DMA_CheckFifoParam+0xe8>
      break;
 800445a:	bf00      	nop
    }
  } 
  
  return status; 
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop

0800446c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800446c:	b480      	push	{r7}
 800446e:	b089      	sub	sp, #36	; 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	e16b      	b.n	8004760 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004488:	2201      	movs	r2, #1
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	f040 815a 	bne.w	800475a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d005      	beq.n	80044be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d130      	bne.n	8004520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	2203      	movs	r2, #3
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4013      	ands	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044f4:	2201      	movs	r2, #1
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 0201 	and.w	r2, r3, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b03      	cmp	r3, #3
 800452a:	d017      	beq.n	800455c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	2203      	movs	r2, #3
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d123      	bne.n	80045b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	08da      	lsrs	r2, r3, #3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3208      	adds	r2, #8
 8004570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	220f      	movs	r2, #15
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	08da      	lsrs	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3208      	adds	r2, #8
 80045aa:	69b9      	ldr	r1, [r7, #24]
 80045ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2203      	movs	r2, #3
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0203 	and.w	r2, r3, #3
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80b4 	beq.w	800475a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	4b60      	ldr	r3, [pc, #384]	; (8004778 <HAL_GPIO_Init+0x30c>)
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	4a5f      	ldr	r2, [pc, #380]	; (8004778 <HAL_GPIO_Init+0x30c>)
 80045fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004600:	6453      	str	r3, [r2, #68]	; 0x44
 8004602:	4b5d      	ldr	r3, [pc, #372]	; (8004778 <HAL_GPIO_Init+0x30c>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800460e:	4a5b      	ldr	r2, [pc, #364]	; (800477c <HAL_GPIO_Init+0x310>)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	089b      	lsrs	r3, r3, #2
 8004614:	3302      	adds	r3, #2
 8004616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	220f      	movs	r2, #15
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4013      	ands	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a52      	ldr	r2, [pc, #328]	; (8004780 <HAL_GPIO_Init+0x314>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d02b      	beq.n	8004692 <HAL_GPIO_Init+0x226>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a51      	ldr	r2, [pc, #324]	; (8004784 <HAL_GPIO_Init+0x318>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d025      	beq.n	800468e <HAL_GPIO_Init+0x222>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a50      	ldr	r2, [pc, #320]	; (8004788 <HAL_GPIO_Init+0x31c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01f      	beq.n	800468a <HAL_GPIO_Init+0x21e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a4f      	ldr	r2, [pc, #316]	; (800478c <HAL_GPIO_Init+0x320>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d019      	beq.n	8004686 <HAL_GPIO_Init+0x21a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4e      	ldr	r2, [pc, #312]	; (8004790 <HAL_GPIO_Init+0x324>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <HAL_GPIO_Init+0x216>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4d      	ldr	r2, [pc, #308]	; (8004794 <HAL_GPIO_Init+0x328>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00d      	beq.n	800467e <HAL_GPIO_Init+0x212>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4c      	ldr	r2, [pc, #304]	; (8004798 <HAL_GPIO_Init+0x32c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d007      	beq.n	800467a <HAL_GPIO_Init+0x20e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4b      	ldr	r2, [pc, #300]	; (800479c <HAL_GPIO_Init+0x330>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d101      	bne.n	8004676 <HAL_GPIO_Init+0x20a>
 8004672:	2307      	movs	r3, #7
 8004674:	e00e      	b.n	8004694 <HAL_GPIO_Init+0x228>
 8004676:	2308      	movs	r3, #8
 8004678:	e00c      	b.n	8004694 <HAL_GPIO_Init+0x228>
 800467a:	2306      	movs	r3, #6
 800467c:	e00a      	b.n	8004694 <HAL_GPIO_Init+0x228>
 800467e:	2305      	movs	r3, #5
 8004680:	e008      	b.n	8004694 <HAL_GPIO_Init+0x228>
 8004682:	2304      	movs	r3, #4
 8004684:	e006      	b.n	8004694 <HAL_GPIO_Init+0x228>
 8004686:	2303      	movs	r3, #3
 8004688:	e004      	b.n	8004694 <HAL_GPIO_Init+0x228>
 800468a:	2302      	movs	r3, #2
 800468c:	e002      	b.n	8004694 <HAL_GPIO_Init+0x228>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_GPIO_Init+0x228>
 8004692:	2300      	movs	r3, #0
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	f002 0203 	and.w	r2, r2, #3
 800469a:	0092      	lsls	r2, r2, #2
 800469c:	4093      	lsls	r3, r2
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046a4:	4935      	ldr	r1, [pc, #212]	; (800477c <HAL_GPIO_Init+0x310>)
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	3302      	adds	r3, #2
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_GPIO_Init+0x334>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046d6:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <HAL_GPIO_Init+0x334>)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046dc:	4b30      	ldr	r3, [pc, #192]	; (80047a0 <HAL_GPIO_Init+0x334>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <HAL_GPIO_Init+0x334>)
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004706:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <HAL_GPIO_Init+0x334>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800472a:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <HAL_GPIO_Init+0x334>)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_GPIO_Init+0x334>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004754:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <HAL_GPIO_Init+0x334>)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3301      	adds	r3, #1
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	f67f ae90 	bls.w	8004488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3724      	adds	r7, #36	; 0x24
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	40013800 	.word	0x40013800
 8004780:	40020000 	.word	0x40020000
 8004784:	40020400 	.word	0x40020400
 8004788:	40020800 	.word	0x40020800
 800478c:	40020c00 	.word	0x40020c00
 8004790:	40021000 	.word	0x40021000
 8004794:	40021400 	.word	0x40021400
 8004798:	40021800 	.word	0x40021800
 800479c:	40021c00 	.word	0x40021c00
 80047a0:	40013c00 	.word	0x40013c00

080047a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	807b      	strh	r3, [r7, #2]
 80047b0:	4613      	mov	r3, r2
 80047b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047b4:	787b      	ldrb	r3, [r7, #1]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047c0:	e003      	b.n	80047ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047c2:	887b      	ldrh	r3, [r7, #2]
 80047c4:	041a      	lsls	r2, r3, #16
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	619a      	str	r2, [r3, #24]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e12b      	b.n	8004a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc ff92 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	; 0x24
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800483a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800483c:	f000 fd80 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 8004840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4a81      	ldr	r2, [pc, #516]	; (8004a4c <HAL_I2C_Init+0x274>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d807      	bhi.n	800485c <HAL_I2C_Init+0x84>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a80      	ldr	r2, [pc, #512]	; (8004a50 <HAL_I2C_Init+0x278>)
 8004850:	4293      	cmp	r3, r2
 8004852:	bf94      	ite	ls
 8004854:	2301      	movls	r3, #1
 8004856:	2300      	movhi	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e006      	b.n	800486a <HAL_I2C_Init+0x92>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a7d      	ldr	r2, [pc, #500]	; (8004a54 <HAL_I2C_Init+0x27c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	bf94      	ite	ls
 8004864:	2301      	movls	r3, #1
 8004866:	2300      	movhi	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e0e7      	b.n	8004a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a78      	ldr	r2, [pc, #480]	; (8004a58 <HAL_I2C_Init+0x280>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	0c9b      	lsrs	r3, r3, #18
 800487c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <HAL_I2C_Init+0x274>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d802      	bhi.n	80048ac <HAL_I2C_Init+0xd4>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	3301      	adds	r3, #1
 80048aa:	e009      	b.n	80048c0 <HAL_I2C_Init+0xe8>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	4a69      	ldr	r2, [pc, #420]	; (8004a5c <HAL_I2C_Init+0x284>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	3301      	adds	r3, #1
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	495c      	ldr	r1, [pc, #368]	; (8004a4c <HAL_I2C_Init+0x274>)
 80048dc:	428b      	cmp	r3, r1
 80048de:	d819      	bhi.n	8004914 <HAL_I2C_Init+0x13c>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1e59      	subs	r1, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ee:	1c59      	adds	r1, r3, #1
 80048f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048f4:	400b      	ands	r3, r1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_I2C_Init+0x138>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1e59      	subs	r1, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	fbb1 f3f3 	udiv	r3, r1, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490e:	e051      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 8004910:	2304      	movs	r3, #4
 8004912:	e04f      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d111      	bne.n	8004940 <HAL_I2C_Init+0x168>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1e58      	subs	r0, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	440b      	add	r3, r1
 800492a:	fbb0 f3f3 	udiv	r3, r0, r3
 800492e:	3301      	adds	r3, #1
 8004930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e012      	b.n	8004966 <HAL_I2C_Init+0x18e>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1e58      	subs	r0, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6859      	ldr	r1, [r3, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	0099      	lsls	r1, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	fbb0 f3f3 	udiv	r3, r0, r3
 8004956:	3301      	adds	r3, #1
 8004958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_I2C_Init+0x196>
 800496a:	2301      	movs	r3, #1
 800496c:	e022      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10e      	bne.n	8004994 <HAL_I2C_Init+0x1bc>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1e58      	subs	r0, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	440b      	add	r3, r1
 8004984:	fbb0 f3f3 	udiv	r3, r0, r3
 8004988:	3301      	adds	r3, #1
 800498a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800498e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004992:	e00f      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1e58      	subs	r0, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	0099      	lsls	r1, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049aa:	3301      	adds	r3, #1
 80049ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	6809      	ldr	r1, [r1, #0]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69da      	ldr	r2, [r3, #28]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6911      	ldr	r1, [r2, #16]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68d2      	ldr	r2, [r2, #12]
 80049ee:	4311      	orrs	r1, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	000186a0 	.word	0x000186a0
 8004a50:	001e847f 	.word	0x001e847f
 8004a54:	003d08ff 	.word	0x003d08ff
 8004a58:	431bde83 	.word	0x431bde83
 8004a5c:	10624dd3 	.word	0x10624dd3

08004a60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e267      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d075      	beq.n	8004b6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a7e:	4b88      	ldr	r3, [pc, #544]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d00c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a8a:	4b85      	ldr	r3, [pc, #532]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d112      	bne.n	8004abc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a96:	4b82      	ldr	r3, [pc, #520]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa2:	d10b      	bne.n	8004abc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	4b7e      	ldr	r3, [pc, #504]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d05b      	beq.n	8004b68 <HAL_RCC_OscConfig+0x108>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d157      	bne.n	8004b68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e242      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac4:	d106      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x74>
 8004ac6:	4b76      	ldr	r3, [pc, #472]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a75      	ldr	r2, [pc, #468]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e01d      	b.n	8004b10 <HAL_RCC_OscConfig+0xb0>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004adc:	d10c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x98>
 8004ade:	4b70      	ldr	r3, [pc, #448]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a6f      	ldr	r2, [pc, #444]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b6d      	ldr	r3, [pc, #436]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a6c      	ldr	r2, [pc, #432]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e00b      	b.n	8004b10 <HAL_RCC_OscConfig+0xb0>
 8004af8:	4b69      	ldr	r3, [pc, #420]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a68      	ldr	r2, [pc, #416]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	4b66      	ldr	r3, [pc, #408]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a65      	ldr	r2, [pc, #404]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d013      	beq.n	8004b40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fe fb52 	bl	80031c0 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe fb4e 	bl	80031c0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e207      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	4b5b      	ldr	r3, [pc, #364]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0xc0>
 8004b3e:	e014      	b.n	8004b6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fe fb3e 	bl	80031c0 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b48:	f7fe fb3a 	bl	80031c0 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	; 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e1f3      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5a:	4b51      	ldr	r3, [pc, #324]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0xe8>
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d063      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b76:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b82:	4b47      	ldr	r3, [pc, #284]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d11c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8e:	4b44      	ldr	r3, [pc, #272]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d116      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9a:	4b41      	ldr	r3, [pc, #260]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x152>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d001      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e1c7      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4937      	ldr	r1, [pc, #220]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc6:	e03a      	b.n	8004c3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d020      	beq.n	8004c12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd0:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <HAL_RCC_OscConfig+0x244>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fe faf3 	bl	80031c0 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bde:	f7fe faef 	bl	80031c0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e1a8      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4925      	ldr	r1, [pc, #148]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]
 8004c10:	e015      	b.n	8004c3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_RCC_OscConfig+0x244>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fe fad2 	bl	80031c0 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c20:	f7fe face 	bl	80031c0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e187      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d036      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <HAL_RCC_OscConfig+0x248>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fe fab2 	bl	80031c0 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c60:	f7fe faae 	bl	80031c0 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e167      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x200>
 8004c7e:	e01b      	b.n	8004cb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_RCC_OscConfig+0x248>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c86:	f7fe fa9b 	bl	80031c0 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	e00e      	b.n	8004cac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c8e:	f7fe fa97 	bl	80031c0 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d907      	bls.n	8004cac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e150      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	42470000 	.word	0x42470000
 8004ca8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cac:	4b88      	ldr	r3, [pc, #544]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ea      	bne.n	8004c8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8097 	beq.w	8004df4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cca:	4b81      	ldr	r3, [pc, #516]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10f      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	4b7d      	ldr	r3, [pc, #500]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	4a7c      	ldr	r2, [pc, #496]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce6:	4b7a      	ldr	r3, [pc, #488]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf6:	4b77      	ldr	r3, [pc, #476]	; (8004ed4 <HAL_RCC_OscConfig+0x474>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d118      	bne.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d02:	4b74      	ldr	r3, [pc, #464]	; (8004ed4 <HAL_RCC_OscConfig+0x474>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a73      	ldr	r2, [pc, #460]	; (8004ed4 <HAL_RCC_OscConfig+0x474>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0e:	f7fe fa57 	bl	80031c0 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7fe fa53 	bl	80031c0 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e10c      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d28:	4b6a      	ldr	r3, [pc, #424]	; (8004ed4 <HAL_RCC_OscConfig+0x474>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d106      	bne.n	8004d4a <HAL_RCC_OscConfig+0x2ea>
 8004d3c:	4b64      	ldr	r3, [pc, #400]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d40:	4a63      	ldr	r2, [pc, #396]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6713      	str	r3, [r2, #112]	; 0x70
 8004d48:	e01c      	b.n	8004d84 <HAL_RCC_OscConfig+0x324>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x30c>
 8004d52:	4b5f      	ldr	r3, [pc, #380]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	4b5c      	ldr	r3, [pc, #368]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a5b      	ldr	r2, [pc, #364]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0x324>
 8004d6c:	4b58      	ldr	r3, [pc, #352]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a57      	ldr	r2, [pc, #348]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
 8004d78:	4b55      	ldr	r3, [pc, #340]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	4a54      	ldr	r2, [pc, #336]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d7e:	f023 0304 	bic.w	r3, r3, #4
 8004d82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fe fa18 	bl	80031c0 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f7fe fa14 	bl	80031c0 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0cb      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004daa:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ee      	beq.n	8004d94 <HAL_RCC_OscConfig+0x334>
 8004db6:	e014      	b.n	8004de2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db8:	f7fe fa02 	bl	80031c0 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc0:	f7fe f9fe 	bl	80031c0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0b5      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd6:	4b3e      	ldr	r3, [pc, #248]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1ee      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d105      	bne.n	8004df4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de8:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	4a38      	ldr	r2, [pc, #224]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80a1 	beq.w	8004f40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dfe:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d05c      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d141      	bne.n	8004e96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <HAL_RCC_OscConfig+0x478>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fe f9d2 	bl	80031c0 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fe f9ce 	bl	80031c0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e087      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	4b27      	ldr	r3, [pc, #156]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	491b      	ldr	r1, [pc, #108]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e68:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <HAL_RCC_OscConfig+0x478>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6e:	f7fe f9a7 	bl	80031c0 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e76:	f7fe f9a3 	bl	80031c0 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e05c      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e88:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x416>
 8004e94:	e054      	b.n	8004f40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_RCC_OscConfig+0x478>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fe f990 	bl	80031c0 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fe f98c 	bl	80031c0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e045      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x444>
 8004ec2:	e03d      	b.n	8004f40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e038      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <HAL_RCC_OscConfig+0x4ec>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d028      	beq.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d121      	bne.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d11a      	bne.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d111      	bne.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	3b01      	subs	r3, #1
 8004f26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d107      	bne.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800

08004f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0cc      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f64:	4b68      	ldr	r3, [pc, #416]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d90c      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f72:	4b65      	ldr	r3, [pc, #404]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b63      	ldr	r3, [pc, #396]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0b8      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d020      	beq.n	8004fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa4:	4b59      	ldr	r3, [pc, #356]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4a58      	ldr	r2, [pc, #352]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fbc:	4b53      	ldr	r3, [pc, #332]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4a52      	ldr	r2, [pc, #328]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc8:	4b50      	ldr	r3, [pc, #320]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	494d      	ldr	r1, [pc, #308]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d044      	beq.n	8005070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4b47      	ldr	r3, [pc, #284]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d119      	bne.n	800502e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e07f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d003      	beq.n	800500e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800500a:	2b03      	cmp	r3, #3
 800500c:	d107      	bne.n	800501e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500e:	4b3f      	ldr	r3, [pc, #252]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e06f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501e:	4b3b      	ldr	r3, [pc, #236]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e067      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800502e:	4b37      	ldr	r3, [pc, #220]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f023 0203 	bic.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4934      	ldr	r1, [pc, #208]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005040:	f7fe f8be 	bl	80031c0 <HAL_GetTick>
 8005044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	e00a      	b.n	800505e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005048:	f7fe f8ba 	bl	80031c0 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e04f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	4b2b      	ldr	r3, [pc, #172]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 020c 	and.w	r2, r3, #12
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	429a      	cmp	r2, r3
 800506e:	d1eb      	bne.n	8005048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005070:	4b25      	ldr	r3, [pc, #148]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d20c      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507e:	4b22      	ldr	r3, [pc, #136]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e032      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4916      	ldr	r1, [pc, #88]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	490e      	ldr	r1, [pc, #56]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050d6:	f000 f821 	bl	800511c <HAL_RCC_GetSysClockFreq>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	490a      	ldr	r1, [pc, #40]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 80050e8:	5ccb      	ldrb	r3, [r1, r3]
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe f81e 	bl	8003138 <HAL_InitTick>

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40023c00 	.word	0x40023c00
 800510c:	40023800 	.word	0x40023800
 8005110:	0800df70 	.word	0x0800df70
 8005114:	20000008 	.word	0x20000008
 8005118:	2000000c 	.word	0x2000000c

0800511c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800511c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005120:	b094      	sub	sp, #80	; 0x50
 8005122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	647b      	str	r3, [r7, #68]	; 0x44
 8005128:	2300      	movs	r3, #0
 800512a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800512c:	2300      	movs	r3, #0
 800512e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005134:	4b79      	ldr	r3, [pc, #484]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b08      	cmp	r3, #8
 800513e:	d00d      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x40>
 8005140:	2b08      	cmp	r3, #8
 8005142:	f200 80e1 	bhi.w	8005308 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0x34>
 800514a:	2b04      	cmp	r3, #4
 800514c:	d003      	beq.n	8005156 <HAL_RCC_GetSysClockFreq+0x3a>
 800514e:	e0db      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b73      	ldr	r3, [pc, #460]	; (8005320 <HAL_RCC_GetSysClockFreq+0x204>)
 8005152:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005154:	e0db      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005156:	4b73      	ldr	r3, [pc, #460]	; (8005324 <HAL_RCC_GetSysClockFreq+0x208>)
 8005158:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800515a:	e0d8      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800515c:	4b6f      	ldr	r3, [pc, #444]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005164:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005166:	4b6d      	ldr	r3, [pc, #436]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d063      	beq.n	800523a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005172:	4b6a      	ldr	r3, [pc, #424]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	2200      	movs	r2, #0
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
 800517c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005184:	633b      	str	r3, [r7, #48]	; 0x30
 8005186:	2300      	movs	r3, #0
 8005188:	637b      	str	r3, [r7, #52]	; 0x34
 800518a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800518e:	4622      	mov	r2, r4
 8005190:	462b      	mov	r3, r5
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	0159      	lsls	r1, r3, #5
 800519c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051a0:	0150      	lsls	r0, r2, #5
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4621      	mov	r1, r4
 80051a8:	1a51      	subs	r1, r2, r1
 80051aa:	6139      	str	r1, [r7, #16]
 80051ac:	4629      	mov	r1, r5
 80051ae:	eb63 0301 	sbc.w	r3, r3, r1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c0:	4659      	mov	r1, fp
 80051c2:	018b      	lsls	r3, r1, #6
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ca:	4651      	mov	r1, sl
 80051cc:	018a      	lsls	r2, r1, #6
 80051ce:	4651      	mov	r1, sl
 80051d0:	ebb2 0801 	subs.w	r8, r2, r1
 80051d4:	4659      	mov	r1, fp
 80051d6:	eb63 0901 	sbc.w	r9, r3, r1
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ee:	4690      	mov	r8, r2
 80051f0:	4699      	mov	r9, r3
 80051f2:	4623      	mov	r3, r4
 80051f4:	eb18 0303 	adds.w	r3, r8, r3
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	462b      	mov	r3, r5
 80051fc:	eb49 0303 	adc.w	r3, r9, r3
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800520e:	4629      	mov	r1, r5
 8005210:	024b      	lsls	r3, r1, #9
 8005212:	4621      	mov	r1, r4
 8005214:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005218:	4621      	mov	r1, r4
 800521a:	024a      	lsls	r2, r1, #9
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005222:	2200      	movs	r2, #0
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
 8005226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800522c:	f7fb fd0c 	bl	8000c48 <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4613      	mov	r3, r2
 8005236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005238:	e058      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523a:	4b38      	ldr	r3, [pc, #224]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	099b      	lsrs	r3, r3, #6
 8005240:	2200      	movs	r2, #0
 8005242:	4618      	mov	r0, r3
 8005244:	4611      	mov	r1, r2
 8005246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	2300      	movs	r3, #0
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
 8005250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	f04f 0000 	mov.w	r0, #0
 800525c:	f04f 0100 	mov.w	r1, #0
 8005260:	0159      	lsls	r1, r3, #5
 8005262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005266:	0150      	lsls	r0, r2, #5
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4641      	mov	r1, r8
 800526e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005272:	4649      	mov	r1, r9
 8005274:	eb63 0b01 	sbc.w	fp, r3, r1
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800528c:	ebb2 040a 	subs.w	r4, r2, sl
 8005290:	eb63 050b 	sbc.w	r5, r3, fp
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	00eb      	lsls	r3, r5, #3
 800529e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052a2:	00e2      	lsls	r2, r4, #3
 80052a4:	4614      	mov	r4, r2
 80052a6:	461d      	mov	r5, r3
 80052a8:	4643      	mov	r3, r8
 80052aa:	18e3      	adds	r3, r4, r3
 80052ac:	603b      	str	r3, [r7, #0]
 80052ae:	464b      	mov	r3, r9
 80052b0:	eb45 0303 	adc.w	r3, r5, r3
 80052b4:	607b      	str	r3, [r7, #4]
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052c2:	4629      	mov	r1, r5
 80052c4:	028b      	lsls	r3, r1, #10
 80052c6:	4621      	mov	r1, r4
 80052c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052cc:	4621      	mov	r1, r4
 80052ce:	028a      	lsls	r2, r1, #10
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d6:	2200      	movs	r2, #0
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	61fa      	str	r2, [r7, #28]
 80052dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e0:	f7fb fcb2 	bl	8000c48 <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4613      	mov	r3, r2
 80052ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	3301      	adds	r3, #1
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005306:	e002      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_RCC_GetSysClockFreq+0x204>)
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800530c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800530e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005310:	4618      	mov	r0, r3
 8005312:	3750      	adds	r7, #80	; 0x50
 8005314:	46bd      	mov	sp, r7
 8005316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800
 8005320:	00f42400 	.word	0x00f42400
 8005324:	007a1200 	.word	0x007a1200

08005328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <HAL_RCC_GetHCLKFreq+0x14>)
 800532e:	681b      	ldr	r3, [r3, #0]
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000008 	.word	0x20000008

08005340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005344:	f7ff fff0 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8005348:	4602      	mov	r2, r0
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	0a9b      	lsrs	r3, r3, #10
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	4903      	ldr	r1, [pc, #12]	; (8005364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005356:	5ccb      	ldrb	r3, [r1, r3]
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40023800 	.word	0x40023800
 8005364:	0800df80 	.word	0x0800df80

08005368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800536c:	f7ff ffdc 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0b5b      	lsrs	r3, r3, #13
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	4903      	ldr	r1, [pc, #12]	; (800538c <HAL_RCC_GetPCLK2Freq+0x24>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40023800 	.word	0x40023800
 800538c:	0800df80 	.word	0x0800df80

08005390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e07b      	b.n	800549a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d108      	bne.n	80053bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b2:	d009      	beq.n	80053c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	61da      	str	r2, [r3, #28]
 80053ba:	e005      	b.n	80053c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fd f9cc 	bl	8002780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544c:	ea42 0103 	orr.w	r1, r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	0c1b      	lsrs	r3, r3, #16
 8005466:	f003 0104 	and.w	r1, r3, #4
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0210 	and.w	r2, r3, #16
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b088      	sub	sp, #32
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_SPI_Transmit+0x22>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e126      	b.n	8005712 <HAL_SPI_Transmit+0x270>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054cc:	f7fd fe78 	bl	80031c0 <HAL_GetTick>
 80054d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d002      	beq.n	80054e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054e2:	2302      	movs	r3, #2
 80054e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054e6:	e10b      	b.n	8005700 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_Transmit+0x52>
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054f8:	e102      	b.n	8005700 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2203      	movs	r2, #3
 80054fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	88fa      	ldrh	r2, [r7, #6]
 8005512:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005540:	d10f      	bne.n	8005562 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005560:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d007      	beq.n	8005580 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800557e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005588:	d14b      	bne.n	8005622 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Transmit+0xf6>
 8005592:	8afb      	ldrh	r3, [r7, #22]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d13e      	bne.n	8005616 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	1c9a      	adds	r2, r3, #2
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055bc:	e02b      	b.n	8005616 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d112      	bne.n	80055f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	881a      	ldrh	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	1c9a      	adds	r2, r3, #2
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80055f0:	e011      	b.n	8005616 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f2:	f7fd fde5 	bl	80031c0 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d803      	bhi.n	800560a <HAL_SPI_Transmit+0x168>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d102      	bne.n	8005610 <HAL_SPI_Transmit+0x16e>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005614:	e074      	b.n	8005700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1ce      	bne.n	80055be <HAL_SPI_Transmit+0x11c>
 8005620:	e04c      	b.n	80056bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_SPI_Transmit+0x18e>
 800562a:	8afb      	ldrh	r3, [r7, #22]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d140      	bne.n	80056b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	7812      	ldrb	r2, [r2, #0]
 800563c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005656:	e02c      	b.n	80056b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b02      	cmp	r3, #2
 8005664:	d113      	bne.n	800568e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	7812      	ldrb	r2, [r2, #0]
 8005672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	86da      	strh	r2, [r3, #54]	; 0x36
 800568c:	e011      	b.n	80056b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800568e:	f7fd fd97 	bl	80031c0 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d803      	bhi.n	80056a6 <HAL_SPI_Transmit+0x204>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d102      	bne.n	80056ac <HAL_SPI_Transmit+0x20a>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056b0:	e026      	b.n	8005700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1cd      	bne.n	8005658 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fbcb 	bl	8005e5c <SPI_EndRxTxTransaction>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	77fb      	strb	r3, [r7, #31]
 80056fc:	e000      	b.n	8005700 <HAL_SPI_Transmit+0x25e>
  }

error:
 80056fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005710:	7ffb      	ldrb	r3, [r7, #31]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b088      	sub	sp, #32
 800571e:	af02      	add	r7, sp, #8
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	4613      	mov	r3, r2
 8005728:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005736:	d112      	bne.n	800575e <HAL_SPI_Receive+0x44>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10e      	bne.n	800575e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2204      	movs	r2, #4
 8005744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005748:	88fa      	ldrh	r2, [r7, #6]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	4613      	mov	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f8f1 	bl	800593c <HAL_SPI_TransmitReceive>
 800575a:	4603      	mov	r3, r0
 800575c:	e0ea      	b.n	8005934 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_SPI_Receive+0x52>
 8005768:	2302      	movs	r3, #2
 800576a:	e0e3      	b.n	8005934 <HAL_SPI_Receive+0x21a>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005774:	f7fd fd24 	bl	80031c0 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d002      	beq.n	800578c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005786:	2302      	movs	r3, #2
 8005788:	75fb      	strb	r3, [r7, #23]
    goto error;
 800578a:	e0ca      	b.n	8005922 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <HAL_SPI_Receive+0x7e>
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800579c:	e0c1      	b.n	8005922 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2204      	movs	r2, #4
 80057a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	d10f      	bne.n	8005806 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005804:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d007      	beq.n	8005824 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005822:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d162      	bne.n	80058f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800582c:	e02e      	b.n	800588c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d115      	bne.n	8005868 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f103 020c 	add.w	r2, r3, #12
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	7812      	ldrb	r2, [r2, #0]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005866:	e011      	b.n	800588c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005868:	f7fd fcaa 	bl	80031c0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d803      	bhi.n	8005880 <HAL_SPI_Receive+0x166>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d102      	bne.n	8005886 <HAL_SPI_Receive+0x16c>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	75fb      	strb	r3, [r7, #23]
          goto error;
 800588a:	e04a      	b.n	8005922 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1cb      	bne.n	800582e <HAL_SPI_Receive+0x114>
 8005896:	e031      	b.n	80058fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d113      	bne.n	80058ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	b292      	uxth	r2, r2
 80058b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	1c9a      	adds	r2, r3, #2
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058cc:	e011      	b.n	80058f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ce:	f7fd fc77 	bl	80031c0 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d803      	bhi.n	80058e6 <HAL_SPI_Receive+0x1cc>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d102      	bne.n	80058ec <HAL_SPI_Receive+0x1d2>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058f0:	e017      	b.n	8005922 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1cd      	bne.n	8005898 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fa45 	bl	8005d90 <SPI_EndRxTransaction>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	75fb      	strb	r3, [r7, #23]
 800591e:	e000      	b.n	8005922 <HAL_SPI_Receive+0x208>
  }

error :
 8005920:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005932:	7dfb      	ldrb	r3, [r7, #23]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08c      	sub	sp, #48	; 0x30
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800594a:	2301      	movs	r3, #1
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x26>
 800595e:	2302      	movs	r3, #2
 8005960:	e18a      	b.n	8005c78 <HAL_SPI_TransmitReceive+0x33c>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800596a:	f7fd fc29 	bl	80031c0 <HAL_GetTick>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005980:	887b      	ldrh	r3, [r7, #2]
 8005982:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005988:	2b01      	cmp	r3, #1
 800598a:	d00f      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x70>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005992:	d107      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d103      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x68>
 800599c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d003      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059aa:	e15b      	b.n	8005c64 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_SPI_TransmitReceive+0x82>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_SPI_TransmitReceive+0x82>
 80059b8:	887b      	ldrh	r3, [r7, #2]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059c4:	e14e      	b.n	8005c64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d003      	beq.n	80059da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2205      	movs	r2, #5
 80059d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	887a      	ldrh	r2, [r7, #2]
 80059ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	887a      	ldrh	r2, [r7, #2]
 80059f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	887a      	ldrh	r2, [r7, #2]
 80059fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	887a      	ldrh	r2, [r7, #2]
 8005a02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d007      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a36:	d178      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_SPI_TransmitReceive+0x10a>
 8005a40:	8b7b      	ldrh	r3, [r7, #26]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d166      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	881a      	ldrh	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	1c9a      	adds	r2, r3, #2
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a6a:	e053      	b.n	8005b14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d11b      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x176>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d016      	beq.n	8005ab2 <HAL_SPI_TransmitReceive+0x176>
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d113      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d119      	bne.n	8005af4 <HAL_SPI_TransmitReceive+0x1b8>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d014      	beq.n	8005af4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	b292      	uxth	r2, r2
 8005ad6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	1c9a      	adds	r2, r3, #2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005af0:	2301      	movs	r3, #1
 8005af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005af4:	f7fd fb64 	bl	80031c0 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d807      	bhi.n	8005b14 <HAL_SPI_TransmitReceive+0x1d8>
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d003      	beq.n	8005b14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b12:	e0a7      	b.n	8005c64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1a6      	bne.n	8005a6c <HAL_SPI_TransmitReceive+0x130>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1a1      	bne.n	8005a6c <HAL_SPI_TransmitReceive+0x130>
 8005b28:	e07c      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x1fc>
 8005b32:	8b7b      	ldrh	r3, [r7, #26]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d16b      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	7812      	ldrb	r2, [r2, #0]
 8005b44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b5e:	e057      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d11c      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x26c>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d017      	beq.n	8005ba8 <HAL_SPI_TransmitReceive+0x26c>
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d114      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	7812      	ldrb	r2, [r2, #0]
 8005b8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d119      	bne.n	8005bea <HAL_SPI_TransmitReceive+0x2ae>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d014      	beq.n	8005bea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005be6:	2301      	movs	r3, #1
 8005be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bea:	f7fd fae9 	bl	80031c0 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d803      	bhi.n	8005c02 <HAL_SPI_TransmitReceive+0x2c6>
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c00:	d102      	bne.n	8005c08 <HAL_SPI_TransmitReceive+0x2cc>
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c0e:	e029      	b.n	8005c64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1a2      	bne.n	8005b60 <HAL_SPI_TransmitReceive+0x224>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d19d      	bne.n	8005b60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f917 	bl	8005e5c <SPI_EndRxTxTransaction>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c40:	e010      	b.n	8005c64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	e000      	b.n	8005c64 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3730      	adds	r7, #48	; 0x30
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c90:	f7fd fa96 	bl	80031c0 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ca0:	f7fd fa8e 	bl	80031c0 <HAL_GetTick>
 8005ca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ca6:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	015b      	lsls	r3, r3, #5
 8005cac:	0d1b      	lsrs	r3, r3, #20
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cb6:	e054      	b.n	8005d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	d050      	beq.n	8005d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cc0:	f7fd fa7e 	bl	80031c0 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d902      	bls.n	8005cd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d13d      	bne.n	8005d52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cee:	d111      	bne.n	8005d14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf8:	d004      	beq.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d02:	d107      	bne.n	8005d14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1c:	d10f      	bne.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e017      	b.n	8005d82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d19b      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000008 	.word	0x20000008

08005d90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da4:	d111      	bne.n	8005dca <SPI_EndRxTransaction+0x3a>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dae:	d004      	beq.n	8005dba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db8:	d107      	bne.n	8005dca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd2:	d12a      	bne.n	8005e2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ddc:	d012      	beq.n	8005e04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff ff49 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d02d      	beq.n	8005e50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e026      	b.n	8005e52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff ff36 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01a      	beq.n	8005e50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e013      	b.n	8005e52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2101      	movs	r1, #1
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ff23 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e000      	b.n	8005e52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <SPI_EndRxTxTransaction+0x7c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	; (8005edc <SPI_EndRxTxTransaction+0x80>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	0d5b      	lsrs	r3, r3, #21
 8005e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e86:	d112      	bne.n	8005eae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2180      	movs	r1, #128	; 0x80
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fef4 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d016      	beq.n	8005ecc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e00f      	b.n	8005ece <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec4:	2b80      	cmp	r3, #128	; 0x80
 8005ec6:	d0f2      	beq.n	8005eae <SPI_EndRxTxTransaction+0x52>
 8005ec8:	e000      	b.n	8005ecc <SPI_EndRxTxTransaction+0x70>
        break;
 8005eca:	bf00      	nop
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000008 	.word	0x20000008
 8005edc:	165e9f81 	.word	0x165e9f81

08005ee0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e034      	b.n	8005f60 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7fb fa9a 	bl	8001444 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3308      	adds	r3, #8
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f002 f84e 	bl	8007fbc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	f002 f898 	bl	8008060 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6858      	ldr	r0, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	f002 f8cd 	bl	80080dc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	6892      	ldr	r2, [r2, #8]
 8005f4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	6892      	ldr	r2, [r2, #8]
 8005f56:	f041 0101 	orr.w	r1, r1, #1
 8005f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e041      	b.n	8005ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fc fe7a 	bl	8002c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f000 fc1a 	bl	80067e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d001      	beq.n	8006020 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e046      	b.n	80060ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a23      	ldr	r2, [pc, #140]	; (80060bc <HAL_TIM_Base_Start+0xb4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d022      	beq.n	8006078 <HAL_TIM_Base_Start+0x70>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603a:	d01d      	beq.n	8006078 <HAL_TIM_Base_Start+0x70>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <HAL_TIM_Base_Start+0xb8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <HAL_TIM_Base_Start+0x70>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1e      	ldr	r2, [pc, #120]	; (80060c4 <HAL_TIM_Base_Start+0xbc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <HAL_TIM_Base_Start+0x70>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <HAL_TIM_Base_Start+0xc0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <HAL_TIM_Base_Start+0x70>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <HAL_TIM_Base_Start+0xc4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_TIM_Base_Start+0x70>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a19      	ldr	r2, [pc, #100]	; (80060d0 <HAL_TIM_Base_Start+0xc8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIM_Base_Start+0x70>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <HAL_TIM_Base_Start+0xcc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d111      	bne.n	800609c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b06      	cmp	r3, #6
 8006088:	d010      	beq.n	80060ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609a:	e007      	b.n	80060ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40001800 	.word	0x40001800

080060d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d001      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e04e      	b.n	800618e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a23      	ldr	r2, [pc, #140]	; (800619c <HAL_TIM_Base_Start_IT+0xc4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d022      	beq.n	8006158 <HAL_TIM_Base_Start_IT+0x80>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611a:	d01d      	beq.n	8006158 <HAL_TIM_Base_Start_IT+0x80>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1f      	ldr	r2, [pc, #124]	; (80061a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d018      	beq.n	8006158 <HAL_TIM_Base_Start_IT+0x80>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1e      	ldr	r2, [pc, #120]	; (80061a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d013      	beq.n	8006158 <HAL_TIM_Base_Start_IT+0x80>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1c      	ldr	r2, [pc, #112]	; (80061a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00e      	beq.n	8006158 <HAL_TIM_Base_Start_IT+0x80>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1b      	ldr	r2, [pc, #108]	; (80061ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d009      	beq.n	8006158 <HAL_TIM_Base_Start_IT+0x80>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a19      	ldr	r2, [pc, #100]	; (80061b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_TIM_Base_Start_IT+0x80>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a18      	ldr	r2, [pc, #96]	; (80061b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d111      	bne.n	800617c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b06      	cmp	r3, #6
 8006168:	d010      	beq.n	800618c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0201 	orr.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617a:	e007      	b.n	800618c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40010000 	.word	0x40010000
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800
 80061a8:	40000c00 	.word	0x40000c00
 80061ac:	40010400 	.word	0x40010400
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40001800 	.word	0x40001800

080061b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e041      	b.n	800624e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f839 	bl	8006256 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4610      	mov	r0, r2
 80061f8:	f000 faf2 	bl	80067e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	d122      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d11b      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f06f 0202 	mvn.w	r2, #2
 8006296:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa78 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 80062b2:	e005      	b.n	80062c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fa6a 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa7b 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d122      	bne.n	800631a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d11b      	bne.n	800631a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f06f 0204 	mvn.w	r2, #4
 80062ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fa4e 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 8006306:	e005      	b.n	8006314 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fa40 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa51 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b08      	cmp	r3, #8
 8006326:	d122      	bne.n	800636e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b08      	cmp	r3, #8
 8006334:	d11b      	bne.n	800636e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f06f 0208 	mvn.w	r2, #8
 800633e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2204      	movs	r2, #4
 8006344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fa24 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 800635a:	e005      	b.n	8006368 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fa16 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa27 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b10      	cmp	r3, #16
 800637a:	d122      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b10      	cmp	r3, #16
 8006388:	d11b      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f06f 0210 	mvn.w	r2, #16
 8006392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2208      	movs	r2, #8
 8006398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f9fa 	bl	80067a2 <HAL_TIM_IC_CaptureCallback>
 80063ae:	e005      	b.n	80063bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f9ec 	bl	800678e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f9fd 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d10e      	bne.n	80063ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d107      	bne.n	80063ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f06f 0201 	mvn.w	r2, #1
 80063e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7fc f969 	bl	80026c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f8:	2b80      	cmp	r3, #128	; 0x80
 80063fa:	d10e      	bne.n	800641a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d107      	bne.n	800641a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fd53 	bl	8006ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d10e      	bne.n	8006446 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d107      	bne.n	8006446 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800643e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f9c2 	bl	80067ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b20      	cmp	r3, #32
 8006452:	d10e      	bne.n	8006472 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b20      	cmp	r3, #32
 8006460:	d107      	bne.n	8006472 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f06f 0220 	mvn.w	r2, #32
 800646a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fd1d 	bl	8006eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006496:	2302      	movs	r3, #2
 8006498:	e0ae      	b.n	80065f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	f200 809f 	bhi.w	80065e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064e5 	.word	0x080064e5
 80064b4:	080065e9 	.word	0x080065e9
 80064b8:	080065e9 	.word	0x080065e9
 80064bc:	080065e9 	.word	0x080065e9
 80064c0:	08006525 	.word	0x08006525
 80064c4:	080065e9 	.word	0x080065e9
 80064c8:	080065e9 	.word	0x080065e9
 80064cc:	080065e9 	.word	0x080065e9
 80064d0:	08006567 	.word	0x08006567
 80064d4:	080065e9 	.word	0x080065e9
 80064d8:	080065e9 	.word	0x080065e9
 80064dc:	080065e9 	.word	0x080065e9
 80064e0:	080065a7 	.word	0x080065a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fa18 	bl	8006920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699a      	ldr	r2, [r3, #24]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0208 	orr.w	r2, r2, #8
 80064fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0204 	bic.w	r2, r2, #4
 800650e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6999      	ldr	r1, [r3, #24]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	619a      	str	r2, [r3, #24]
      break;
 8006522:	e064      	b.n	80065ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fa68 	bl	8006a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6999      	ldr	r1, [r3, #24]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	619a      	str	r2, [r3, #24]
      break;
 8006564:	e043      	b.n	80065ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fabd 	bl	8006aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69da      	ldr	r2, [r3, #28]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0208 	orr.w	r2, r2, #8
 8006580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0204 	bic.w	r2, r2, #4
 8006590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69d9      	ldr	r1, [r3, #28]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	61da      	str	r2, [r3, #28]
      break;
 80065a4:	e023      	b.n	80065ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fb11 	bl	8006bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69d9      	ldr	r1, [r3, #28]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	021a      	lsls	r2, r3, #8
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	61da      	str	r2, [r3, #28]
      break;
 80065e6:	e002      	b.n	80065ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
      break;
 80065ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_TIM_ConfigClockSource+0x1c>
 8006618:	2302      	movs	r3, #2
 800661a:	e0b4      	b.n	8006786 <HAL_TIM_ConfigClockSource+0x186>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800663a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006654:	d03e      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0xd4>
 8006656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665a:	f200 8087 	bhi.w	800676c <HAL_TIM_ConfigClockSource+0x16c>
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006662:	f000 8086 	beq.w	8006772 <HAL_TIM_ConfigClockSource+0x172>
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666a:	d87f      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x16c>
 800666c:	2b70      	cmp	r3, #112	; 0x70
 800666e:	d01a      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0xa6>
 8006670:	2b70      	cmp	r3, #112	; 0x70
 8006672:	d87b      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x16c>
 8006674:	2b60      	cmp	r3, #96	; 0x60
 8006676:	d050      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x11a>
 8006678:	2b60      	cmp	r3, #96	; 0x60
 800667a:	d877      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x16c>
 800667c:	2b50      	cmp	r3, #80	; 0x50
 800667e:	d03c      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0xfa>
 8006680:	2b50      	cmp	r3, #80	; 0x50
 8006682:	d873      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d058      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x13a>
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d86f      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b30      	cmp	r3, #48	; 0x30
 800668e:	d064      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x15a>
 8006690:	2b30      	cmp	r3, #48	; 0x30
 8006692:	d86b      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x16c>
 8006694:	2b20      	cmp	r3, #32
 8006696:	d060      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x15a>
 8006698:	2b20      	cmp	r3, #32
 800669a:	d867      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x16c>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d05c      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x15a>
 80066a0:	2b10      	cmp	r3, #16
 80066a2:	d05a      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x15a>
 80066a4:	e062      	b.n	800676c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6818      	ldr	r0, [r3, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	6899      	ldr	r1, [r3, #8]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f000 fb5d 	bl	8006d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	609a      	str	r2, [r3, #8]
      break;
 80066d2:	e04f      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6899      	ldr	r1, [r3, #8]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f000 fb46 	bl	8006d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066f6:	609a      	str	r2, [r3, #8]
      break;
 80066f8:	e03c      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6859      	ldr	r1, [r3, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	461a      	mov	r2, r3
 8006708:	f000 faba 	bl	8006c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2150      	movs	r1, #80	; 0x50
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fb13 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 8006718:	e02c      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6859      	ldr	r1, [r3, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	461a      	mov	r2, r3
 8006728:	f000 fad9 	bl	8006cde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2160      	movs	r1, #96	; 0x60
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fb03 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 8006738:	e01c      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	461a      	mov	r2, r3
 8006748:	f000 fa9a 	bl	8006c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2140      	movs	r1, #64	; 0x40
 8006752:	4618      	mov	r0, r3
 8006754:	f000 faf3 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 8006758:	e00c      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f000 faea 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 800676a:	e003      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]
      break;
 8006770:	e000      	b.n	8006774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a40      	ldr	r2, [pc, #256]	; (80068f4 <TIM_Base_SetConfig+0x114>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fe:	d00f      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a3d      	ldr	r2, [pc, #244]	; (80068f8 <TIM_Base_SetConfig+0x118>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a3c      	ldr	r2, [pc, #240]	; (80068fc <TIM_Base_SetConfig+0x11c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a3b      	ldr	r2, [pc, #236]	; (8006900 <TIM_Base_SetConfig+0x120>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a3a      	ldr	r2, [pc, #232]	; (8006904 <TIM_Base_SetConfig+0x124>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d108      	bne.n	8006832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2f      	ldr	r2, [pc, #188]	; (80068f4 <TIM_Base_SetConfig+0x114>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006840:	d027      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a2c      	ldr	r2, [pc, #176]	; (80068f8 <TIM_Base_SetConfig+0x118>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d023      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a2b      	ldr	r2, [pc, #172]	; (80068fc <TIM_Base_SetConfig+0x11c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d01f      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a2a      	ldr	r2, [pc, #168]	; (8006900 <TIM_Base_SetConfig+0x120>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a29      	ldr	r2, [pc, #164]	; (8006904 <TIM_Base_SetConfig+0x124>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d017      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a28      	ldr	r2, [pc, #160]	; (8006908 <TIM_Base_SetConfig+0x128>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a27      	ldr	r2, [pc, #156]	; (800690c <TIM_Base_SetConfig+0x12c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00f      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a26      	ldr	r2, [pc, #152]	; (8006910 <TIM_Base_SetConfig+0x130>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a25      	ldr	r2, [pc, #148]	; (8006914 <TIM_Base_SetConfig+0x134>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d007      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a24      	ldr	r2, [pc, #144]	; (8006918 <TIM_Base_SetConfig+0x138>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a23      	ldr	r2, [pc, #140]	; (800691c <TIM_Base_SetConfig+0x13c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d108      	bne.n	80068a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <TIM_Base_SetConfig+0x114>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0xf8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a0c      	ldr	r2, [pc, #48]	; (8006904 <TIM_Base_SetConfig+0x124>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d103      	bne.n	80068e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	615a      	str	r2, [r3, #20]
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40010400 	.word	0x40010400
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800
 8006914:	40001800 	.word	0x40001800
 8006918:	40001c00 	.word	0x40001c00
 800691c:	40002000 	.word	0x40002000

08006920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f023 0201 	bic.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 0302 	bic.w	r3, r3, #2
 8006968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a20      	ldr	r2, [pc, #128]	; (80069f8 <TIM_OC1_SetConfig+0xd8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_OC1_SetConfig+0x64>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <TIM_OC1_SetConfig+0xdc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10c      	bne.n	800699e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0308 	bic.w	r3, r3, #8
 800698a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 0304 	bic.w	r3, r3, #4
 800699c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <TIM_OC1_SetConfig+0xd8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC1_SetConfig+0x8e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a14      	ldr	r2, [pc, #80]	; (80069fc <TIM_OC1_SetConfig+0xdc>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d111      	bne.n	80069d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	621a      	str	r2, [r3, #32]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40010000 	.word	0x40010000
 80069fc:	40010400 	.word	0x40010400

08006a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0210 	bic.w	r2, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0320 	bic.w	r3, r3, #32
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a22      	ldr	r2, [pc, #136]	; (8006ae4 <TIM_OC2_SetConfig+0xe4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC2_SetConfig+0x68>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <TIM_OC2_SetConfig+0xe8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10d      	bne.n	8006a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <TIM_OC2_SetConfig+0xe4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC2_SetConfig+0x94>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <TIM_OC2_SetConfig+0xe8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d113      	bne.n	8006abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400

08006aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0303 	bic.w	r3, r3, #3
 8006b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a21      	ldr	r2, [pc, #132]	; (8006bcc <TIM_OC3_SetConfig+0xe0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_OC3_SetConfig+0x66>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a20      	ldr	r2, [pc, #128]	; (8006bd0 <TIM_OC3_SetConfig+0xe4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d10d      	bne.n	8006b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <TIM_OC3_SetConfig+0xe0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <TIM_OC3_SetConfig+0x92>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <TIM_OC3_SetConfig+0xe4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d113      	bne.n	8006ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	621a      	str	r2, [r3, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40010400 	.word	0x40010400

08006bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	031b      	lsls	r3, r3, #12
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a12      	ldr	r2, [pc, #72]	; (8006c78 <TIM_OC4_SetConfig+0xa4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC4_SetConfig+0x68>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <TIM_OC4_SetConfig+0xa8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d109      	bne.n	8006c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	019b      	lsls	r3, r3, #6
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40010400 	.word	0x40010400

08006c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f023 0201 	bic.w	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f023 030a 	bic.w	r3, r3, #10
 8006cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b087      	sub	sp, #28
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f023 0210 	bic.w	r2, r3, #16
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	031b      	lsls	r3, r3, #12
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f043 0307 	orr.w	r3, r3, #7
 8006d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	609a      	str	r2, [r3, #8]
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	021a      	lsls	r2, r3, #8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	609a      	str	r2, [r3, #8]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e05a      	b.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a21      	ldr	r2, [pc, #132]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e18:	d01d      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1b      	ldr	r2, [pc, #108]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1a      	ldr	r2, [pc, #104]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a18      	ldr	r2, [pc, #96]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a17      	ldr	r2, [pc, #92]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10c      	bne.n	8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40010000 	.word	0x40010000
 8006e94:	40000400 	.word	0x40000400
 8006e98:	40000800 	.word	0x40000800
 8006e9c:	40000c00 	.word	0x40000c00
 8006ea0:	40010400 	.word	0x40010400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40001800 	.word	0x40001800

08006eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e03f      	b.n	8006f66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fc f844 	bl	8002f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2224      	movs	r2, #36	; 0x24
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fddb 	bl	8007ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	695a      	ldr	r2, [r3, #20]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b08a      	sub	sp, #40	; 0x28
 8006f72:	af02      	add	r7, sp, #8
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	603b      	str	r3, [r7, #0]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d17c      	bne.n	8007088 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <HAL_UART_Transmit+0x2c>
 8006f94:	88fb      	ldrh	r3, [r7, #6]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e075      	b.n	800708a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_UART_Transmit+0x3e>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e06e      	b.n	800708a <HAL_UART_Transmit+0x11c>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2221      	movs	r2, #33	; 0x21
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fc2:	f7fc f8fd 	bl	80031c0 <HAL_GetTick>
 8006fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fdc:	d108      	bne.n	8006ff0 <HAL_UART_Transmit+0x82>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	e003      	b.n	8006ff8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007000:	e02a      	b.n	8007058 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2200      	movs	r2, #0
 800700a:	2180      	movs	r1, #128	; 0x80
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fb1f 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e036      	b.n	800708a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10b      	bne.n	800703a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007030:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	3302      	adds	r3, #2
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e007      	b.n	800704a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	781a      	ldrb	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	3301      	adds	r3, #1
 8007048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1cf      	bne.n	8007002 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2200      	movs	r2, #0
 800706a:	2140      	movs	r1, #64	; 0x40
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 faef 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e006      	b.n	800708a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	e000      	b.n	800708a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007088:	2302      	movs	r3, #2
  }
}
 800708a:	4618      	mov	r0, r3
 800708c:	3720      	adds	r7, #32
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	4613      	mov	r3, r2
 800709e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d11d      	bne.n	80070e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <HAL_UART_Receive_IT+0x26>
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e016      	b.n	80070ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d101      	bne.n	80070ca <HAL_UART_Receive_IT+0x38>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e00f      	b.n	80070ea <HAL_UART_Receive_IT+0x58>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070d8:	88fb      	ldrh	r3, [r7, #6]
 80070da:	461a      	mov	r2, r3
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fb24 	bl	800772c <UART_Start_Receive_IT>
 80070e4:	4603      	mov	r3, r0
 80070e6:	e000      	b.n	80070ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80070e8:	2302      	movs	r3, #2
  }
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b0ba      	sub	sp, #232	; 0xe8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800711a:	2300      	movs	r3, #0
 800711c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007120:	2300      	movs	r3, #0
 8007122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10f      	bne.n	800715a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800713a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <HAL_UART_IRQHandler+0x66>
 8007146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc03 	bl	800795e <UART_Receive_IT>
      return;
 8007158:	e256      	b.n	8007608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800715a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80de 	beq.w	8007320 <HAL_UART_IRQHandler+0x22c>
 8007164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 80d1 	beq.w	8007320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <HAL_UART_IRQHandler+0xae>
 800718a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	f043 0201 	orr.w	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_UART_IRQHandler+0xd2>
 80071ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f043 0202 	orr.w	r2, r3, #2
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <HAL_UART_IRQHandler+0xf6>
 80071d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f043 0204 	orr.w	r2, r3, #4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d011      	beq.n	800721a <HAL_UART_IRQHandler+0x126>
 80071f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	f043 0208 	orr.w	r2, r3, #8
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 81ed 	beq.w	80075fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_UART_IRQHandler+0x14e>
 8007230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fb8e 	bl	800795e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724c:	2b40      	cmp	r3, #64	; 0x40
 800724e:	bf0c      	ite	eq
 8007250:	2301      	moveq	r3, #1
 8007252:	2300      	movne	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <HAL_UART_IRQHandler+0x17a>
 8007266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800726a:	2b00      	cmp	r3, #0
 800726c:	d04f      	beq.n	800730e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fa96 	bl	80077a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d141      	bne.n	8007306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3314      	adds	r3, #20
 8007288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800729c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3314      	adds	r3, #20
 80072aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1d9      	bne.n	8007282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d013      	beq.n	80072fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	4a7d      	ldr	r2, [pc, #500]	; (80074d0 <HAL_UART_IRQHandler+0x3dc>)
 80072dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fc fe36 	bl	8003f54 <HAL_DMA_Abort_IT>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d016      	beq.n	800731c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072f8:	4610      	mov	r0, r2
 80072fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fc:	e00e      	b.n	800731c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f990 	bl	8007624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	e00a      	b.n	800731c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f98c 	bl	8007624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730c:	e006      	b.n	800731c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f988 	bl	8007624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800731a:	e170      	b.n	80075fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	bf00      	nop
    return;
 800731e:	e16e      	b.n	80075fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007324:	2b01      	cmp	r3, #1
 8007326:	f040 814a 	bne.w	80075be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800732a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 8143 	beq.w	80075be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 813c 	beq.w	80075be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007346:	2300      	movs	r3, #0
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	60bb      	str	r3, [r7, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	f040 80b4 	bne.w	80074d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8140 	beq.w	8007602 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800738a:	429a      	cmp	r2, r3
 800738c:	f080 8139 	bcs.w	8007602 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a2:	f000 8088 	beq.w	80074b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	330c      	adds	r3, #12
 80073ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1d9      	bne.n	80073a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3314      	adds	r3, #20
 80073f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3314      	adds	r3, #20
 8007412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800741a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800741e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e1      	bne.n	80073f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3314      	adds	r3, #20
 8007434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800743e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3314      	adds	r3, #20
 800744e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e3      	bne.n	800742e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	330c      	adds	r3, #12
 800747a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007486:	f023 0310 	bic.w	r3, r3, #16
 800748a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	330c      	adds	r3, #12
 8007494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007498:	65ba      	str	r2, [r7, #88]	; 0x58
 800749a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800749e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e3      	bne.n	8007474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fc fcdf 	bl	8003e74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074be:	b29b      	uxth	r3, r3
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f8b6 	bl	8007638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074cc:	e099      	b.n	8007602 <HAL_UART_IRQHandler+0x50e>
 80074ce:	bf00      	nop
 80074d0:	08007867 	.word	0x08007867
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074dc:	b29b      	uxth	r3, r3
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 808b 	beq.w	8007606 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8086 	beq.w	8007606 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	330c      	adds	r3, #12
 8007500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800750a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800751e:	647a      	str	r2, [r7, #68]	; 0x44
 8007520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800752c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e3      	bne.n	80074fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3314      	adds	r3, #20
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	623b      	str	r3, [r7, #32]
   return(result);
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3314      	adds	r3, #20
 8007552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007556:	633a      	str	r2, [r7, #48]	; 0x30
 8007558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800755c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e3      	bne.n	8007532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	60fb      	str	r3, [r7, #12]
   return(result);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0310 	bic.w	r3, r3, #16
 800758e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	330c      	adds	r3, #12
 8007598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800759c:	61fa      	str	r2, [r7, #28]
 800759e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	69b9      	ldr	r1, [r7, #24]
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	617b      	str	r3, [r7, #20]
   return(result);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e3      	bne.n	8007578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f83e 	bl	8007638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075bc:	e023      	b.n	8007606 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <HAL_UART_IRQHandler+0x4ea>
 80075ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f959 	bl	800788e <UART_Transmit_IT>
    return;
 80075dc:	e014      	b.n	8007608 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00e      	beq.n	8007608 <HAL_UART_IRQHandler+0x514>
 80075ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d008      	beq.n	8007608 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f999 	bl	800792e <UART_EndTransmit_IT>
    return;
 80075fc:	e004      	b.n	8007608 <HAL_UART_IRQHandler+0x514>
    return;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <HAL_UART_IRQHandler+0x514>
      return;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <HAL_UART_IRQHandler+0x514>
      return;
 8007606:	bf00      	nop
  }
}
 8007608:	37e8      	adds	r7, #232	; 0xe8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop

08007610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b090      	sub	sp, #64	; 0x40
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	4613      	mov	r3, r2
 800765e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007660:	e050      	b.n	8007704 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007668:	d04c      	beq.n	8007704 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800766a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <UART_WaitOnFlagUntilTimeout+0x30>
 8007670:	f7fb fda6 	bl	80031c0 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800767c:	429a      	cmp	r2, r3
 800767e:	d241      	bcs.n	8007704 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	330c      	adds	r3, #12
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	330c      	adds	r3, #12
 800769e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076a0:	637a      	str	r2, [r7, #52]	; 0x34
 80076a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e5      	bne.n	8007680 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3314      	adds	r3, #20
 80076ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	613b      	str	r3, [r7, #16]
   return(result);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f023 0301 	bic.w	r3, r3, #1
 80076ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3314      	adds	r3, #20
 80076d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d4:	623a      	str	r2, [r7, #32]
 80076d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	69f9      	ldr	r1, [r7, #28]
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e5      	bne.n	80076b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e00f      	b.n	8007724 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4013      	ands	r3, r2
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	429a      	cmp	r2, r3
 8007712:	bf0c      	ite	eq
 8007714:	2301      	moveq	r3, #1
 8007716:	2300      	movne	r3, #0
 8007718:	b2db      	uxtb	r3, r3
 800771a:	461a      	mov	r2, r3
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	429a      	cmp	r2, r3
 8007720:	d09f      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3740      	adds	r7, #64	; 0x40
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	4613      	mov	r3, r2
 8007738:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	88fa      	ldrh	r2, [r7, #6]
 8007744:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	88fa      	ldrh	r2, [r7, #6]
 800774a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2222      	movs	r2, #34	; 0x22
 8007756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007770:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695a      	ldr	r2, [r3, #20]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0201 	orr.w	r2, r2, #1
 8007780:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f042 0220 	orr.w	r2, r2, #32
 8007790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b095      	sub	sp, #84	; 0x54
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	330c      	adds	r3, #12
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077c8:	643a      	str	r2, [r7, #64]	; 0x40
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e5      	bne.n	80077a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3314      	adds	r3, #20
 80077e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3314      	adds	r3, #20
 80077fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e5      	bne.n	80077dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	2b01      	cmp	r3, #1
 8007816:	d119      	bne.n	800784c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	330c      	adds	r3, #12
 800781e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	60bb      	str	r3, [r7, #8]
   return(result);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f023 0310 	bic.w	r3, r3, #16
 800782e:	647b      	str	r3, [r7, #68]	; 0x44
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	330c      	adds	r3, #12
 8007836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007838:	61ba      	str	r2, [r7, #24]
 800783a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6979      	ldr	r1, [r7, #20]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	613b      	str	r3, [r7, #16]
   return(result);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	631a      	str	r2, [r3, #48]	; 0x30
}
 800785a:	bf00      	nop
 800785c:	3754      	adds	r7, #84	; 0x54
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff fecf 	bl	8007624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b21      	cmp	r3, #33	; 0x21
 80078a0:	d13e      	bne.n	8007920 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078aa:	d114      	bne.n	80078d6 <UART_Transmit_IT+0x48>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d110      	bne.n	80078d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	1c9a      	adds	r2, r3, #2
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	621a      	str	r2, [r3, #32]
 80078d4:	e008      	b.n	80078e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	1c59      	adds	r1, r3, #1
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6211      	str	r1, [r2, #32]
 80078e0:	781a      	ldrb	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	4619      	mov	r1, r3
 80078f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10f      	bne.n	800791c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800790a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800791a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	e000      	b.n	8007922 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007920:	2302      	movs	r3, #2
  }
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fe5e 	bl	8007610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b08c      	sub	sp, #48	; 0x30
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b22      	cmp	r3, #34	; 0x22
 8007970:	f040 80ab 	bne.w	8007aca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797c:	d117      	bne.n	80079ae <UART_Receive_IT+0x50>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d113      	bne.n	80079ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799c:	b29a      	uxth	r2, r3
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	1c9a      	adds	r2, r3, #2
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28
 80079ac:	e026      	b.n	80079fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c0:	d007      	beq.n	80079d2 <UART_Receive_IT+0x74>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <UART_Receive_IT+0x82>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e008      	b.n	80079f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d15a      	bne.n	8007ac6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0220 	bic.w	r2, r2, #32
 8007a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695a      	ldr	r2, [r3, #20]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d135      	bne.n	8007abc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	330c      	adds	r3, #12
 8007a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	613b      	str	r3, [r7, #16]
   return(result);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	330c      	adds	r3, #12
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	623a      	str	r2, [r7, #32]
 8007a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	69f9      	ldr	r1, [r7, #28]
 8007a7c:	6a3a      	ldr	r2, [r7, #32]
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e5      	bne.n	8007a56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d10a      	bne.n	8007aae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff fdbf 	bl	8007638 <HAL_UARTEx_RxEventCallback>
 8007aba:	e002      	b.n	8007ac2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fb f9b1 	bl	8002e24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e002      	b.n	8007acc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e000      	b.n	8007acc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
  }
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3730      	adds	r7, #48	; 0x30
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ad8:	b0c0      	sub	sp, #256	; 0x100
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af0:	68d9      	ldr	r1, [r3, #12]
 8007af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	ea40 0301 	orr.w	r3, r0, r1
 8007afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	431a      	orrs	r2, r3
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b2c:	f021 010c 	bic.w	r1, r1, #12
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b3a:	430b      	orrs	r3, r1
 8007b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4e:	6999      	ldr	r1, [r3, #24]
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	ea40 0301 	orr.w	r3, r0, r1
 8007b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b8f      	ldr	r3, [pc, #572]	; (8007da0 <UART_SetConfig+0x2cc>)
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d005      	beq.n	8007b74 <UART_SetConfig+0xa0>
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	4b8d      	ldr	r3, [pc, #564]	; (8007da4 <UART_SetConfig+0x2d0>)
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d104      	bne.n	8007b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b74:	f7fd fbf8 	bl	8005368 <HAL_RCC_GetPCLK2Freq>
 8007b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b7c:	e003      	b.n	8007b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b7e:	f7fd fbdf 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 8007b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b90:	f040 810c 	bne.w	8007dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	462b      	mov	r3, r5
 8007baa:	1891      	adds	r1, r2, r2
 8007bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bae:	415b      	adcs	r3, r3
 8007bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	eb12 0801 	adds.w	r8, r2, r1
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	eb43 0901 	adc.w	r9, r3, r1
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bd6:	4690      	mov	r8, r2
 8007bd8:	4699      	mov	r9, r3
 8007bda:	4623      	mov	r3, r4
 8007bdc:	eb18 0303 	adds.w	r3, r8, r3
 8007be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007be4:	462b      	mov	r3, r5
 8007be6:	eb49 0303 	adc.w	r3, r9, r3
 8007bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c02:	460b      	mov	r3, r1
 8007c04:	18db      	adds	r3, r3, r3
 8007c06:	653b      	str	r3, [r7, #80]	; 0x50
 8007c08:	4613      	mov	r3, r2
 8007c0a:	eb42 0303 	adc.w	r3, r2, r3
 8007c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8007c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c18:	f7f9 f816 	bl	8000c48 <__aeabi_uldivmod>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4b61      	ldr	r3, [pc, #388]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007c22:	fba3 2302 	umull	r2, r3, r3, r2
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	011c      	lsls	r4, r3, #4
 8007c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c3c:	4642      	mov	r2, r8
 8007c3e:	464b      	mov	r3, r9
 8007c40:	1891      	adds	r1, r2, r2
 8007c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c44:	415b      	adcs	r3, r3
 8007c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c4c:	4641      	mov	r1, r8
 8007c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8007c52:	4649      	mov	r1, r9
 8007c54:	eb43 0b01 	adc.w	fp, r3, r1
 8007c58:	f04f 0200 	mov.w	r2, #0
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c6c:	4692      	mov	sl, r2
 8007c6e:	469b      	mov	fp, r3
 8007c70:	4643      	mov	r3, r8
 8007c72:	eb1a 0303 	adds.w	r3, sl, r3
 8007c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8007c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	18db      	adds	r3, r3, r3
 8007c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	eb42 0303 	adc.w	r3, r2, r3
 8007ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cae:	f7f8 ffcb 	bl	8000c48 <__aeabi_uldivmod>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4b3b      	ldr	r3, [pc, #236]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007cba:	fba3 2301 	umull	r2, r3, r3, r1
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	2264      	movs	r2, #100	; 0x64
 8007cc2:	fb02 f303 	mul.w	r3, r2, r3
 8007cc6:	1acb      	subs	r3, r1, r3
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007cce:	4b36      	ldr	r3, [pc, #216]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cdc:	441c      	add	r4, r3
 8007cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	1891      	adds	r1, r2, r2
 8007cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cf8:	415b      	adcs	r3, r3
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d00:	4641      	mov	r1, r8
 8007d02:	1851      	adds	r1, r2, r1
 8007d04:	6339      	str	r1, [r7, #48]	; 0x30
 8007d06:	4649      	mov	r1, r9
 8007d08:	414b      	adcs	r3, r1
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d18:	4659      	mov	r1, fp
 8007d1a:	00cb      	lsls	r3, r1, #3
 8007d1c:	4651      	mov	r1, sl
 8007d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d22:	4651      	mov	r1, sl
 8007d24:	00ca      	lsls	r2, r1, #3
 8007d26:	4610      	mov	r0, r2
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4642      	mov	r2, r8
 8007d2e:	189b      	adds	r3, r3, r2
 8007d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d34:	464b      	mov	r3, r9
 8007d36:	460a      	mov	r2, r1
 8007d38:	eb42 0303 	adc.w	r3, r2, r3
 8007d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d54:	460b      	mov	r3, r1
 8007d56:	18db      	adds	r3, r3, r3
 8007d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	eb42 0303 	adc.w	r3, r2, r3
 8007d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d6a:	f7f8 ff6d 	bl	8000c48 <__aeabi_uldivmod>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007d74:	fba3 1302 	umull	r1, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	2164      	movs	r1, #100	; 0x64
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	3332      	adds	r3, #50	; 0x32
 8007d86:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	f003 0207 	and.w	r2, r3, #7
 8007d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4422      	add	r2, r4
 8007d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d9c:	e105      	b.n	8007faa <UART_SetConfig+0x4d6>
 8007d9e:	bf00      	nop
 8007da0:	40011000 	.word	0x40011000
 8007da4:	40011400 	.word	0x40011400
 8007da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dbe:	4642      	mov	r2, r8
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	1891      	adds	r1, r2, r2
 8007dc4:	6239      	str	r1, [r7, #32]
 8007dc6:	415b      	adcs	r3, r3
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dce:	4641      	mov	r1, r8
 8007dd0:	1854      	adds	r4, r2, r1
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	eb43 0501 	adc.w	r5, r3, r1
 8007dd8:	f04f 0200 	mov.w	r2, #0
 8007ddc:	f04f 0300 	mov.w	r3, #0
 8007de0:	00eb      	lsls	r3, r5, #3
 8007de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007de6:	00e2      	lsls	r2, r4, #3
 8007de8:	4614      	mov	r4, r2
 8007dea:	461d      	mov	r5, r3
 8007dec:	4643      	mov	r3, r8
 8007dee:	18e3      	adds	r3, r4, r3
 8007df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007df4:	464b      	mov	r3, r9
 8007df6:	eb45 0303 	adc.w	r3, r5, r3
 8007dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e0e:	f04f 0200 	mov.w	r2, #0
 8007e12:	f04f 0300 	mov.w	r3, #0
 8007e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	008b      	lsls	r3, r1, #2
 8007e1e:	4621      	mov	r1, r4
 8007e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e24:	4621      	mov	r1, r4
 8007e26:	008a      	lsls	r2, r1, #2
 8007e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e2c:	f7f8 ff0c 	bl	8000c48 <__aeabi_uldivmod>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4b60      	ldr	r3, [pc, #384]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007e36:	fba3 2302 	umull	r2, r3, r3, r2
 8007e3a:	095b      	lsrs	r3, r3, #5
 8007e3c:	011c      	lsls	r4, r3, #4
 8007e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e50:	4642      	mov	r2, r8
 8007e52:	464b      	mov	r3, r9
 8007e54:	1891      	adds	r1, r2, r2
 8007e56:	61b9      	str	r1, [r7, #24]
 8007e58:	415b      	adcs	r3, r3
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e60:	4641      	mov	r1, r8
 8007e62:	1851      	adds	r1, r2, r1
 8007e64:	6139      	str	r1, [r7, #16]
 8007e66:	4649      	mov	r1, r9
 8007e68:	414b      	adcs	r3, r1
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e78:	4659      	mov	r1, fp
 8007e7a:	00cb      	lsls	r3, r1, #3
 8007e7c:	4651      	mov	r1, sl
 8007e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e82:	4651      	mov	r1, sl
 8007e84:	00ca      	lsls	r2, r1, #3
 8007e86:	4610      	mov	r0, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	189b      	adds	r3, r3, r2
 8007e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e94:	464b      	mov	r3, r9
 8007e96:	460a      	mov	r2, r1
 8007e98:	eb42 0303 	adc.w	r3, r2, r3
 8007e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	f04f 0300 	mov.w	r3, #0
 8007eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007eb8:	4649      	mov	r1, r9
 8007eba:	008b      	lsls	r3, r1, #2
 8007ebc:	4641      	mov	r1, r8
 8007ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec2:	4641      	mov	r1, r8
 8007ec4:	008a      	lsls	r2, r1, #2
 8007ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007eca:	f7f8 febd 	bl	8000c48 <__aeabi_uldivmod>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	2164      	movs	r1, #100	; 0x64
 8007edc:	fb01 f303 	mul.w	r3, r1, r3
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	011b      	lsls	r3, r3, #4
 8007ee4:	3332      	adds	r3, #50	; 0x32
 8007ee6:	4a34      	ldr	r2, [pc, #208]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ef2:	441c      	add	r4, r3
 8007ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef8:	2200      	movs	r2, #0
 8007efa:	673b      	str	r3, [r7, #112]	; 0x70
 8007efc:	677a      	str	r2, [r7, #116]	; 0x74
 8007efe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f02:	4642      	mov	r2, r8
 8007f04:	464b      	mov	r3, r9
 8007f06:	1891      	adds	r1, r2, r2
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	415b      	adcs	r3, r3
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f12:	4641      	mov	r1, r8
 8007f14:	1851      	adds	r1, r2, r1
 8007f16:	6039      	str	r1, [r7, #0]
 8007f18:	4649      	mov	r1, r9
 8007f1a:	414b      	adcs	r3, r1
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	00cb      	lsls	r3, r1, #3
 8007f2e:	4651      	mov	r1, sl
 8007f30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f34:	4651      	mov	r1, sl
 8007f36:	00ca      	lsls	r2, r1, #3
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	4642      	mov	r2, r8
 8007f40:	189b      	adds	r3, r3, r2
 8007f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f44:	464b      	mov	r3, r9
 8007f46:	460a      	mov	r2, r1
 8007f48:	eb42 0303 	adc.w	r3, r2, r3
 8007f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	663b      	str	r3, [r7, #96]	; 0x60
 8007f58:	667a      	str	r2, [r7, #100]	; 0x64
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	f04f 0300 	mov.w	r3, #0
 8007f62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f66:	4649      	mov	r1, r9
 8007f68:	008b      	lsls	r3, r1, #2
 8007f6a:	4641      	mov	r1, r8
 8007f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f70:	4641      	mov	r1, r8
 8007f72:	008a      	lsls	r2, r1, #2
 8007f74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f78:	f7f8 fe66 	bl	8000c48 <__aeabi_uldivmod>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007f82:	fba3 1302 	umull	r1, r3, r3, r2
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	2164      	movs	r1, #100	; 0x64
 8007f8a:	fb01 f303 	mul.w	r3, r1, r3
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	3332      	adds	r3, #50	; 0x32
 8007f94:	4a08      	ldr	r2, [pc, #32]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007f96:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	f003 020f 	and.w	r2, r3, #15
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4422      	add	r2, r4
 8007fa8:	609a      	str	r2, [r3, #8]
}
 8007faa:	bf00      	nop
 8007fac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fb6:	bf00      	nop
 8007fb8:	51eb851f 	.word	0x51eb851f

08007fbc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4b20      	ldr	r3, [pc, #128]	; (800805c <FSMC_NORSRAM_Init+0xa0>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007fe6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007fec:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007ff2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007ff8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007ffe:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008004:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800800a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008010:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008016:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800801c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008022:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008028:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2b08      	cmp	r3, #8
 8008036:	d103      	bne.n	8008040 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	fff00080 	.word	0xfff00080

08008060 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008082:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800808e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008096:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800809e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80080a8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	3b02      	subs	r3, #2
 80080b0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80080b2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80080b8:	4313      	orrs	r3, r2
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6979      	ldr	r1, [r7, #20]
 80080c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f4:	d122      	bne.n	800813c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fe:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008104:	4013      	ands	r3, r2
 8008106:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008112:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800811a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008122:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008128:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	4313      	orrs	r3, r2
 800812e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6979      	ldr	r1, [r7, #20]
 8008136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800813a:	e005      	b.n	8008148 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	cff00000 	.word	0xcff00000

0800815c <__errno>:
 800815c:	4b01      	ldr	r3, [pc, #4]	; (8008164 <__errno+0x8>)
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20000014 	.word	0x20000014

08008168 <__libc_init_array>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	4d0d      	ldr	r5, [pc, #52]	; (80081a0 <__libc_init_array+0x38>)
 800816c:	4c0d      	ldr	r4, [pc, #52]	; (80081a4 <__libc_init_array+0x3c>)
 800816e:	1b64      	subs	r4, r4, r5
 8008170:	10a4      	asrs	r4, r4, #2
 8008172:	2600      	movs	r6, #0
 8008174:	42a6      	cmp	r6, r4
 8008176:	d109      	bne.n	800818c <__libc_init_array+0x24>
 8008178:	4d0b      	ldr	r5, [pc, #44]	; (80081a8 <__libc_init_array+0x40>)
 800817a:	4c0c      	ldr	r4, [pc, #48]	; (80081ac <__libc_init_array+0x44>)
 800817c:	f002 ff04 	bl	800af88 <_init>
 8008180:	1b64      	subs	r4, r4, r5
 8008182:	10a4      	asrs	r4, r4, #2
 8008184:	2600      	movs	r6, #0
 8008186:	42a6      	cmp	r6, r4
 8008188:	d105      	bne.n	8008196 <__libc_init_array+0x2e>
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008190:	4798      	blx	r3
 8008192:	3601      	adds	r6, #1
 8008194:	e7ee      	b.n	8008174 <__libc_init_array+0xc>
 8008196:	f855 3b04 	ldr.w	r3, [r5], #4
 800819a:	4798      	blx	r3
 800819c:	3601      	adds	r6, #1
 800819e:	e7f2      	b.n	8008186 <__libc_init_array+0x1e>
 80081a0:	0800e374 	.word	0x0800e374
 80081a4:	0800e374 	.word	0x0800e374
 80081a8:	0800e374 	.word	0x0800e374
 80081ac:	0800e378 	.word	0x0800e378

080081b0 <memset>:
 80081b0:	4402      	add	r2, r0
 80081b2:	4603      	mov	r3, r0
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d100      	bne.n	80081ba <memset+0xa>
 80081b8:	4770      	bx	lr
 80081ba:	f803 1b01 	strb.w	r1, [r3], #1
 80081be:	e7f9      	b.n	80081b4 <memset+0x4>

080081c0 <__cvt>:
 80081c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	ec55 4b10 	vmov	r4, r5, d0
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	460e      	mov	r6, r1
 80081cc:	4619      	mov	r1, r3
 80081ce:	462b      	mov	r3, r5
 80081d0:	bfbb      	ittet	lt
 80081d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081d6:	461d      	movlt	r5, r3
 80081d8:	2300      	movge	r3, #0
 80081da:	232d      	movlt	r3, #45	; 0x2d
 80081dc:	700b      	strb	r3, [r1, #0]
 80081de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081e4:	4691      	mov	r9, r2
 80081e6:	f023 0820 	bic.w	r8, r3, #32
 80081ea:	bfbc      	itt	lt
 80081ec:	4622      	movlt	r2, r4
 80081ee:	4614      	movlt	r4, r2
 80081f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081f4:	d005      	beq.n	8008202 <__cvt+0x42>
 80081f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081fa:	d100      	bne.n	80081fe <__cvt+0x3e>
 80081fc:	3601      	adds	r6, #1
 80081fe:	2102      	movs	r1, #2
 8008200:	e000      	b.n	8008204 <__cvt+0x44>
 8008202:	2103      	movs	r1, #3
 8008204:	ab03      	add	r3, sp, #12
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	ab02      	add	r3, sp, #8
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	ec45 4b10 	vmov	d0, r4, r5
 8008210:	4653      	mov	r3, sl
 8008212:	4632      	mov	r2, r6
 8008214:	f000 fcec 	bl	8008bf0 <_dtoa_r>
 8008218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800821c:	4607      	mov	r7, r0
 800821e:	d102      	bne.n	8008226 <__cvt+0x66>
 8008220:	f019 0f01 	tst.w	r9, #1
 8008224:	d022      	beq.n	800826c <__cvt+0xac>
 8008226:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800822a:	eb07 0906 	add.w	r9, r7, r6
 800822e:	d110      	bne.n	8008252 <__cvt+0x92>
 8008230:	783b      	ldrb	r3, [r7, #0]
 8008232:	2b30      	cmp	r3, #48	; 0x30
 8008234:	d10a      	bne.n	800824c <__cvt+0x8c>
 8008236:	2200      	movs	r2, #0
 8008238:	2300      	movs	r3, #0
 800823a:	4620      	mov	r0, r4
 800823c:	4629      	mov	r1, r5
 800823e:	f7f8 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 8008242:	b918      	cbnz	r0, 800824c <__cvt+0x8c>
 8008244:	f1c6 0601 	rsb	r6, r6, #1
 8008248:	f8ca 6000 	str.w	r6, [sl]
 800824c:	f8da 3000 	ldr.w	r3, [sl]
 8008250:	4499      	add	r9, r3
 8008252:	2200      	movs	r2, #0
 8008254:	2300      	movs	r3, #0
 8008256:	4620      	mov	r0, r4
 8008258:	4629      	mov	r1, r5
 800825a:	f7f8 fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800825e:	b108      	cbz	r0, 8008264 <__cvt+0xa4>
 8008260:	f8cd 900c 	str.w	r9, [sp, #12]
 8008264:	2230      	movs	r2, #48	; 0x30
 8008266:	9b03      	ldr	r3, [sp, #12]
 8008268:	454b      	cmp	r3, r9
 800826a:	d307      	bcc.n	800827c <__cvt+0xbc>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008270:	1bdb      	subs	r3, r3, r7
 8008272:	4638      	mov	r0, r7
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	b004      	add	sp, #16
 8008278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827c:	1c59      	adds	r1, r3, #1
 800827e:	9103      	str	r1, [sp, #12]
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e7f0      	b.n	8008266 <__cvt+0xa6>

08008284 <__exponent>:
 8008284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008286:	4603      	mov	r3, r0
 8008288:	2900      	cmp	r1, #0
 800828a:	bfb8      	it	lt
 800828c:	4249      	neglt	r1, r1
 800828e:	f803 2b02 	strb.w	r2, [r3], #2
 8008292:	bfb4      	ite	lt
 8008294:	222d      	movlt	r2, #45	; 0x2d
 8008296:	222b      	movge	r2, #43	; 0x2b
 8008298:	2909      	cmp	r1, #9
 800829a:	7042      	strb	r2, [r0, #1]
 800829c:	dd2a      	ble.n	80082f4 <__exponent+0x70>
 800829e:	f10d 0407 	add.w	r4, sp, #7
 80082a2:	46a4      	mov	ip, r4
 80082a4:	270a      	movs	r7, #10
 80082a6:	46a6      	mov	lr, r4
 80082a8:	460a      	mov	r2, r1
 80082aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80082ae:	fb07 1516 	mls	r5, r7, r6, r1
 80082b2:	3530      	adds	r5, #48	; 0x30
 80082b4:	2a63      	cmp	r2, #99	; 0x63
 80082b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80082ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082be:	4631      	mov	r1, r6
 80082c0:	dcf1      	bgt.n	80082a6 <__exponent+0x22>
 80082c2:	3130      	adds	r1, #48	; 0x30
 80082c4:	f1ae 0502 	sub.w	r5, lr, #2
 80082c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082cc:	1c44      	adds	r4, r0, #1
 80082ce:	4629      	mov	r1, r5
 80082d0:	4561      	cmp	r1, ip
 80082d2:	d30a      	bcc.n	80082ea <__exponent+0x66>
 80082d4:	f10d 0209 	add.w	r2, sp, #9
 80082d8:	eba2 020e 	sub.w	r2, r2, lr
 80082dc:	4565      	cmp	r5, ip
 80082de:	bf88      	it	hi
 80082e0:	2200      	movhi	r2, #0
 80082e2:	4413      	add	r3, r2
 80082e4:	1a18      	subs	r0, r3, r0
 80082e6:	b003      	add	sp, #12
 80082e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082f2:	e7ed      	b.n	80082d0 <__exponent+0x4c>
 80082f4:	2330      	movs	r3, #48	; 0x30
 80082f6:	3130      	adds	r1, #48	; 0x30
 80082f8:	7083      	strb	r3, [r0, #2]
 80082fa:	70c1      	strb	r1, [r0, #3]
 80082fc:	1d03      	adds	r3, r0, #4
 80082fe:	e7f1      	b.n	80082e4 <__exponent+0x60>

08008300 <_printf_float>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	ed2d 8b02 	vpush	{d8}
 8008308:	b08d      	sub	sp, #52	; 0x34
 800830a:	460c      	mov	r4, r1
 800830c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008310:	4616      	mov	r6, r2
 8008312:	461f      	mov	r7, r3
 8008314:	4605      	mov	r5, r0
 8008316:	f001 fa59 	bl	80097cc <_localeconv_r>
 800831a:	f8d0 a000 	ldr.w	sl, [r0]
 800831e:	4650      	mov	r0, sl
 8008320:	f7f7 ff56 	bl	80001d0 <strlen>
 8008324:	2300      	movs	r3, #0
 8008326:	930a      	str	r3, [sp, #40]	; 0x28
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	f8d8 3000 	ldr.w	r3, [r8]
 8008330:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008334:	3307      	adds	r3, #7
 8008336:	f023 0307 	bic.w	r3, r3, #7
 800833a:	f103 0208 	add.w	r2, r3, #8
 800833e:	f8c8 2000 	str.w	r2, [r8]
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800834a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800834e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008352:	9307      	str	r3, [sp, #28]
 8008354:	f8cd 8018 	str.w	r8, [sp, #24]
 8008358:	ee08 0a10 	vmov	s16, r0
 800835c:	4b9f      	ldr	r3, [pc, #636]	; (80085dc <_printf_float+0x2dc>)
 800835e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008362:	f04f 32ff 	mov.w	r2, #4294967295
 8008366:	f7f8 fbe1 	bl	8000b2c <__aeabi_dcmpun>
 800836a:	bb88      	cbnz	r0, 80083d0 <_printf_float+0xd0>
 800836c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008370:	4b9a      	ldr	r3, [pc, #616]	; (80085dc <_printf_float+0x2dc>)
 8008372:	f04f 32ff 	mov.w	r2, #4294967295
 8008376:	f7f8 fbbb 	bl	8000af0 <__aeabi_dcmple>
 800837a:	bb48      	cbnz	r0, 80083d0 <_printf_float+0xd0>
 800837c:	2200      	movs	r2, #0
 800837e:	2300      	movs	r3, #0
 8008380:	4640      	mov	r0, r8
 8008382:	4649      	mov	r1, r9
 8008384:	f7f8 fbaa 	bl	8000adc <__aeabi_dcmplt>
 8008388:	b110      	cbz	r0, 8008390 <_printf_float+0x90>
 800838a:	232d      	movs	r3, #45	; 0x2d
 800838c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008390:	4b93      	ldr	r3, [pc, #588]	; (80085e0 <_printf_float+0x2e0>)
 8008392:	4894      	ldr	r0, [pc, #592]	; (80085e4 <_printf_float+0x2e4>)
 8008394:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008398:	bf94      	ite	ls
 800839a:	4698      	movls	r8, r3
 800839c:	4680      	movhi	r8, r0
 800839e:	2303      	movs	r3, #3
 80083a0:	6123      	str	r3, [r4, #16]
 80083a2:	9b05      	ldr	r3, [sp, #20]
 80083a4:	f023 0204 	bic.w	r2, r3, #4
 80083a8:	6022      	str	r2, [r4, #0]
 80083aa:	f04f 0900 	mov.w	r9, #0
 80083ae:	9700      	str	r7, [sp, #0]
 80083b0:	4633      	mov	r3, r6
 80083b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80083b4:	4621      	mov	r1, r4
 80083b6:	4628      	mov	r0, r5
 80083b8:	f000 f9d8 	bl	800876c <_printf_common>
 80083bc:	3001      	adds	r0, #1
 80083be:	f040 8090 	bne.w	80084e2 <_printf_float+0x1e2>
 80083c2:	f04f 30ff 	mov.w	r0, #4294967295
 80083c6:	b00d      	add	sp, #52	; 0x34
 80083c8:	ecbd 8b02 	vpop	{d8}
 80083cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	4640      	mov	r0, r8
 80083d6:	4649      	mov	r1, r9
 80083d8:	f7f8 fba8 	bl	8000b2c <__aeabi_dcmpun>
 80083dc:	b140      	cbz	r0, 80083f0 <_printf_float+0xf0>
 80083de:	464b      	mov	r3, r9
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bfbc      	itt	lt
 80083e4:	232d      	movlt	r3, #45	; 0x2d
 80083e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083ea:	487f      	ldr	r0, [pc, #508]	; (80085e8 <_printf_float+0x2e8>)
 80083ec:	4b7f      	ldr	r3, [pc, #508]	; (80085ec <_printf_float+0x2ec>)
 80083ee:	e7d1      	b.n	8008394 <_printf_float+0x94>
 80083f0:	6863      	ldr	r3, [r4, #4]
 80083f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083f6:	9206      	str	r2, [sp, #24]
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	d13f      	bne.n	800847c <_printf_float+0x17c>
 80083fc:	2306      	movs	r3, #6
 80083fe:	6063      	str	r3, [r4, #4]
 8008400:	9b05      	ldr	r3, [sp, #20]
 8008402:	6861      	ldr	r1, [r4, #4]
 8008404:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008408:	2300      	movs	r3, #0
 800840a:	9303      	str	r3, [sp, #12]
 800840c:	ab0a      	add	r3, sp, #40	; 0x28
 800840e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008412:	ab09      	add	r3, sp, #36	; 0x24
 8008414:	ec49 8b10 	vmov	d0, r8, r9
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	6022      	str	r2, [r4, #0]
 800841c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008420:	4628      	mov	r0, r5
 8008422:	f7ff fecd 	bl	80081c0 <__cvt>
 8008426:	9b06      	ldr	r3, [sp, #24]
 8008428:	9909      	ldr	r1, [sp, #36]	; 0x24
 800842a:	2b47      	cmp	r3, #71	; 0x47
 800842c:	4680      	mov	r8, r0
 800842e:	d108      	bne.n	8008442 <_printf_float+0x142>
 8008430:	1cc8      	adds	r0, r1, #3
 8008432:	db02      	blt.n	800843a <_printf_float+0x13a>
 8008434:	6863      	ldr	r3, [r4, #4]
 8008436:	4299      	cmp	r1, r3
 8008438:	dd41      	ble.n	80084be <_printf_float+0x1be>
 800843a:	f1ab 0b02 	sub.w	fp, fp, #2
 800843e:	fa5f fb8b 	uxtb.w	fp, fp
 8008442:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008446:	d820      	bhi.n	800848a <_printf_float+0x18a>
 8008448:	3901      	subs	r1, #1
 800844a:	465a      	mov	r2, fp
 800844c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008450:	9109      	str	r1, [sp, #36]	; 0x24
 8008452:	f7ff ff17 	bl	8008284 <__exponent>
 8008456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008458:	1813      	adds	r3, r2, r0
 800845a:	2a01      	cmp	r2, #1
 800845c:	4681      	mov	r9, r0
 800845e:	6123      	str	r3, [r4, #16]
 8008460:	dc02      	bgt.n	8008468 <_printf_float+0x168>
 8008462:	6822      	ldr	r2, [r4, #0]
 8008464:	07d2      	lsls	r2, r2, #31
 8008466:	d501      	bpl.n	800846c <_printf_float+0x16c>
 8008468:	3301      	adds	r3, #1
 800846a:	6123      	str	r3, [r4, #16]
 800846c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008470:	2b00      	cmp	r3, #0
 8008472:	d09c      	beq.n	80083ae <_printf_float+0xae>
 8008474:	232d      	movs	r3, #45	; 0x2d
 8008476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800847a:	e798      	b.n	80083ae <_printf_float+0xae>
 800847c:	9a06      	ldr	r2, [sp, #24]
 800847e:	2a47      	cmp	r2, #71	; 0x47
 8008480:	d1be      	bne.n	8008400 <_printf_float+0x100>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1bc      	bne.n	8008400 <_printf_float+0x100>
 8008486:	2301      	movs	r3, #1
 8008488:	e7b9      	b.n	80083fe <_printf_float+0xfe>
 800848a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800848e:	d118      	bne.n	80084c2 <_printf_float+0x1c2>
 8008490:	2900      	cmp	r1, #0
 8008492:	6863      	ldr	r3, [r4, #4]
 8008494:	dd0b      	ble.n	80084ae <_printf_float+0x1ae>
 8008496:	6121      	str	r1, [r4, #16]
 8008498:	b913      	cbnz	r3, 80084a0 <_printf_float+0x1a0>
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	07d0      	lsls	r0, r2, #31
 800849e:	d502      	bpl.n	80084a6 <_printf_float+0x1a6>
 80084a0:	3301      	adds	r3, #1
 80084a2:	440b      	add	r3, r1
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80084a8:	f04f 0900 	mov.w	r9, #0
 80084ac:	e7de      	b.n	800846c <_printf_float+0x16c>
 80084ae:	b913      	cbnz	r3, 80084b6 <_printf_float+0x1b6>
 80084b0:	6822      	ldr	r2, [r4, #0]
 80084b2:	07d2      	lsls	r2, r2, #31
 80084b4:	d501      	bpl.n	80084ba <_printf_float+0x1ba>
 80084b6:	3302      	adds	r3, #2
 80084b8:	e7f4      	b.n	80084a4 <_printf_float+0x1a4>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e7f2      	b.n	80084a4 <_printf_float+0x1a4>
 80084be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c4:	4299      	cmp	r1, r3
 80084c6:	db05      	blt.n	80084d4 <_printf_float+0x1d4>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	6121      	str	r1, [r4, #16]
 80084cc:	07d8      	lsls	r0, r3, #31
 80084ce:	d5ea      	bpl.n	80084a6 <_printf_float+0x1a6>
 80084d0:	1c4b      	adds	r3, r1, #1
 80084d2:	e7e7      	b.n	80084a4 <_printf_float+0x1a4>
 80084d4:	2900      	cmp	r1, #0
 80084d6:	bfd4      	ite	le
 80084d8:	f1c1 0202 	rsble	r2, r1, #2
 80084dc:	2201      	movgt	r2, #1
 80084de:	4413      	add	r3, r2
 80084e0:	e7e0      	b.n	80084a4 <_printf_float+0x1a4>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	055a      	lsls	r2, r3, #21
 80084e6:	d407      	bmi.n	80084f8 <_printf_float+0x1f8>
 80084e8:	6923      	ldr	r3, [r4, #16]
 80084ea:	4642      	mov	r2, r8
 80084ec:	4631      	mov	r1, r6
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b8      	blx	r7
 80084f2:	3001      	adds	r0, #1
 80084f4:	d12c      	bne.n	8008550 <_printf_float+0x250>
 80084f6:	e764      	b.n	80083c2 <_printf_float+0xc2>
 80084f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084fc:	f240 80e0 	bls.w	80086c0 <_printf_float+0x3c0>
 8008500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	f7f8 fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800850c:	2800      	cmp	r0, #0
 800850e:	d034      	beq.n	800857a <_printf_float+0x27a>
 8008510:	4a37      	ldr	r2, [pc, #220]	; (80085f0 <_printf_float+0x2f0>)
 8008512:	2301      	movs	r3, #1
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f af51 	beq.w	80083c2 <_printf_float+0xc2>
 8008520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008524:	429a      	cmp	r2, r3
 8008526:	db02      	blt.n	800852e <_printf_float+0x22e>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	07d8      	lsls	r0, r3, #31
 800852c:	d510      	bpl.n	8008550 <_printf_float+0x250>
 800852e:	ee18 3a10 	vmov	r3, s16
 8008532:	4652      	mov	r2, sl
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	f43f af41 	beq.w	80083c2 <_printf_float+0xc2>
 8008540:	f04f 0800 	mov.w	r8, #0
 8008544:	f104 091a 	add.w	r9, r4, #26
 8008548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854a:	3b01      	subs	r3, #1
 800854c:	4543      	cmp	r3, r8
 800854e:	dc09      	bgt.n	8008564 <_printf_float+0x264>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	079b      	lsls	r3, r3, #30
 8008554:	f100 8105 	bmi.w	8008762 <_printf_float+0x462>
 8008558:	68e0      	ldr	r0, [r4, #12]
 800855a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855c:	4298      	cmp	r0, r3
 800855e:	bfb8      	it	lt
 8008560:	4618      	movlt	r0, r3
 8008562:	e730      	b.n	80083c6 <_printf_float+0xc6>
 8008564:	2301      	movs	r3, #1
 8008566:	464a      	mov	r2, r9
 8008568:	4631      	mov	r1, r6
 800856a:	4628      	mov	r0, r5
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	f43f af27 	beq.w	80083c2 <_printf_float+0xc2>
 8008574:	f108 0801 	add.w	r8, r8, #1
 8008578:	e7e6      	b.n	8008548 <_printf_float+0x248>
 800857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857c:	2b00      	cmp	r3, #0
 800857e:	dc39      	bgt.n	80085f4 <_printf_float+0x2f4>
 8008580:	4a1b      	ldr	r2, [pc, #108]	; (80085f0 <_printf_float+0x2f0>)
 8008582:	2301      	movs	r3, #1
 8008584:	4631      	mov	r1, r6
 8008586:	4628      	mov	r0, r5
 8008588:	47b8      	blx	r7
 800858a:	3001      	adds	r0, #1
 800858c:	f43f af19 	beq.w	80083c2 <_printf_float+0xc2>
 8008590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008594:	4313      	orrs	r3, r2
 8008596:	d102      	bne.n	800859e <_printf_float+0x29e>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	07d9      	lsls	r1, r3, #31
 800859c:	d5d8      	bpl.n	8008550 <_printf_float+0x250>
 800859e:	ee18 3a10 	vmov	r3, s16
 80085a2:	4652      	mov	r2, sl
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f af09 	beq.w	80083c2 <_printf_float+0xc2>
 80085b0:	f04f 0900 	mov.w	r9, #0
 80085b4:	f104 0a1a 	add.w	sl, r4, #26
 80085b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ba:	425b      	negs	r3, r3
 80085bc:	454b      	cmp	r3, r9
 80085be:	dc01      	bgt.n	80085c4 <_printf_float+0x2c4>
 80085c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c2:	e792      	b.n	80084ea <_printf_float+0x1ea>
 80085c4:	2301      	movs	r3, #1
 80085c6:	4652      	mov	r2, sl
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b8      	blx	r7
 80085ce:	3001      	adds	r0, #1
 80085d0:	f43f aef7 	beq.w	80083c2 <_printf_float+0xc2>
 80085d4:	f109 0901 	add.w	r9, r9, #1
 80085d8:	e7ee      	b.n	80085b8 <_printf_float+0x2b8>
 80085da:	bf00      	nop
 80085dc:	7fefffff 	.word	0x7fefffff
 80085e0:	0800df94 	.word	0x0800df94
 80085e4:	0800df98 	.word	0x0800df98
 80085e8:	0800dfa0 	.word	0x0800dfa0
 80085ec:	0800df9c 	.word	0x0800df9c
 80085f0:	0800dfa4 	.word	0x0800dfa4
 80085f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085f8:	429a      	cmp	r2, r3
 80085fa:	bfa8      	it	ge
 80085fc:	461a      	movge	r2, r3
 80085fe:	2a00      	cmp	r2, #0
 8008600:	4691      	mov	r9, r2
 8008602:	dc37      	bgt.n	8008674 <_printf_float+0x374>
 8008604:	f04f 0b00 	mov.w	fp, #0
 8008608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800860c:	f104 021a 	add.w	r2, r4, #26
 8008610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008612:	9305      	str	r3, [sp, #20]
 8008614:	eba3 0309 	sub.w	r3, r3, r9
 8008618:	455b      	cmp	r3, fp
 800861a:	dc33      	bgt.n	8008684 <_printf_float+0x384>
 800861c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008620:	429a      	cmp	r2, r3
 8008622:	db3b      	blt.n	800869c <_printf_float+0x39c>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	07da      	lsls	r2, r3, #31
 8008628:	d438      	bmi.n	800869c <_printf_float+0x39c>
 800862a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800862c:	9a05      	ldr	r2, [sp, #20]
 800862e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008630:	1a9a      	subs	r2, r3, r2
 8008632:	eba3 0901 	sub.w	r9, r3, r1
 8008636:	4591      	cmp	r9, r2
 8008638:	bfa8      	it	ge
 800863a:	4691      	movge	r9, r2
 800863c:	f1b9 0f00 	cmp.w	r9, #0
 8008640:	dc35      	bgt.n	80086ae <_printf_float+0x3ae>
 8008642:	f04f 0800 	mov.w	r8, #0
 8008646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800864a:	f104 0a1a 	add.w	sl, r4, #26
 800864e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008652:	1a9b      	subs	r3, r3, r2
 8008654:	eba3 0309 	sub.w	r3, r3, r9
 8008658:	4543      	cmp	r3, r8
 800865a:	f77f af79 	ble.w	8008550 <_printf_float+0x250>
 800865e:	2301      	movs	r3, #1
 8008660:	4652      	mov	r2, sl
 8008662:	4631      	mov	r1, r6
 8008664:	4628      	mov	r0, r5
 8008666:	47b8      	blx	r7
 8008668:	3001      	adds	r0, #1
 800866a:	f43f aeaa 	beq.w	80083c2 <_printf_float+0xc2>
 800866e:	f108 0801 	add.w	r8, r8, #1
 8008672:	e7ec      	b.n	800864e <_printf_float+0x34e>
 8008674:	4613      	mov	r3, r2
 8008676:	4631      	mov	r1, r6
 8008678:	4642      	mov	r2, r8
 800867a:	4628      	mov	r0, r5
 800867c:	47b8      	blx	r7
 800867e:	3001      	adds	r0, #1
 8008680:	d1c0      	bne.n	8008604 <_printf_float+0x304>
 8008682:	e69e      	b.n	80083c2 <_printf_float+0xc2>
 8008684:	2301      	movs	r3, #1
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	9205      	str	r2, [sp, #20]
 800868c:	47b8      	blx	r7
 800868e:	3001      	adds	r0, #1
 8008690:	f43f ae97 	beq.w	80083c2 <_printf_float+0xc2>
 8008694:	9a05      	ldr	r2, [sp, #20]
 8008696:	f10b 0b01 	add.w	fp, fp, #1
 800869a:	e7b9      	b.n	8008610 <_printf_float+0x310>
 800869c:	ee18 3a10 	vmov	r3, s16
 80086a0:	4652      	mov	r2, sl
 80086a2:	4631      	mov	r1, r6
 80086a4:	4628      	mov	r0, r5
 80086a6:	47b8      	blx	r7
 80086a8:	3001      	adds	r0, #1
 80086aa:	d1be      	bne.n	800862a <_printf_float+0x32a>
 80086ac:	e689      	b.n	80083c2 <_printf_float+0xc2>
 80086ae:	9a05      	ldr	r2, [sp, #20]
 80086b0:	464b      	mov	r3, r9
 80086b2:	4442      	add	r2, r8
 80086b4:	4631      	mov	r1, r6
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	d1c1      	bne.n	8008642 <_printf_float+0x342>
 80086be:	e680      	b.n	80083c2 <_printf_float+0xc2>
 80086c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086c2:	2a01      	cmp	r2, #1
 80086c4:	dc01      	bgt.n	80086ca <_printf_float+0x3ca>
 80086c6:	07db      	lsls	r3, r3, #31
 80086c8:	d538      	bpl.n	800873c <_printf_float+0x43c>
 80086ca:	2301      	movs	r3, #1
 80086cc:	4642      	mov	r2, r8
 80086ce:	4631      	mov	r1, r6
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b8      	blx	r7
 80086d4:	3001      	adds	r0, #1
 80086d6:	f43f ae74 	beq.w	80083c2 <_printf_float+0xc2>
 80086da:	ee18 3a10 	vmov	r3, s16
 80086de:	4652      	mov	r2, sl
 80086e0:	4631      	mov	r1, r6
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	f43f ae6b 	beq.w	80083c2 <_printf_float+0xc2>
 80086ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086f0:	2200      	movs	r2, #0
 80086f2:	2300      	movs	r3, #0
 80086f4:	f7f8 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80086f8:	b9d8      	cbnz	r0, 8008732 <_printf_float+0x432>
 80086fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086fc:	f108 0201 	add.w	r2, r8, #1
 8008700:	3b01      	subs	r3, #1
 8008702:	4631      	mov	r1, r6
 8008704:	4628      	mov	r0, r5
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	d10e      	bne.n	800872a <_printf_float+0x42a>
 800870c:	e659      	b.n	80083c2 <_printf_float+0xc2>
 800870e:	2301      	movs	r3, #1
 8008710:	4652      	mov	r2, sl
 8008712:	4631      	mov	r1, r6
 8008714:	4628      	mov	r0, r5
 8008716:	47b8      	blx	r7
 8008718:	3001      	adds	r0, #1
 800871a:	f43f ae52 	beq.w	80083c2 <_printf_float+0xc2>
 800871e:	f108 0801 	add.w	r8, r8, #1
 8008722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008724:	3b01      	subs	r3, #1
 8008726:	4543      	cmp	r3, r8
 8008728:	dcf1      	bgt.n	800870e <_printf_float+0x40e>
 800872a:	464b      	mov	r3, r9
 800872c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008730:	e6dc      	b.n	80084ec <_printf_float+0x1ec>
 8008732:	f04f 0800 	mov.w	r8, #0
 8008736:	f104 0a1a 	add.w	sl, r4, #26
 800873a:	e7f2      	b.n	8008722 <_printf_float+0x422>
 800873c:	2301      	movs	r3, #1
 800873e:	4642      	mov	r2, r8
 8008740:	e7df      	b.n	8008702 <_printf_float+0x402>
 8008742:	2301      	movs	r3, #1
 8008744:	464a      	mov	r2, r9
 8008746:	4631      	mov	r1, r6
 8008748:	4628      	mov	r0, r5
 800874a:	47b8      	blx	r7
 800874c:	3001      	adds	r0, #1
 800874e:	f43f ae38 	beq.w	80083c2 <_printf_float+0xc2>
 8008752:	f108 0801 	add.w	r8, r8, #1
 8008756:	68e3      	ldr	r3, [r4, #12]
 8008758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800875a:	1a5b      	subs	r3, r3, r1
 800875c:	4543      	cmp	r3, r8
 800875e:	dcf0      	bgt.n	8008742 <_printf_float+0x442>
 8008760:	e6fa      	b.n	8008558 <_printf_float+0x258>
 8008762:	f04f 0800 	mov.w	r8, #0
 8008766:	f104 0919 	add.w	r9, r4, #25
 800876a:	e7f4      	b.n	8008756 <_printf_float+0x456>

0800876c <_printf_common>:
 800876c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008770:	4616      	mov	r6, r2
 8008772:	4699      	mov	r9, r3
 8008774:	688a      	ldr	r2, [r1, #8]
 8008776:	690b      	ldr	r3, [r1, #16]
 8008778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800877c:	4293      	cmp	r3, r2
 800877e:	bfb8      	it	lt
 8008780:	4613      	movlt	r3, r2
 8008782:	6033      	str	r3, [r6, #0]
 8008784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008788:	4607      	mov	r7, r0
 800878a:	460c      	mov	r4, r1
 800878c:	b10a      	cbz	r2, 8008792 <_printf_common+0x26>
 800878e:	3301      	adds	r3, #1
 8008790:	6033      	str	r3, [r6, #0]
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	0699      	lsls	r1, r3, #26
 8008796:	bf42      	ittt	mi
 8008798:	6833      	ldrmi	r3, [r6, #0]
 800879a:	3302      	addmi	r3, #2
 800879c:	6033      	strmi	r3, [r6, #0]
 800879e:	6825      	ldr	r5, [r4, #0]
 80087a0:	f015 0506 	ands.w	r5, r5, #6
 80087a4:	d106      	bne.n	80087b4 <_printf_common+0x48>
 80087a6:	f104 0a19 	add.w	sl, r4, #25
 80087aa:	68e3      	ldr	r3, [r4, #12]
 80087ac:	6832      	ldr	r2, [r6, #0]
 80087ae:	1a9b      	subs	r3, r3, r2
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	dc26      	bgt.n	8008802 <_printf_common+0x96>
 80087b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087b8:	1e13      	subs	r3, r2, #0
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	bf18      	it	ne
 80087be:	2301      	movne	r3, #1
 80087c0:	0692      	lsls	r2, r2, #26
 80087c2:	d42b      	bmi.n	800881c <_printf_common+0xb0>
 80087c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087c8:	4649      	mov	r1, r9
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c0      	blx	r8
 80087ce:	3001      	adds	r0, #1
 80087d0:	d01e      	beq.n	8008810 <_printf_common+0xa4>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	68e5      	ldr	r5, [r4, #12]
 80087d6:	6832      	ldr	r2, [r6, #0]
 80087d8:	f003 0306 	and.w	r3, r3, #6
 80087dc:	2b04      	cmp	r3, #4
 80087de:	bf08      	it	eq
 80087e0:	1aad      	subeq	r5, r5, r2
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	6922      	ldr	r2, [r4, #16]
 80087e6:	bf0c      	ite	eq
 80087e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087ec:	2500      	movne	r5, #0
 80087ee:	4293      	cmp	r3, r2
 80087f0:	bfc4      	itt	gt
 80087f2:	1a9b      	subgt	r3, r3, r2
 80087f4:	18ed      	addgt	r5, r5, r3
 80087f6:	2600      	movs	r6, #0
 80087f8:	341a      	adds	r4, #26
 80087fa:	42b5      	cmp	r5, r6
 80087fc:	d11a      	bne.n	8008834 <_printf_common+0xc8>
 80087fe:	2000      	movs	r0, #0
 8008800:	e008      	b.n	8008814 <_printf_common+0xa8>
 8008802:	2301      	movs	r3, #1
 8008804:	4652      	mov	r2, sl
 8008806:	4649      	mov	r1, r9
 8008808:	4638      	mov	r0, r7
 800880a:	47c0      	blx	r8
 800880c:	3001      	adds	r0, #1
 800880e:	d103      	bne.n	8008818 <_printf_common+0xac>
 8008810:	f04f 30ff 	mov.w	r0, #4294967295
 8008814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008818:	3501      	adds	r5, #1
 800881a:	e7c6      	b.n	80087aa <_printf_common+0x3e>
 800881c:	18e1      	adds	r1, r4, r3
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	2030      	movs	r0, #48	; 0x30
 8008822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008826:	4422      	add	r2, r4
 8008828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800882c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008830:	3302      	adds	r3, #2
 8008832:	e7c7      	b.n	80087c4 <_printf_common+0x58>
 8008834:	2301      	movs	r3, #1
 8008836:	4622      	mov	r2, r4
 8008838:	4649      	mov	r1, r9
 800883a:	4638      	mov	r0, r7
 800883c:	47c0      	blx	r8
 800883e:	3001      	adds	r0, #1
 8008840:	d0e6      	beq.n	8008810 <_printf_common+0xa4>
 8008842:	3601      	adds	r6, #1
 8008844:	e7d9      	b.n	80087fa <_printf_common+0x8e>
	...

08008848 <_printf_i>:
 8008848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800884c:	7e0f      	ldrb	r7, [r1, #24]
 800884e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008850:	2f78      	cmp	r7, #120	; 0x78
 8008852:	4691      	mov	r9, r2
 8008854:	4680      	mov	r8, r0
 8008856:	460c      	mov	r4, r1
 8008858:	469a      	mov	sl, r3
 800885a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800885e:	d807      	bhi.n	8008870 <_printf_i+0x28>
 8008860:	2f62      	cmp	r7, #98	; 0x62
 8008862:	d80a      	bhi.n	800887a <_printf_i+0x32>
 8008864:	2f00      	cmp	r7, #0
 8008866:	f000 80d8 	beq.w	8008a1a <_printf_i+0x1d2>
 800886a:	2f58      	cmp	r7, #88	; 0x58
 800886c:	f000 80a3 	beq.w	80089b6 <_printf_i+0x16e>
 8008870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008878:	e03a      	b.n	80088f0 <_printf_i+0xa8>
 800887a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800887e:	2b15      	cmp	r3, #21
 8008880:	d8f6      	bhi.n	8008870 <_printf_i+0x28>
 8008882:	a101      	add	r1, pc, #4	; (adr r1, 8008888 <_printf_i+0x40>)
 8008884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008888:	080088e1 	.word	0x080088e1
 800888c:	080088f5 	.word	0x080088f5
 8008890:	08008871 	.word	0x08008871
 8008894:	08008871 	.word	0x08008871
 8008898:	08008871 	.word	0x08008871
 800889c:	08008871 	.word	0x08008871
 80088a0:	080088f5 	.word	0x080088f5
 80088a4:	08008871 	.word	0x08008871
 80088a8:	08008871 	.word	0x08008871
 80088ac:	08008871 	.word	0x08008871
 80088b0:	08008871 	.word	0x08008871
 80088b4:	08008a01 	.word	0x08008a01
 80088b8:	08008925 	.word	0x08008925
 80088bc:	080089e3 	.word	0x080089e3
 80088c0:	08008871 	.word	0x08008871
 80088c4:	08008871 	.word	0x08008871
 80088c8:	08008a23 	.word	0x08008a23
 80088cc:	08008871 	.word	0x08008871
 80088d0:	08008925 	.word	0x08008925
 80088d4:	08008871 	.word	0x08008871
 80088d8:	08008871 	.word	0x08008871
 80088dc:	080089eb 	.word	0x080089eb
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	602a      	str	r2, [r5, #0]
 80088e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088f0:	2301      	movs	r3, #1
 80088f2:	e0a3      	b.n	8008a3c <_printf_i+0x1f4>
 80088f4:	6820      	ldr	r0, [r4, #0]
 80088f6:	6829      	ldr	r1, [r5, #0]
 80088f8:	0606      	lsls	r6, r0, #24
 80088fa:	f101 0304 	add.w	r3, r1, #4
 80088fe:	d50a      	bpl.n	8008916 <_printf_i+0xce>
 8008900:	680e      	ldr	r6, [r1, #0]
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	2e00      	cmp	r6, #0
 8008906:	da03      	bge.n	8008910 <_printf_i+0xc8>
 8008908:	232d      	movs	r3, #45	; 0x2d
 800890a:	4276      	negs	r6, r6
 800890c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008910:	485e      	ldr	r0, [pc, #376]	; (8008a8c <_printf_i+0x244>)
 8008912:	230a      	movs	r3, #10
 8008914:	e019      	b.n	800894a <_printf_i+0x102>
 8008916:	680e      	ldr	r6, [r1, #0]
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800891e:	bf18      	it	ne
 8008920:	b236      	sxthne	r6, r6
 8008922:	e7ef      	b.n	8008904 <_printf_i+0xbc>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	6820      	ldr	r0, [r4, #0]
 8008928:	1d19      	adds	r1, r3, #4
 800892a:	6029      	str	r1, [r5, #0]
 800892c:	0601      	lsls	r1, r0, #24
 800892e:	d501      	bpl.n	8008934 <_printf_i+0xec>
 8008930:	681e      	ldr	r6, [r3, #0]
 8008932:	e002      	b.n	800893a <_printf_i+0xf2>
 8008934:	0646      	lsls	r6, r0, #25
 8008936:	d5fb      	bpl.n	8008930 <_printf_i+0xe8>
 8008938:	881e      	ldrh	r6, [r3, #0]
 800893a:	4854      	ldr	r0, [pc, #336]	; (8008a8c <_printf_i+0x244>)
 800893c:	2f6f      	cmp	r7, #111	; 0x6f
 800893e:	bf0c      	ite	eq
 8008940:	2308      	moveq	r3, #8
 8008942:	230a      	movne	r3, #10
 8008944:	2100      	movs	r1, #0
 8008946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800894a:	6865      	ldr	r5, [r4, #4]
 800894c:	60a5      	str	r5, [r4, #8]
 800894e:	2d00      	cmp	r5, #0
 8008950:	bfa2      	ittt	ge
 8008952:	6821      	ldrge	r1, [r4, #0]
 8008954:	f021 0104 	bicge.w	r1, r1, #4
 8008958:	6021      	strge	r1, [r4, #0]
 800895a:	b90e      	cbnz	r6, 8008960 <_printf_i+0x118>
 800895c:	2d00      	cmp	r5, #0
 800895e:	d04d      	beq.n	80089fc <_printf_i+0x1b4>
 8008960:	4615      	mov	r5, r2
 8008962:	fbb6 f1f3 	udiv	r1, r6, r3
 8008966:	fb03 6711 	mls	r7, r3, r1, r6
 800896a:	5dc7      	ldrb	r7, [r0, r7]
 800896c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008970:	4637      	mov	r7, r6
 8008972:	42bb      	cmp	r3, r7
 8008974:	460e      	mov	r6, r1
 8008976:	d9f4      	bls.n	8008962 <_printf_i+0x11a>
 8008978:	2b08      	cmp	r3, #8
 800897a:	d10b      	bne.n	8008994 <_printf_i+0x14c>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07de      	lsls	r6, r3, #31
 8008980:	d508      	bpl.n	8008994 <_printf_i+0x14c>
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	6861      	ldr	r1, [r4, #4]
 8008986:	4299      	cmp	r1, r3
 8008988:	bfde      	ittt	le
 800898a:	2330      	movle	r3, #48	; 0x30
 800898c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008990:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008994:	1b52      	subs	r2, r2, r5
 8008996:	6122      	str	r2, [r4, #16]
 8008998:	f8cd a000 	str.w	sl, [sp]
 800899c:	464b      	mov	r3, r9
 800899e:	aa03      	add	r2, sp, #12
 80089a0:	4621      	mov	r1, r4
 80089a2:	4640      	mov	r0, r8
 80089a4:	f7ff fee2 	bl	800876c <_printf_common>
 80089a8:	3001      	adds	r0, #1
 80089aa:	d14c      	bne.n	8008a46 <_printf_i+0x1fe>
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	b004      	add	sp, #16
 80089b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b6:	4835      	ldr	r0, [pc, #212]	; (8008a8c <_printf_i+0x244>)
 80089b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089bc:	6829      	ldr	r1, [r5, #0]
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80089c4:	6029      	str	r1, [r5, #0]
 80089c6:	061d      	lsls	r5, r3, #24
 80089c8:	d514      	bpl.n	80089f4 <_printf_i+0x1ac>
 80089ca:	07df      	lsls	r7, r3, #31
 80089cc:	bf44      	itt	mi
 80089ce:	f043 0320 	orrmi.w	r3, r3, #32
 80089d2:	6023      	strmi	r3, [r4, #0]
 80089d4:	b91e      	cbnz	r6, 80089de <_printf_i+0x196>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f023 0320 	bic.w	r3, r3, #32
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	2310      	movs	r3, #16
 80089e0:	e7b0      	b.n	8008944 <_printf_i+0xfc>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	f043 0320 	orr.w	r3, r3, #32
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	2378      	movs	r3, #120	; 0x78
 80089ec:	4828      	ldr	r0, [pc, #160]	; (8008a90 <_printf_i+0x248>)
 80089ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089f2:	e7e3      	b.n	80089bc <_printf_i+0x174>
 80089f4:	0659      	lsls	r1, r3, #25
 80089f6:	bf48      	it	mi
 80089f8:	b2b6      	uxthmi	r6, r6
 80089fa:	e7e6      	b.n	80089ca <_printf_i+0x182>
 80089fc:	4615      	mov	r5, r2
 80089fe:	e7bb      	b.n	8008978 <_printf_i+0x130>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	6826      	ldr	r6, [r4, #0]
 8008a04:	6961      	ldr	r1, [r4, #20]
 8008a06:	1d18      	adds	r0, r3, #4
 8008a08:	6028      	str	r0, [r5, #0]
 8008a0a:	0635      	lsls	r5, r6, #24
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	d501      	bpl.n	8008a14 <_printf_i+0x1cc>
 8008a10:	6019      	str	r1, [r3, #0]
 8008a12:	e002      	b.n	8008a1a <_printf_i+0x1d2>
 8008a14:	0670      	lsls	r0, r6, #25
 8008a16:	d5fb      	bpl.n	8008a10 <_printf_i+0x1c8>
 8008a18:	8019      	strh	r1, [r3, #0]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6123      	str	r3, [r4, #16]
 8008a1e:	4615      	mov	r5, r2
 8008a20:	e7ba      	b.n	8008998 <_printf_i+0x150>
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	681d      	ldr	r5, [r3, #0]
 8008a2a:	6862      	ldr	r2, [r4, #4]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7f7 fbd6 	bl	80001e0 <memchr>
 8008a34:	b108      	cbz	r0, 8008a3a <_printf_i+0x1f2>
 8008a36:	1b40      	subs	r0, r0, r5
 8008a38:	6060      	str	r0, [r4, #4]
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	6123      	str	r3, [r4, #16]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a44:	e7a8      	b.n	8008998 <_printf_i+0x150>
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	462a      	mov	r2, r5
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	47d0      	blx	sl
 8008a50:	3001      	adds	r0, #1
 8008a52:	d0ab      	beq.n	80089ac <_printf_i+0x164>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	079b      	lsls	r3, r3, #30
 8008a58:	d413      	bmi.n	8008a82 <_printf_i+0x23a>
 8008a5a:	68e0      	ldr	r0, [r4, #12]
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	4298      	cmp	r0, r3
 8008a60:	bfb8      	it	lt
 8008a62:	4618      	movlt	r0, r3
 8008a64:	e7a4      	b.n	80089b0 <_printf_i+0x168>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	47d0      	blx	sl
 8008a70:	3001      	adds	r0, #1
 8008a72:	d09b      	beq.n	80089ac <_printf_i+0x164>
 8008a74:	3501      	adds	r5, #1
 8008a76:	68e3      	ldr	r3, [r4, #12]
 8008a78:	9903      	ldr	r1, [sp, #12]
 8008a7a:	1a5b      	subs	r3, r3, r1
 8008a7c:	42ab      	cmp	r3, r5
 8008a7e:	dcf2      	bgt.n	8008a66 <_printf_i+0x21e>
 8008a80:	e7eb      	b.n	8008a5a <_printf_i+0x212>
 8008a82:	2500      	movs	r5, #0
 8008a84:	f104 0619 	add.w	r6, r4, #25
 8008a88:	e7f5      	b.n	8008a76 <_printf_i+0x22e>
 8008a8a:	bf00      	nop
 8008a8c:	0800dfa6 	.word	0x0800dfa6
 8008a90:	0800dfb7 	.word	0x0800dfb7

08008a94 <siprintf>:
 8008a94:	b40e      	push	{r1, r2, r3}
 8008a96:	b500      	push	{lr}
 8008a98:	b09c      	sub	sp, #112	; 0x70
 8008a9a:	ab1d      	add	r3, sp, #116	; 0x74
 8008a9c:	9002      	str	r0, [sp, #8]
 8008a9e:	9006      	str	r0, [sp, #24]
 8008aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008aa4:	4809      	ldr	r0, [pc, #36]	; (8008acc <siprintf+0x38>)
 8008aa6:	9107      	str	r1, [sp, #28]
 8008aa8:	9104      	str	r1, [sp, #16]
 8008aaa:	4909      	ldr	r1, [pc, #36]	; (8008ad0 <siprintf+0x3c>)
 8008aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab0:	9105      	str	r1, [sp, #20]
 8008ab2:	6800      	ldr	r0, [r0, #0]
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	a902      	add	r1, sp, #8
 8008ab8:	f001 fb78 	bl	800a1ac <_svfiprintf_r>
 8008abc:	9b02      	ldr	r3, [sp, #8]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	b01c      	add	sp, #112	; 0x70
 8008ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ac8:	b003      	add	sp, #12
 8008aca:	4770      	bx	lr
 8008acc:	20000014 	.word	0x20000014
 8008ad0:	ffff0208 	.word	0xffff0208

08008ad4 <quorem>:
 8008ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	6903      	ldr	r3, [r0, #16]
 8008ada:	690c      	ldr	r4, [r1, #16]
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	4607      	mov	r7, r0
 8008ae0:	f2c0 8081 	blt.w	8008be6 <quorem+0x112>
 8008ae4:	3c01      	subs	r4, #1
 8008ae6:	f101 0814 	add.w	r8, r1, #20
 8008aea:	f100 0514 	add.w	r5, r0, #20
 8008aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008af2:	9301      	str	r3, [sp, #4]
 8008af4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008afc:	3301      	adds	r3, #1
 8008afe:	429a      	cmp	r2, r3
 8008b00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b08:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b0c:	d331      	bcc.n	8008b72 <quorem+0x9e>
 8008b0e:	f04f 0e00 	mov.w	lr, #0
 8008b12:	4640      	mov	r0, r8
 8008b14:	46ac      	mov	ip, r5
 8008b16:	46f2      	mov	sl, lr
 8008b18:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b1c:	b293      	uxth	r3, r2
 8008b1e:	fb06 e303 	mla	r3, r6, r3, lr
 8008b22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	ebaa 0303 	sub.w	r3, sl, r3
 8008b2c:	f8dc a000 	ldr.w	sl, [ip]
 8008b30:	0c12      	lsrs	r2, r2, #16
 8008b32:	fa13 f38a 	uxtah	r3, r3, sl
 8008b36:	fb06 e202 	mla	r2, r6, r2, lr
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	9b00      	ldr	r3, [sp, #0]
 8008b3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b42:	b292      	uxth	r2, r2
 8008b44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b4c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b50:	4581      	cmp	r9, r0
 8008b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b56:	f84c 3b04 	str.w	r3, [ip], #4
 8008b5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b5e:	d2db      	bcs.n	8008b18 <quorem+0x44>
 8008b60:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b64:	b92b      	cbnz	r3, 8008b72 <quorem+0x9e>
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	3b04      	subs	r3, #4
 8008b6a:	429d      	cmp	r5, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	d32e      	bcc.n	8008bce <quorem+0xfa>
 8008b70:	613c      	str	r4, [r7, #16]
 8008b72:	4638      	mov	r0, r7
 8008b74:	f001 f8c6 	bl	8009d04 <__mcmp>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	db24      	blt.n	8008bc6 <quorem+0xf2>
 8008b7c:	3601      	adds	r6, #1
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f04f 0c00 	mov.w	ip, #0
 8008b84:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b88:	f8d0 e000 	ldr.w	lr, [r0]
 8008b8c:	b293      	uxth	r3, r2
 8008b8e:	ebac 0303 	sub.w	r3, ip, r3
 8008b92:	0c12      	lsrs	r2, r2, #16
 8008b94:	fa13 f38e 	uxtah	r3, r3, lr
 8008b98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ba6:	45c1      	cmp	r9, r8
 8008ba8:	f840 3b04 	str.w	r3, [r0], #4
 8008bac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bb0:	d2e8      	bcs.n	8008b84 <quorem+0xb0>
 8008bb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bba:	b922      	cbnz	r2, 8008bc6 <quorem+0xf2>
 8008bbc:	3b04      	subs	r3, #4
 8008bbe:	429d      	cmp	r5, r3
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	d30a      	bcc.n	8008bda <quorem+0x106>
 8008bc4:	613c      	str	r4, [r7, #16]
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	b003      	add	sp, #12
 8008bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	d1cc      	bne.n	8008b70 <quorem+0x9c>
 8008bd6:	3c01      	subs	r4, #1
 8008bd8:	e7c7      	b.n	8008b6a <quorem+0x96>
 8008bda:	6812      	ldr	r2, [r2, #0]
 8008bdc:	3b04      	subs	r3, #4
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	d1f0      	bne.n	8008bc4 <quorem+0xf0>
 8008be2:	3c01      	subs	r4, #1
 8008be4:	e7eb      	b.n	8008bbe <quorem+0xea>
 8008be6:	2000      	movs	r0, #0
 8008be8:	e7ee      	b.n	8008bc8 <quorem+0xf4>
 8008bea:	0000      	movs	r0, r0
 8008bec:	0000      	movs	r0, r0
	...

08008bf0 <_dtoa_r>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	ed2d 8b04 	vpush	{d8-d9}
 8008bf8:	ec57 6b10 	vmov	r6, r7, d0
 8008bfc:	b093      	sub	sp, #76	; 0x4c
 8008bfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c04:	9106      	str	r1, [sp, #24]
 8008c06:	ee10 aa10 	vmov	sl, s0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c10:	46bb      	mov	fp, r7
 8008c12:	b975      	cbnz	r5, 8008c32 <_dtoa_r+0x42>
 8008c14:	2010      	movs	r0, #16
 8008c16:	f000 fddd 	bl	80097d4 <malloc>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	6260      	str	r0, [r4, #36]	; 0x24
 8008c1e:	b920      	cbnz	r0, 8008c2a <_dtoa_r+0x3a>
 8008c20:	4ba7      	ldr	r3, [pc, #668]	; (8008ec0 <_dtoa_r+0x2d0>)
 8008c22:	21ea      	movs	r1, #234	; 0xea
 8008c24:	48a7      	ldr	r0, [pc, #668]	; (8008ec4 <_dtoa_r+0x2d4>)
 8008c26:	f001 fbd1 	bl	800a3cc <__assert_func>
 8008c2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c2e:	6005      	str	r5, [r0, #0]
 8008c30:	60c5      	str	r5, [r0, #12]
 8008c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c34:	6819      	ldr	r1, [r3, #0]
 8008c36:	b151      	cbz	r1, 8008c4e <_dtoa_r+0x5e>
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	604a      	str	r2, [r1, #4]
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4093      	lsls	r3, r2
 8008c40:	608b      	str	r3, [r1, #8]
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fe1c 	bl	8009880 <_Bfree>
 8008c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	1e3b      	subs	r3, r7, #0
 8008c50:	bfaa      	itet	ge
 8008c52:	2300      	movge	r3, #0
 8008c54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c58:	f8c8 3000 	strge.w	r3, [r8]
 8008c5c:	4b9a      	ldr	r3, [pc, #616]	; (8008ec8 <_dtoa_r+0x2d8>)
 8008c5e:	bfbc      	itt	lt
 8008c60:	2201      	movlt	r2, #1
 8008c62:	f8c8 2000 	strlt.w	r2, [r8]
 8008c66:	ea33 030b 	bics.w	r3, r3, fp
 8008c6a:	d11b      	bne.n	8008ca4 <_dtoa_r+0xb4>
 8008c6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c78:	4333      	orrs	r3, r6
 8008c7a:	f000 8592 	beq.w	80097a2 <_dtoa_r+0xbb2>
 8008c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c80:	b963      	cbnz	r3, 8008c9c <_dtoa_r+0xac>
 8008c82:	4b92      	ldr	r3, [pc, #584]	; (8008ecc <_dtoa_r+0x2dc>)
 8008c84:	e022      	b.n	8008ccc <_dtoa_r+0xdc>
 8008c86:	4b92      	ldr	r3, [pc, #584]	; (8008ed0 <_dtoa_r+0x2e0>)
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	9801      	ldr	r0, [sp, #4]
 8008c92:	b013      	add	sp, #76	; 0x4c
 8008c94:	ecbd 8b04 	vpop	{d8-d9}
 8008c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9c:	4b8b      	ldr	r3, [pc, #556]	; (8008ecc <_dtoa_r+0x2dc>)
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	3303      	adds	r3, #3
 8008ca2:	e7f3      	b.n	8008c8c <_dtoa_r+0x9c>
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	4650      	mov	r0, sl
 8008caa:	4659      	mov	r1, fp
 8008cac:	f7f7 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cb0:	ec4b ab19 	vmov	d9, sl, fp
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	b158      	cbz	r0, 8008cd0 <_dtoa_r+0xe0>
 8008cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cba:	2301      	movs	r3, #1
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 856b 	beq.w	800979c <_dtoa_r+0xbac>
 8008cc6:	4883      	ldr	r0, [pc, #524]	; (8008ed4 <_dtoa_r+0x2e4>)
 8008cc8:	6018      	str	r0, [r3, #0]
 8008cca:	1e43      	subs	r3, r0, #1
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	e7df      	b.n	8008c90 <_dtoa_r+0xa0>
 8008cd0:	ec4b ab10 	vmov	d0, sl, fp
 8008cd4:	aa10      	add	r2, sp, #64	; 0x40
 8008cd6:	a911      	add	r1, sp, #68	; 0x44
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f001 f8b9 	bl	8009e50 <__d2b>
 8008cde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008ce2:	ee08 0a10 	vmov	s16, r0
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	f000 8084 	beq.w	8008df4 <_dtoa_r+0x204>
 8008cec:	ee19 3a90 	vmov	r3, s19
 8008cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cf8:	4656      	mov	r6, sl
 8008cfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d06:	4b74      	ldr	r3, [pc, #464]	; (8008ed8 <_dtoa_r+0x2e8>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	f7f7 fabb 	bl	8000288 <__aeabi_dsub>
 8008d12:	a365      	add	r3, pc, #404	; (adr r3, 8008ea8 <_dtoa_r+0x2b8>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fc6e 	bl	80005f8 <__aeabi_dmul>
 8008d1c:	a364      	add	r3, pc, #400	; (adr r3, 8008eb0 <_dtoa_r+0x2c0>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f7f7 fab3 	bl	800028c <__adddf3>
 8008d26:	4606      	mov	r6, r0
 8008d28:	4628      	mov	r0, r5
 8008d2a:	460f      	mov	r7, r1
 8008d2c:	f7f7 fbfa 	bl	8000524 <__aeabi_i2d>
 8008d30:	a361      	add	r3, pc, #388	; (adr r3, 8008eb8 <_dtoa_r+0x2c8>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 fc5f 	bl	80005f8 <__aeabi_dmul>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4630      	mov	r0, r6
 8008d40:	4639      	mov	r1, r7
 8008d42:	f7f7 faa3 	bl	800028c <__adddf3>
 8008d46:	4606      	mov	r6, r0
 8008d48:	460f      	mov	r7, r1
 8008d4a:	f7f7 ff05 	bl	8000b58 <__aeabi_d2iz>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	9000      	str	r0, [sp, #0]
 8008d52:	2300      	movs	r3, #0
 8008d54:	4630      	mov	r0, r6
 8008d56:	4639      	mov	r1, r7
 8008d58:	f7f7 fec0 	bl	8000adc <__aeabi_dcmplt>
 8008d5c:	b150      	cbz	r0, 8008d74 <_dtoa_r+0x184>
 8008d5e:	9800      	ldr	r0, [sp, #0]
 8008d60:	f7f7 fbe0 	bl	8000524 <__aeabi_i2d>
 8008d64:	4632      	mov	r2, r6
 8008d66:	463b      	mov	r3, r7
 8008d68:	f7f7 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d6c:	b910      	cbnz	r0, 8008d74 <_dtoa_r+0x184>
 8008d6e:	9b00      	ldr	r3, [sp, #0]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	9b00      	ldr	r3, [sp, #0]
 8008d76:	2b16      	cmp	r3, #22
 8008d78:	d85a      	bhi.n	8008e30 <_dtoa_r+0x240>
 8008d7a:	9a00      	ldr	r2, [sp, #0]
 8008d7c:	4b57      	ldr	r3, [pc, #348]	; (8008edc <_dtoa_r+0x2ec>)
 8008d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	ec51 0b19 	vmov	r0, r1, d9
 8008d8a:	f7f7 fea7 	bl	8000adc <__aeabi_dcmplt>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d050      	beq.n	8008e34 <_dtoa_r+0x244>
 8008d92:	9b00      	ldr	r3, [sp, #0]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d9e:	1b5d      	subs	r5, r3, r5
 8008da0:	1e6b      	subs	r3, r5, #1
 8008da2:	9305      	str	r3, [sp, #20]
 8008da4:	bf45      	ittet	mi
 8008da6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008daa:	9304      	strmi	r3, [sp, #16]
 8008dac:	2300      	movpl	r3, #0
 8008dae:	2300      	movmi	r3, #0
 8008db0:	bf4c      	ite	mi
 8008db2:	9305      	strmi	r3, [sp, #20]
 8008db4:	9304      	strpl	r3, [sp, #16]
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	db3d      	blt.n	8008e38 <_dtoa_r+0x248>
 8008dbc:	9b05      	ldr	r3, [sp, #20]
 8008dbe:	9a00      	ldr	r2, [sp, #0]
 8008dc0:	920a      	str	r2, [sp, #40]	; 0x28
 8008dc2:	4413      	add	r3, r2
 8008dc4:	9305      	str	r3, [sp, #20]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9307      	str	r3, [sp, #28]
 8008dca:	9b06      	ldr	r3, [sp, #24]
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	f200 8089 	bhi.w	8008ee4 <_dtoa_r+0x2f4>
 8008dd2:	2b05      	cmp	r3, #5
 8008dd4:	bfc4      	itt	gt
 8008dd6:	3b04      	subgt	r3, #4
 8008dd8:	9306      	strgt	r3, [sp, #24]
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	f1a3 0302 	sub.w	r3, r3, #2
 8008de0:	bfcc      	ite	gt
 8008de2:	2500      	movgt	r5, #0
 8008de4:	2501      	movle	r5, #1
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	f200 8087 	bhi.w	8008efa <_dtoa_r+0x30a>
 8008dec:	e8df f003 	tbb	[pc, r3]
 8008df0:	59383a2d 	.word	0x59383a2d
 8008df4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008df8:	441d      	add	r5, r3
 8008dfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dfe:	2b20      	cmp	r3, #32
 8008e00:	bfc1      	itttt	gt
 8008e02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e12:	bfda      	itte	le
 8008e14:	f1c3 0320 	rsble	r3, r3, #32
 8008e18:	fa06 f003 	lslle.w	r0, r6, r3
 8008e1c:	4318      	orrgt	r0, r3
 8008e1e:	f7f7 fb71 	bl	8000504 <__aeabi_ui2d>
 8008e22:	2301      	movs	r3, #1
 8008e24:	4606      	mov	r6, r0
 8008e26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e2a:	3d01      	subs	r5, #1
 8008e2c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e2e:	e76a      	b.n	8008d06 <_dtoa_r+0x116>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e7b2      	b.n	8008d9a <_dtoa_r+0x1aa>
 8008e34:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e36:	e7b1      	b.n	8008d9c <_dtoa_r+0x1ac>
 8008e38:	9b04      	ldr	r3, [sp, #16]
 8008e3a:	9a00      	ldr	r2, [sp, #0]
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	9304      	str	r3, [sp, #16]
 8008e40:	4253      	negs	r3, r2
 8008e42:	9307      	str	r3, [sp, #28]
 8008e44:	2300      	movs	r3, #0
 8008e46:	930a      	str	r3, [sp, #40]	; 0x28
 8008e48:	e7bf      	b.n	8008dca <_dtoa_r+0x1da>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9308      	str	r3, [sp, #32]
 8008e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dc55      	bgt.n	8008f00 <_dtoa_r+0x310>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5e:	e00c      	b.n	8008e7a <_dtoa_r+0x28a>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e7f3      	b.n	8008e4c <_dtoa_r+0x25c>
 8008e64:	2300      	movs	r3, #0
 8008e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e68:	9308      	str	r3, [sp, #32]
 8008e6a:	9b00      	ldr	r3, [sp, #0]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	3301      	adds	r3, #1
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	9303      	str	r3, [sp, #12]
 8008e76:	bfb8      	it	lt
 8008e78:	2301      	movlt	r3, #1
 8008e7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	6042      	str	r2, [r0, #4]
 8008e80:	2204      	movs	r2, #4
 8008e82:	f102 0614 	add.w	r6, r2, #20
 8008e86:	429e      	cmp	r6, r3
 8008e88:	6841      	ldr	r1, [r0, #4]
 8008e8a:	d93d      	bls.n	8008f08 <_dtoa_r+0x318>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 fcb7 	bl	8009800 <_Balloc>
 8008e92:	9001      	str	r0, [sp, #4]
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d13b      	bne.n	8008f10 <_dtoa_r+0x320>
 8008e98:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <_dtoa_r+0x2f0>)
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ea0:	e6c0      	b.n	8008c24 <_dtoa_r+0x34>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e7df      	b.n	8008e66 <_dtoa_r+0x276>
 8008ea6:	bf00      	nop
 8008ea8:	636f4361 	.word	0x636f4361
 8008eac:	3fd287a7 	.word	0x3fd287a7
 8008eb0:	8b60c8b3 	.word	0x8b60c8b3
 8008eb4:	3fc68a28 	.word	0x3fc68a28
 8008eb8:	509f79fb 	.word	0x509f79fb
 8008ebc:	3fd34413 	.word	0x3fd34413
 8008ec0:	0800dfd5 	.word	0x0800dfd5
 8008ec4:	0800dfec 	.word	0x0800dfec
 8008ec8:	7ff00000 	.word	0x7ff00000
 8008ecc:	0800dfd1 	.word	0x0800dfd1
 8008ed0:	0800dfc8 	.word	0x0800dfc8
 8008ed4:	0800dfa5 	.word	0x0800dfa5
 8008ed8:	3ff80000 	.word	0x3ff80000
 8008edc:	0800e0e0 	.word	0x0800e0e0
 8008ee0:	0800e047 	.word	0x0800e047
 8008ee4:	2501      	movs	r5, #1
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9306      	str	r3, [sp, #24]
 8008eea:	9508      	str	r5, [sp, #32]
 8008eec:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2312      	movs	r3, #18
 8008ef8:	e7b0      	b.n	8008e5c <_dtoa_r+0x26c>
 8008efa:	2301      	movs	r3, #1
 8008efc:	9308      	str	r3, [sp, #32]
 8008efe:	e7f5      	b.n	8008eec <_dtoa_r+0x2fc>
 8008f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f06:	e7b8      	b.n	8008e7a <_dtoa_r+0x28a>
 8008f08:	3101      	adds	r1, #1
 8008f0a:	6041      	str	r1, [r0, #4]
 8008f0c:	0052      	lsls	r2, r2, #1
 8008f0e:	e7b8      	b.n	8008e82 <_dtoa_r+0x292>
 8008f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f12:	9a01      	ldr	r2, [sp, #4]
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	2b0e      	cmp	r3, #14
 8008f1a:	f200 809d 	bhi.w	8009058 <_dtoa_r+0x468>
 8008f1e:	2d00      	cmp	r5, #0
 8008f20:	f000 809a 	beq.w	8009058 <_dtoa_r+0x468>
 8008f24:	9b00      	ldr	r3, [sp, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	dd32      	ble.n	8008f90 <_dtoa_r+0x3a0>
 8008f2a:	4ab7      	ldr	r2, [pc, #732]	; (8009208 <_dtoa_r+0x618>)
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	05d8      	lsls	r0, r3, #23
 8008f3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f40:	d516      	bpl.n	8008f70 <_dtoa_r+0x380>
 8008f42:	4bb2      	ldr	r3, [pc, #712]	; (800920c <_dtoa_r+0x61c>)
 8008f44:	ec51 0b19 	vmov	r0, r1, d9
 8008f48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f4c:	f7f7 fc7e 	bl	800084c <__aeabi_ddiv>
 8008f50:	f007 070f 	and.w	r7, r7, #15
 8008f54:	4682      	mov	sl, r0
 8008f56:	468b      	mov	fp, r1
 8008f58:	2503      	movs	r5, #3
 8008f5a:	4eac      	ldr	r6, [pc, #688]	; (800920c <_dtoa_r+0x61c>)
 8008f5c:	b957      	cbnz	r7, 8008f74 <_dtoa_r+0x384>
 8008f5e:	4642      	mov	r2, r8
 8008f60:	464b      	mov	r3, r9
 8008f62:	4650      	mov	r0, sl
 8008f64:	4659      	mov	r1, fp
 8008f66:	f7f7 fc71 	bl	800084c <__aeabi_ddiv>
 8008f6a:	4682      	mov	sl, r0
 8008f6c:	468b      	mov	fp, r1
 8008f6e:	e028      	b.n	8008fc2 <_dtoa_r+0x3d2>
 8008f70:	2502      	movs	r5, #2
 8008f72:	e7f2      	b.n	8008f5a <_dtoa_r+0x36a>
 8008f74:	07f9      	lsls	r1, r7, #31
 8008f76:	d508      	bpl.n	8008f8a <_dtoa_r+0x39a>
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f80:	f7f7 fb3a 	bl	80005f8 <__aeabi_dmul>
 8008f84:	3501      	adds	r5, #1
 8008f86:	4680      	mov	r8, r0
 8008f88:	4689      	mov	r9, r1
 8008f8a:	107f      	asrs	r7, r7, #1
 8008f8c:	3608      	adds	r6, #8
 8008f8e:	e7e5      	b.n	8008f5c <_dtoa_r+0x36c>
 8008f90:	f000 809b 	beq.w	80090ca <_dtoa_r+0x4da>
 8008f94:	9b00      	ldr	r3, [sp, #0]
 8008f96:	4f9d      	ldr	r7, [pc, #628]	; (800920c <_dtoa_r+0x61c>)
 8008f98:	425e      	negs	r6, r3
 8008f9a:	4b9b      	ldr	r3, [pc, #620]	; (8009208 <_dtoa_r+0x618>)
 8008f9c:	f006 020f 	and.w	r2, r6, #15
 8008fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	ec51 0b19 	vmov	r0, r1, d9
 8008fac:	f7f7 fb24 	bl	80005f8 <__aeabi_dmul>
 8008fb0:	1136      	asrs	r6, r6, #4
 8008fb2:	4682      	mov	sl, r0
 8008fb4:	468b      	mov	fp, r1
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2502      	movs	r5, #2
 8008fba:	2e00      	cmp	r6, #0
 8008fbc:	d17a      	bne.n	80090b4 <_dtoa_r+0x4c4>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1d3      	bne.n	8008f6a <_dtoa_r+0x37a>
 8008fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 8082 	beq.w	80090ce <_dtoa_r+0x4de>
 8008fca:	4b91      	ldr	r3, [pc, #580]	; (8009210 <_dtoa_r+0x620>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	4650      	mov	r0, sl
 8008fd0:	4659      	mov	r1, fp
 8008fd2:	f7f7 fd83 	bl	8000adc <__aeabi_dcmplt>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d079      	beq.n	80090ce <_dtoa_r+0x4de>
 8008fda:	9b03      	ldr	r3, [sp, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d076      	beq.n	80090ce <_dtoa_r+0x4de>
 8008fe0:	9b02      	ldr	r3, [sp, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dd36      	ble.n	8009054 <_dtoa_r+0x464>
 8008fe6:	9b00      	ldr	r3, [sp, #0]
 8008fe8:	4650      	mov	r0, sl
 8008fea:	4659      	mov	r1, fp
 8008fec:	1e5f      	subs	r7, r3, #1
 8008fee:	2200      	movs	r2, #0
 8008ff0:	4b88      	ldr	r3, [pc, #544]	; (8009214 <_dtoa_r+0x624>)
 8008ff2:	f7f7 fb01 	bl	80005f8 <__aeabi_dmul>
 8008ff6:	9e02      	ldr	r6, [sp, #8]
 8008ff8:	4682      	mov	sl, r0
 8008ffa:	468b      	mov	fp, r1
 8008ffc:	3501      	adds	r5, #1
 8008ffe:	4628      	mov	r0, r5
 8009000:	f7f7 fa90 	bl	8000524 <__aeabi_i2d>
 8009004:	4652      	mov	r2, sl
 8009006:	465b      	mov	r3, fp
 8009008:	f7f7 faf6 	bl	80005f8 <__aeabi_dmul>
 800900c:	4b82      	ldr	r3, [pc, #520]	; (8009218 <_dtoa_r+0x628>)
 800900e:	2200      	movs	r2, #0
 8009010:	f7f7 f93c 	bl	800028c <__adddf3>
 8009014:	46d0      	mov	r8, sl
 8009016:	46d9      	mov	r9, fp
 8009018:	4682      	mov	sl, r0
 800901a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800901e:	2e00      	cmp	r6, #0
 8009020:	d158      	bne.n	80090d4 <_dtoa_r+0x4e4>
 8009022:	4b7e      	ldr	r3, [pc, #504]	; (800921c <_dtoa_r+0x62c>)
 8009024:	2200      	movs	r2, #0
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f7f7 f92d 	bl	8000288 <__aeabi_dsub>
 800902e:	4652      	mov	r2, sl
 8009030:	465b      	mov	r3, fp
 8009032:	4680      	mov	r8, r0
 8009034:	4689      	mov	r9, r1
 8009036:	f7f7 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800903a:	2800      	cmp	r0, #0
 800903c:	f040 8295 	bne.w	800956a <_dtoa_r+0x97a>
 8009040:	4652      	mov	r2, sl
 8009042:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009046:	4640      	mov	r0, r8
 8009048:	4649      	mov	r1, r9
 800904a:	f7f7 fd47 	bl	8000adc <__aeabi_dcmplt>
 800904e:	2800      	cmp	r0, #0
 8009050:	f040 8289 	bne.w	8009566 <_dtoa_r+0x976>
 8009054:	ec5b ab19 	vmov	sl, fp, d9
 8009058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800905a:	2b00      	cmp	r3, #0
 800905c:	f2c0 8148 	blt.w	80092f0 <_dtoa_r+0x700>
 8009060:	9a00      	ldr	r2, [sp, #0]
 8009062:	2a0e      	cmp	r2, #14
 8009064:	f300 8144 	bgt.w	80092f0 <_dtoa_r+0x700>
 8009068:	4b67      	ldr	r3, [pc, #412]	; (8009208 <_dtoa_r+0x618>)
 800906a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800906e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	f280 80d5 	bge.w	8009224 <_dtoa_r+0x634>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	f300 80d1 	bgt.w	8009224 <_dtoa_r+0x634>
 8009082:	f040 826f 	bne.w	8009564 <_dtoa_r+0x974>
 8009086:	4b65      	ldr	r3, [pc, #404]	; (800921c <_dtoa_r+0x62c>)
 8009088:	2200      	movs	r2, #0
 800908a:	4640      	mov	r0, r8
 800908c:	4649      	mov	r1, r9
 800908e:	f7f7 fab3 	bl	80005f8 <__aeabi_dmul>
 8009092:	4652      	mov	r2, sl
 8009094:	465b      	mov	r3, fp
 8009096:	f7f7 fd35 	bl	8000b04 <__aeabi_dcmpge>
 800909a:	9e03      	ldr	r6, [sp, #12]
 800909c:	4637      	mov	r7, r6
 800909e:	2800      	cmp	r0, #0
 80090a0:	f040 8245 	bne.w	800952e <_dtoa_r+0x93e>
 80090a4:	9d01      	ldr	r5, [sp, #4]
 80090a6:	2331      	movs	r3, #49	; 0x31
 80090a8:	f805 3b01 	strb.w	r3, [r5], #1
 80090ac:	9b00      	ldr	r3, [sp, #0]
 80090ae:	3301      	adds	r3, #1
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	e240      	b.n	8009536 <_dtoa_r+0x946>
 80090b4:	07f2      	lsls	r2, r6, #31
 80090b6:	d505      	bpl.n	80090c4 <_dtoa_r+0x4d4>
 80090b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090bc:	f7f7 fa9c 	bl	80005f8 <__aeabi_dmul>
 80090c0:	3501      	adds	r5, #1
 80090c2:	2301      	movs	r3, #1
 80090c4:	1076      	asrs	r6, r6, #1
 80090c6:	3708      	adds	r7, #8
 80090c8:	e777      	b.n	8008fba <_dtoa_r+0x3ca>
 80090ca:	2502      	movs	r5, #2
 80090cc:	e779      	b.n	8008fc2 <_dtoa_r+0x3d2>
 80090ce:	9f00      	ldr	r7, [sp, #0]
 80090d0:	9e03      	ldr	r6, [sp, #12]
 80090d2:	e794      	b.n	8008ffe <_dtoa_r+0x40e>
 80090d4:	9901      	ldr	r1, [sp, #4]
 80090d6:	4b4c      	ldr	r3, [pc, #304]	; (8009208 <_dtoa_r+0x618>)
 80090d8:	4431      	add	r1, r6
 80090da:	910d      	str	r1, [sp, #52]	; 0x34
 80090dc:	9908      	ldr	r1, [sp, #32]
 80090de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d043      	beq.n	8009172 <_dtoa_r+0x582>
 80090ea:	494d      	ldr	r1, [pc, #308]	; (8009220 <_dtoa_r+0x630>)
 80090ec:	2000      	movs	r0, #0
 80090ee:	f7f7 fbad 	bl	800084c <__aeabi_ddiv>
 80090f2:	4652      	mov	r2, sl
 80090f4:	465b      	mov	r3, fp
 80090f6:	f7f7 f8c7 	bl	8000288 <__aeabi_dsub>
 80090fa:	9d01      	ldr	r5, [sp, #4]
 80090fc:	4682      	mov	sl, r0
 80090fe:	468b      	mov	fp, r1
 8009100:	4649      	mov	r1, r9
 8009102:	4640      	mov	r0, r8
 8009104:	f7f7 fd28 	bl	8000b58 <__aeabi_d2iz>
 8009108:	4606      	mov	r6, r0
 800910a:	f7f7 fa0b 	bl	8000524 <__aeabi_i2d>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4640      	mov	r0, r8
 8009114:	4649      	mov	r1, r9
 8009116:	f7f7 f8b7 	bl	8000288 <__aeabi_dsub>
 800911a:	3630      	adds	r6, #48	; 0x30
 800911c:	f805 6b01 	strb.w	r6, [r5], #1
 8009120:	4652      	mov	r2, sl
 8009122:	465b      	mov	r3, fp
 8009124:	4680      	mov	r8, r0
 8009126:	4689      	mov	r9, r1
 8009128:	f7f7 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800912c:	2800      	cmp	r0, #0
 800912e:	d163      	bne.n	80091f8 <_dtoa_r+0x608>
 8009130:	4642      	mov	r2, r8
 8009132:	464b      	mov	r3, r9
 8009134:	4936      	ldr	r1, [pc, #216]	; (8009210 <_dtoa_r+0x620>)
 8009136:	2000      	movs	r0, #0
 8009138:	f7f7 f8a6 	bl	8000288 <__aeabi_dsub>
 800913c:	4652      	mov	r2, sl
 800913e:	465b      	mov	r3, fp
 8009140:	f7f7 fccc 	bl	8000adc <__aeabi_dcmplt>
 8009144:	2800      	cmp	r0, #0
 8009146:	f040 80b5 	bne.w	80092b4 <_dtoa_r+0x6c4>
 800914a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800914c:	429d      	cmp	r5, r3
 800914e:	d081      	beq.n	8009054 <_dtoa_r+0x464>
 8009150:	4b30      	ldr	r3, [pc, #192]	; (8009214 <_dtoa_r+0x624>)
 8009152:	2200      	movs	r2, #0
 8009154:	4650      	mov	r0, sl
 8009156:	4659      	mov	r1, fp
 8009158:	f7f7 fa4e 	bl	80005f8 <__aeabi_dmul>
 800915c:	4b2d      	ldr	r3, [pc, #180]	; (8009214 <_dtoa_r+0x624>)
 800915e:	4682      	mov	sl, r0
 8009160:	468b      	mov	fp, r1
 8009162:	4640      	mov	r0, r8
 8009164:	4649      	mov	r1, r9
 8009166:	2200      	movs	r2, #0
 8009168:	f7f7 fa46 	bl	80005f8 <__aeabi_dmul>
 800916c:	4680      	mov	r8, r0
 800916e:	4689      	mov	r9, r1
 8009170:	e7c6      	b.n	8009100 <_dtoa_r+0x510>
 8009172:	4650      	mov	r0, sl
 8009174:	4659      	mov	r1, fp
 8009176:	f7f7 fa3f 	bl	80005f8 <__aeabi_dmul>
 800917a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800917c:	9d01      	ldr	r5, [sp, #4]
 800917e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009180:	4682      	mov	sl, r0
 8009182:	468b      	mov	fp, r1
 8009184:	4649      	mov	r1, r9
 8009186:	4640      	mov	r0, r8
 8009188:	f7f7 fce6 	bl	8000b58 <__aeabi_d2iz>
 800918c:	4606      	mov	r6, r0
 800918e:	f7f7 f9c9 	bl	8000524 <__aeabi_i2d>
 8009192:	3630      	adds	r6, #48	; 0x30
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4640      	mov	r0, r8
 800919a:	4649      	mov	r1, r9
 800919c:	f7f7 f874 	bl	8000288 <__aeabi_dsub>
 80091a0:	f805 6b01 	strb.w	r6, [r5], #1
 80091a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a6:	429d      	cmp	r5, r3
 80091a8:	4680      	mov	r8, r0
 80091aa:	4689      	mov	r9, r1
 80091ac:	f04f 0200 	mov.w	r2, #0
 80091b0:	d124      	bne.n	80091fc <_dtoa_r+0x60c>
 80091b2:	4b1b      	ldr	r3, [pc, #108]	; (8009220 <_dtoa_r+0x630>)
 80091b4:	4650      	mov	r0, sl
 80091b6:	4659      	mov	r1, fp
 80091b8:	f7f7 f868 	bl	800028c <__adddf3>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4640      	mov	r0, r8
 80091c2:	4649      	mov	r1, r9
 80091c4:	f7f7 fca8 	bl	8000b18 <__aeabi_dcmpgt>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d173      	bne.n	80092b4 <_dtoa_r+0x6c4>
 80091cc:	4652      	mov	r2, sl
 80091ce:	465b      	mov	r3, fp
 80091d0:	4913      	ldr	r1, [pc, #76]	; (8009220 <_dtoa_r+0x630>)
 80091d2:	2000      	movs	r0, #0
 80091d4:	f7f7 f858 	bl	8000288 <__aeabi_dsub>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4640      	mov	r0, r8
 80091de:	4649      	mov	r1, r9
 80091e0:	f7f7 fc7c 	bl	8000adc <__aeabi_dcmplt>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	f43f af35 	beq.w	8009054 <_dtoa_r+0x464>
 80091ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091ec:	1e6b      	subs	r3, r5, #1
 80091ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80091f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091f4:	2b30      	cmp	r3, #48	; 0x30
 80091f6:	d0f8      	beq.n	80091ea <_dtoa_r+0x5fa>
 80091f8:	9700      	str	r7, [sp, #0]
 80091fa:	e049      	b.n	8009290 <_dtoa_r+0x6a0>
 80091fc:	4b05      	ldr	r3, [pc, #20]	; (8009214 <_dtoa_r+0x624>)
 80091fe:	f7f7 f9fb 	bl	80005f8 <__aeabi_dmul>
 8009202:	4680      	mov	r8, r0
 8009204:	4689      	mov	r9, r1
 8009206:	e7bd      	b.n	8009184 <_dtoa_r+0x594>
 8009208:	0800e0e0 	.word	0x0800e0e0
 800920c:	0800e0b8 	.word	0x0800e0b8
 8009210:	3ff00000 	.word	0x3ff00000
 8009214:	40240000 	.word	0x40240000
 8009218:	401c0000 	.word	0x401c0000
 800921c:	40140000 	.word	0x40140000
 8009220:	3fe00000 	.word	0x3fe00000
 8009224:	9d01      	ldr	r5, [sp, #4]
 8009226:	4656      	mov	r6, sl
 8009228:	465f      	mov	r7, fp
 800922a:	4642      	mov	r2, r8
 800922c:	464b      	mov	r3, r9
 800922e:	4630      	mov	r0, r6
 8009230:	4639      	mov	r1, r7
 8009232:	f7f7 fb0b 	bl	800084c <__aeabi_ddiv>
 8009236:	f7f7 fc8f 	bl	8000b58 <__aeabi_d2iz>
 800923a:	4682      	mov	sl, r0
 800923c:	f7f7 f972 	bl	8000524 <__aeabi_i2d>
 8009240:	4642      	mov	r2, r8
 8009242:	464b      	mov	r3, r9
 8009244:	f7f7 f9d8 	bl	80005f8 <__aeabi_dmul>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4630      	mov	r0, r6
 800924e:	4639      	mov	r1, r7
 8009250:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009254:	f7f7 f818 	bl	8000288 <__aeabi_dsub>
 8009258:	f805 6b01 	strb.w	r6, [r5], #1
 800925c:	9e01      	ldr	r6, [sp, #4]
 800925e:	9f03      	ldr	r7, [sp, #12]
 8009260:	1bae      	subs	r6, r5, r6
 8009262:	42b7      	cmp	r7, r6
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	d135      	bne.n	80092d6 <_dtoa_r+0x6e6>
 800926a:	f7f7 f80f 	bl	800028c <__adddf3>
 800926e:	4642      	mov	r2, r8
 8009270:	464b      	mov	r3, r9
 8009272:	4606      	mov	r6, r0
 8009274:	460f      	mov	r7, r1
 8009276:	f7f7 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800927a:	b9d0      	cbnz	r0, 80092b2 <_dtoa_r+0x6c2>
 800927c:	4642      	mov	r2, r8
 800927e:	464b      	mov	r3, r9
 8009280:	4630      	mov	r0, r6
 8009282:	4639      	mov	r1, r7
 8009284:	f7f7 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 8009288:	b110      	cbz	r0, 8009290 <_dtoa_r+0x6a0>
 800928a:	f01a 0f01 	tst.w	sl, #1
 800928e:	d110      	bne.n	80092b2 <_dtoa_r+0x6c2>
 8009290:	4620      	mov	r0, r4
 8009292:	ee18 1a10 	vmov	r1, s16
 8009296:	f000 faf3 	bl	8009880 <_Bfree>
 800929a:	2300      	movs	r3, #0
 800929c:	9800      	ldr	r0, [sp, #0]
 800929e:	702b      	strb	r3, [r5, #0]
 80092a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092a2:	3001      	adds	r0, #1
 80092a4:	6018      	str	r0, [r3, #0]
 80092a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f43f acf1 	beq.w	8008c90 <_dtoa_r+0xa0>
 80092ae:	601d      	str	r5, [r3, #0]
 80092b0:	e4ee      	b.n	8008c90 <_dtoa_r+0xa0>
 80092b2:	9f00      	ldr	r7, [sp, #0]
 80092b4:	462b      	mov	r3, r5
 80092b6:	461d      	mov	r5, r3
 80092b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092bc:	2a39      	cmp	r2, #57	; 0x39
 80092be:	d106      	bne.n	80092ce <_dtoa_r+0x6de>
 80092c0:	9a01      	ldr	r2, [sp, #4]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d1f7      	bne.n	80092b6 <_dtoa_r+0x6c6>
 80092c6:	9901      	ldr	r1, [sp, #4]
 80092c8:	2230      	movs	r2, #48	; 0x30
 80092ca:	3701      	adds	r7, #1
 80092cc:	700a      	strb	r2, [r1, #0]
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	3201      	adds	r2, #1
 80092d2:	701a      	strb	r2, [r3, #0]
 80092d4:	e790      	b.n	80091f8 <_dtoa_r+0x608>
 80092d6:	4ba6      	ldr	r3, [pc, #664]	; (8009570 <_dtoa_r+0x980>)
 80092d8:	2200      	movs	r2, #0
 80092da:	f7f7 f98d 	bl	80005f8 <__aeabi_dmul>
 80092de:	2200      	movs	r2, #0
 80092e0:	2300      	movs	r3, #0
 80092e2:	4606      	mov	r6, r0
 80092e4:	460f      	mov	r7, r1
 80092e6:	f7f7 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d09d      	beq.n	800922a <_dtoa_r+0x63a>
 80092ee:	e7cf      	b.n	8009290 <_dtoa_r+0x6a0>
 80092f0:	9a08      	ldr	r2, [sp, #32]
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	f000 80d7 	beq.w	80094a6 <_dtoa_r+0x8b6>
 80092f8:	9a06      	ldr	r2, [sp, #24]
 80092fa:	2a01      	cmp	r2, #1
 80092fc:	f300 80ba 	bgt.w	8009474 <_dtoa_r+0x884>
 8009300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009302:	2a00      	cmp	r2, #0
 8009304:	f000 80b2 	beq.w	800946c <_dtoa_r+0x87c>
 8009308:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800930c:	9e07      	ldr	r6, [sp, #28]
 800930e:	9d04      	ldr	r5, [sp, #16]
 8009310:	9a04      	ldr	r2, [sp, #16]
 8009312:	441a      	add	r2, r3
 8009314:	9204      	str	r2, [sp, #16]
 8009316:	9a05      	ldr	r2, [sp, #20]
 8009318:	2101      	movs	r1, #1
 800931a:	441a      	add	r2, r3
 800931c:	4620      	mov	r0, r4
 800931e:	9205      	str	r2, [sp, #20]
 8009320:	f000 fb66 	bl	80099f0 <__i2b>
 8009324:	4607      	mov	r7, r0
 8009326:	2d00      	cmp	r5, #0
 8009328:	dd0c      	ble.n	8009344 <_dtoa_r+0x754>
 800932a:	9b05      	ldr	r3, [sp, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	dd09      	ble.n	8009344 <_dtoa_r+0x754>
 8009330:	42ab      	cmp	r3, r5
 8009332:	9a04      	ldr	r2, [sp, #16]
 8009334:	bfa8      	it	ge
 8009336:	462b      	movge	r3, r5
 8009338:	1ad2      	subs	r2, r2, r3
 800933a:	9204      	str	r2, [sp, #16]
 800933c:	9a05      	ldr	r2, [sp, #20]
 800933e:	1aed      	subs	r5, r5, r3
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	9305      	str	r3, [sp, #20]
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	b31b      	cbz	r3, 8009390 <_dtoa_r+0x7a0>
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 80af 	beq.w	80094ae <_dtoa_r+0x8be>
 8009350:	2e00      	cmp	r6, #0
 8009352:	dd13      	ble.n	800937c <_dtoa_r+0x78c>
 8009354:	4639      	mov	r1, r7
 8009356:	4632      	mov	r2, r6
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fc09 	bl	8009b70 <__pow5mult>
 800935e:	ee18 2a10 	vmov	r2, s16
 8009362:	4601      	mov	r1, r0
 8009364:	4607      	mov	r7, r0
 8009366:	4620      	mov	r0, r4
 8009368:	f000 fb58 	bl	8009a1c <__multiply>
 800936c:	ee18 1a10 	vmov	r1, s16
 8009370:	4680      	mov	r8, r0
 8009372:	4620      	mov	r0, r4
 8009374:	f000 fa84 	bl	8009880 <_Bfree>
 8009378:	ee08 8a10 	vmov	s16, r8
 800937c:	9b07      	ldr	r3, [sp, #28]
 800937e:	1b9a      	subs	r2, r3, r6
 8009380:	d006      	beq.n	8009390 <_dtoa_r+0x7a0>
 8009382:	ee18 1a10 	vmov	r1, s16
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fbf2 	bl	8009b70 <__pow5mult>
 800938c:	ee08 0a10 	vmov	s16, r0
 8009390:	2101      	movs	r1, #1
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fb2c 	bl	80099f0 <__i2b>
 8009398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800939a:	2b00      	cmp	r3, #0
 800939c:	4606      	mov	r6, r0
 800939e:	f340 8088 	ble.w	80094b2 <_dtoa_r+0x8c2>
 80093a2:	461a      	mov	r2, r3
 80093a4:	4601      	mov	r1, r0
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 fbe2 	bl	8009b70 <__pow5mult>
 80093ac:	9b06      	ldr	r3, [sp, #24]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	4606      	mov	r6, r0
 80093b2:	f340 8081 	ble.w	80094b8 <_dtoa_r+0x8c8>
 80093b6:	f04f 0800 	mov.w	r8, #0
 80093ba:	6933      	ldr	r3, [r6, #16]
 80093bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093c0:	6918      	ldr	r0, [r3, #16]
 80093c2:	f000 fac5 	bl	8009950 <__hi0bits>
 80093c6:	f1c0 0020 	rsb	r0, r0, #32
 80093ca:	9b05      	ldr	r3, [sp, #20]
 80093cc:	4418      	add	r0, r3
 80093ce:	f010 001f 	ands.w	r0, r0, #31
 80093d2:	f000 8092 	beq.w	80094fa <_dtoa_r+0x90a>
 80093d6:	f1c0 0320 	rsb	r3, r0, #32
 80093da:	2b04      	cmp	r3, #4
 80093dc:	f340 808a 	ble.w	80094f4 <_dtoa_r+0x904>
 80093e0:	f1c0 001c 	rsb	r0, r0, #28
 80093e4:	9b04      	ldr	r3, [sp, #16]
 80093e6:	4403      	add	r3, r0
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	9b05      	ldr	r3, [sp, #20]
 80093ec:	4403      	add	r3, r0
 80093ee:	4405      	add	r5, r0
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	dd07      	ble.n	8009408 <_dtoa_r+0x818>
 80093f8:	ee18 1a10 	vmov	r1, s16
 80093fc:	461a      	mov	r2, r3
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 fc10 	bl	8009c24 <__lshift>
 8009404:	ee08 0a10 	vmov	s16, r0
 8009408:	9b05      	ldr	r3, [sp, #20]
 800940a:	2b00      	cmp	r3, #0
 800940c:	dd05      	ble.n	800941a <_dtoa_r+0x82a>
 800940e:	4631      	mov	r1, r6
 8009410:	461a      	mov	r2, r3
 8009412:	4620      	mov	r0, r4
 8009414:	f000 fc06 	bl	8009c24 <__lshift>
 8009418:	4606      	mov	r6, r0
 800941a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d06e      	beq.n	80094fe <_dtoa_r+0x90e>
 8009420:	ee18 0a10 	vmov	r0, s16
 8009424:	4631      	mov	r1, r6
 8009426:	f000 fc6d 	bl	8009d04 <__mcmp>
 800942a:	2800      	cmp	r0, #0
 800942c:	da67      	bge.n	80094fe <_dtoa_r+0x90e>
 800942e:	9b00      	ldr	r3, [sp, #0]
 8009430:	3b01      	subs	r3, #1
 8009432:	ee18 1a10 	vmov	r1, s16
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	220a      	movs	r2, #10
 800943a:	2300      	movs	r3, #0
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fa41 	bl	80098c4 <__multadd>
 8009442:	9b08      	ldr	r3, [sp, #32]
 8009444:	ee08 0a10 	vmov	s16, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 81b1 	beq.w	80097b0 <_dtoa_r+0xbc0>
 800944e:	2300      	movs	r3, #0
 8009450:	4639      	mov	r1, r7
 8009452:	220a      	movs	r2, #10
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fa35 	bl	80098c4 <__multadd>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	4607      	mov	r7, r0
 8009460:	f300 808e 	bgt.w	8009580 <_dtoa_r+0x990>
 8009464:	9b06      	ldr	r3, [sp, #24]
 8009466:	2b02      	cmp	r3, #2
 8009468:	dc51      	bgt.n	800950e <_dtoa_r+0x91e>
 800946a:	e089      	b.n	8009580 <_dtoa_r+0x990>
 800946c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800946e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009472:	e74b      	b.n	800930c <_dtoa_r+0x71c>
 8009474:	9b03      	ldr	r3, [sp, #12]
 8009476:	1e5e      	subs	r6, r3, #1
 8009478:	9b07      	ldr	r3, [sp, #28]
 800947a:	42b3      	cmp	r3, r6
 800947c:	bfbf      	itttt	lt
 800947e:	9b07      	ldrlt	r3, [sp, #28]
 8009480:	9607      	strlt	r6, [sp, #28]
 8009482:	1af2      	sublt	r2, r6, r3
 8009484:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009486:	bfb6      	itet	lt
 8009488:	189b      	addlt	r3, r3, r2
 800948a:	1b9e      	subge	r6, r3, r6
 800948c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800948e:	9b03      	ldr	r3, [sp, #12]
 8009490:	bfb8      	it	lt
 8009492:	2600      	movlt	r6, #0
 8009494:	2b00      	cmp	r3, #0
 8009496:	bfb7      	itett	lt
 8009498:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800949c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094a0:	1a9d      	sublt	r5, r3, r2
 80094a2:	2300      	movlt	r3, #0
 80094a4:	e734      	b.n	8009310 <_dtoa_r+0x720>
 80094a6:	9e07      	ldr	r6, [sp, #28]
 80094a8:	9d04      	ldr	r5, [sp, #16]
 80094aa:	9f08      	ldr	r7, [sp, #32]
 80094ac:	e73b      	b.n	8009326 <_dtoa_r+0x736>
 80094ae:	9a07      	ldr	r2, [sp, #28]
 80094b0:	e767      	b.n	8009382 <_dtoa_r+0x792>
 80094b2:	9b06      	ldr	r3, [sp, #24]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	dc18      	bgt.n	80094ea <_dtoa_r+0x8fa>
 80094b8:	f1ba 0f00 	cmp.w	sl, #0
 80094bc:	d115      	bne.n	80094ea <_dtoa_r+0x8fa>
 80094be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094c2:	b993      	cbnz	r3, 80094ea <_dtoa_r+0x8fa>
 80094c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094c8:	0d1b      	lsrs	r3, r3, #20
 80094ca:	051b      	lsls	r3, r3, #20
 80094cc:	b183      	cbz	r3, 80094f0 <_dtoa_r+0x900>
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	3301      	adds	r3, #1
 80094d2:	9304      	str	r3, [sp, #16]
 80094d4:	9b05      	ldr	r3, [sp, #20]
 80094d6:	3301      	adds	r3, #1
 80094d8:	9305      	str	r3, [sp, #20]
 80094da:	f04f 0801 	mov.w	r8, #1
 80094de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f47f af6a 	bne.w	80093ba <_dtoa_r+0x7ca>
 80094e6:	2001      	movs	r0, #1
 80094e8:	e76f      	b.n	80093ca <_dtoa_r+0x7da>
 80094ea:	f04f 0800 	mov.w	r8, #0
 80094ee:	e7f6      	b.n	80094de <_dtoa_r+0x8ee>
 80094f0:	4698      	mov	r8, r3
 80094f2:	e7f4      	b.n	80094de <_dtoa_r+0x8ee>
 80094f4:	f43f af7d 	beq.w	80093f2 <_dtoa_r+0x802>
 80094f8:	4618      	mov	r0, r3
 80094fa:	301c      	adds	r0, #28
 80094fc:	e772      	b.n	80093e4 <_dtoa_r+0x7f4>
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	dc37      	bgt.n	8009574 <_dtoa_r+0x984>
 8009504:	9b06      	ldr	r3, [sp, #24]
 8009506:	2b02      	cmp	r3, #2
 8009508:	dd34      	ble.n	8009574 <_dtoa_r+0x984>
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	9302      	str	r3, [sp, #8]
 800950e:	9b02      	ldr	r3, [sp, #8]
 8009510:	b96b      	cbnz	r3, 800952e <_dtoa_r+0x93e>
 8009512:	4631      	mov	r1, r6
 8009514:	2205      	movs	r2, #5
 8009516:	4620      	mov	r0, r4
 8009518:	f000 f9d4 	bl	80098c4 <__multadd>
 800951c:	4601      	mov	r1, r0
 800951e:	4606      	mov	r6, r0
 8009520:	ee18 0a10 	vmov	r0, s16
 8009524:	f000 fbee 	bl	8009d04 <__mcmp>
 8009528:	2800      	cmp	r0, #0
 800952a:	f73f adbb 	bgt.w	80090a4 <_dtoa_r+0x4b4>
 800952e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009530:	9d01      	ldr	r5, [sp, #4]
 8009532:	43db      	mvns	r3, r3
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	f04f 0800 	mov.w	r8, #0
 800953a:	4631      	mov	r1, r6
 800953c:	4620      	mov	r0, r4
 800953e:	f000 f99f 	bl	8009880 <_Bfree>
 8009542:	2f00      	cmp	r7, #0
 8009544:	f43f aea4 	beq.w	8009290 <_dtoa_r+0x6a0>
 8009548:	f1b8 0f00 	cmp.w	r8, #0
 800954c:	d005      	beq.n	800955a <_dtoa_r+0x96a>
 800954e:	45b8      	cmp	r8, r7
 8009550:	d003      	beq.n	800955a <_dtoa_r+0x96a>
 8009552:	4641      	mov	r1, r8
 8009554:	4620      	mov	r0, r4
 8009556:	f000 f993 	bl	8009880 <_Bfree>
 800955a:	4639      	mov	r1, r7
 800955c:	4620      	mov	r0, r4
 800955e:	f000 f98f 	bl	8009880 <_Bfree>
 8009562:	e695      	b.n	8009290 <_dtoa_r+0x6a0>
 8009564:	2600      	movs	r6, #0
 8009566:	4637      	mov	r7, r6
 8009568:	e7e1      	b.n	800952e <_dtoa_r+0x93e>
 800956a:	9700      	str	r7, [sp, #0]
 800956c:	4637      	mov	r7, r6
 800956e:	e599      	b.n	80090a4 <_dtoa_r+0x4b4>
 8009570:	40240000 	.word	0x40240000
 8009574:	9b08      	ldr	r3, [sp, #32]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 80ca 	beq.w	8009710 <_dtoa_r+0xb20>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	9302      	str	r3, [sp, #8]
 8009580:	2d00      	cmp	r5, #0
 8009582:	dd05      	ble.n	8009590 <_dtoa_r+0x9a0>
 8009584:	4639      	mov	r1, r7
 8009586:	462a      	mov	r2, r5
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fb4b 	bl	8009c24 <__lshift>
 800958e:	4607      	mov	r7, r0
 8009590:	f1b8 0f00 	cmp.w	r8, #0
 8009594:	d05b      	beq.n	800964e <_dtoa_r+0xa5e>
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	4620      	mov	r0, r4
 800959a:	f000 f931 	bl	8009800 <_Balloc>
 800959e:	4605      	mov	r5, r0
 80095a0:	b928      	cbnz	r0, 80095ae <_dtoa_r+0x9be>
 80095a2:	4b87      	ldr	r3, [pc, #540]	; (80097c0 <_dtoa_r+0xbd0>)
 80095a4:	4602      	mov	r2, r0
 80095a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095aa:	f7ff bb3b 	b.w	8008c24 <_dtoa_r+0x34>
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	3202      	adds	r2, #2
 80095b2:	0092      	lsls	r2, r2, #2
 80095b4:	f107 010c 	add.w	r1, r7, #12
 80095b8:	300c      	adds	r0, #12
 80095ba:	f000 f913 	bl	80097e4 <memcpy>
 80095be:	2201      	movs	r2, #1
 80095c0:	4629      	mov	r1, r5
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 fb2e 	bl	8009c24 <__lshift>
 80095c8:	9b01      	ldr	r3, [sp, #4]
 80095ca:	f103 0901 	add.w	r9, r3, #1
 80095ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095d2:	4413      	add	r3, r2
 80095d4:	9305      	str	r3, [sp, #20]
 80095d6:	f00a 0301 	and.w	r3, sl, #1
 80095da:	46b8      	mov	r8, r7
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	4607      	mov	r7, r0
 80095e0:	4631      	mov	r1, r6
 80095e2:	ee18 0a10 	vmov	r0, s16
 80095e6:	f7ff fa75 	bl	8008ad4 <quorem>
 80095ea:	4641      	mov	r1, r8
 80095ec:	9002      	str	r0, [sp, #8]
 80095ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095f2:	ee18 0a10 	vmov	r0, s16
 80095f6:	f000 fb85 	bl	8009d04 <__mcmp>
 80095fa:	463a      	mov	r2, r7
 80095fc:	9003      	str	r0, [sp, #12]
 80095fe:	4631      	mov	r1, r6
 8009600:	4620      	mov	r0, r4
 8009602:	f000 fb9b 	bl	8009d3c <__mdiff>
 8009606:	68c2      	ldr	r2, [r0, #12]
 8009608:	f109 3bff 	add.w	fp, r9, #4294967295
 800960c:	4605      	mov	r5, r0
 800960e:	bb02      	cbnz	r2, 8009652 <_dtoa_r+0xa62>
 8009610:	4601      	mov	r1, r0
 8009612:	ee18 0a10 	vmov	r0, s16
 8009616:	f000 fb75 	bl	8009d04 <__mcmp>
 800961a:	4602      	mov	r2, r0
 800961c:	4629      	mov	r1, r5
 800961e:	4620      	mov	r0, r4
 8009620:	9207      	str	r2, [sp, #28]
 8009622:	f000 f92d 	bl	8009880 <_Bfree>
 8009626:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800962a:	ea43 0102 	orr.w	r1, r3, r2
 800962e:	9b04      	ldr	r3, [sp, #16]
 8009630:	430b      	orrs	r3, r1
 8009632:	464d      	mov	r5, r9
 8009634:	d10f      	bne.n	8009656 <_dtoa_r+0xa66>
 8009636:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800963a:	d02a      	beq.n	8009692 <_dtoa_r+0xaa2>
 800963c:	9b03      	ldr	r3, [sp, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	dd02      	ble.n	8009648 <_dtoa_r+0xa58>
 8009642:	9b02      	ldr	r3, [sp, #8]
 8009644:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009648:	f88b a000 	strb.w	sl, [fp]
 800964c:	e775      	b.n	800953a <_dtoa_r+0x94a>
 800964e:	4638      	mov	r0, r7
 8009650:	e7ba      	b.n	80095c8 <_dtoa_r+0x9d8>
 8009652:	2201      	movs	r2, #1
 8009654:	e7e2      	b.n	800961c <_dtoa_r+0xa2c>
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	db04      	blt.n	8009666 <_dtoa_r+0xa76>
 800965c:	9906      	ldr	r1, [sp, #24]
 800965e:	430b      	orrs	r3, r1
 8009660:	9904      	ldr	r1, [sp, #16]
 8009662:	430b      	orrs	r3, r1
 8009664:	d122      	bne.n	80096ac <_dtoa_r+0xabc>
 8009666:	2a00      	cmp	r2, #0
 8009668:	ddee      	ble.n	8009648 <_dtoa_r+0xa58>
 800966a:	ee18 1a10 	vmov	r1, s16
 800966e:	2201      	movs	r2, #1
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fad7 	bl	8009c24 <__lshift>
 8009676:	4631      	mov	r1, r6
 8009678:	ee08 0a10 	vmov	s16, r0
 800967c:	f000 fb42 	bl	8009d04 <__mcmp>
 8009680:	2800      	cmp	r0, #0
 8009682:	dc03      	bgt.n	800968c <_dtoa_r+0xa9c>
 8009684:	d1e0      	bne.n	8009648 <_dtoa_r+0xa58>
 8009686:	f01a 0f01 	tst.w	sl, #1
 800968a:	d0dd      	beq.n	8009648 <_dtoa_r+0xa58>
 800968c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009690:	d1d7      	bne.n	8009642 <_dtoa_r+0xa52>
 8009692:	2339      	movs	r3, #57	; 0x39
 8009694:	f88b 3000 	strb.w	r3, [fp]
 8009698:	462b      	mov	r3, r5
 800969a:	461d      	mov	r5, r3
 800969c:	3b01      	subs	r3, #1
 800969e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096a2:	2a39      	cmp	r2, #57	; 0x39
 80096a4:	d071      	beq.n	800978a <_dtoa_r+0xb9a>
 80096a6:	3201      	adds	r2, #1
 80096a8:	701a      	strb	r2, [r3, #0]
 80096aa:	e746      	b.n	800953a <_dtoa_r+0x94a>
 80096ac:	2a00      	cmp	r2, #0
 80096ae:	dd07      	ble.n	80096c0 <_dtoa_r+0xad0>
 80096b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096b4:	d0ed      	beq.n	8009692 <_dtoa_r+0xaa2>
 80096b6:	f10a 0301 	add.w	r3, sl, #1
 80096ba:	f88b 3000 	strb.w	r3, [fp]
 80096be:	e73c      	b.n	800953a <_dtoa_r+0x94a>
 80096c0:	9b05      	ldr	r3, [sp, #20]
 80096c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096c6:	4599      	cmp	r9, r3
 80096c8:	d047      	beq.n	800975a <_dtoa_r+0xb6a>
 80096ca:	ee18 1a10 	vmov	r1, s16
 80096ce:	2300      	movs	r3, #0
 80096d0:	220a      	movs	r2, #10
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 f8f6 	bl	80098c4 <__multadd>
 80096d8:	45b8      	cmp	r8, r7
 80096da:	ee08 0a10 	vmov	s16, r0
 80096de:	f04f 0300 	mov.w	r3, #0
 80096e2:	f04f 020a 	mov.w	r2, #10
 80096e6:	4641      	mov	r1, r8
 80096e8:	4620      	mov	r0, r4
 80096ea:	d106      	bne.n	80096fa <_dtoa_r+0xb0a>
 80096ec:	f000 f8ea 	bl	80098c4 <__multadd>
 80096f0:	4680      	mov	r8, r0
 80096f2:	4607      	mov	r7, r0
 80096f4:	f109 0901 	add.w	r9, r9, #1
 80096f8:	e772      	b.n	80095e0 <_dtoa_r+0x9f0>
 80096fa:	f000 f8e3 	bl	80098c4 <__multadd>
 80096fe:	4639      	mov	r1, r7
 8009700:	4680      	mov	r8, r0
 8009702:	2300      	movs	r3, #0
 8009704:	220a      	movs	r2, #10
 8009706:	4620      	mov	r0, r4
 8009708:	f000 f8dc 	bl	80098c4 <__multadd>
 800970c:	4607      	mov	r7, r0
 800970e:	e7f1      	b.n	80096f4 <_dtoa_r+0xb04>
 8009710:	9b03      	ldr	r3, [sp, #12]
 8009712:	9302      	str	r3, [sp, #8]
 8009714:	9d01      	ldr	r5, [sp, #4]
 8009716:	ee18 0a10 	vmov	r0, s16
 800971a:	4631      	mov	r1, r6
 800971c:	f7ff f9da 	bl	8008ad4 <quorem>
 8009720:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	f805 ab01 	strb.w	sl, [r5], #1
 800972a:	1aea      	subs	r2, r5, r3
 800972c:	9b02      	ldr	r3, [sp, #8]
 800972e:	4293      	cmp	r3, r2
 8009730:	dd09      	ble.n	8009746 <_dtoa_r+0xb56>
 8009732:	ee18 1a10 	vmov	r1, s16
 8009736:	2300      	movs	r3, #0
 8009738:	220a      	movs	r2, #10
 800973a:	4620      	mov	r0, r4
 800973c:	f000 f8c2 	bl	80098c4 <__multadd>
 8009740:	ee08 0a10 	vmov	s16, r0
 8009744:	e7e7      	b.n	8009716 <_dtoa_r+0xb26>
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfc8      	it	gt
 800974c:	461d      	movgt	r5, r3
 800974e:	9b01      	ldr	r3, [sp, #4]
 8009750:	bfd8      	it	le
 8009752:	2501      	movle	r5, #1
 8009754:	441d      	add	r5, r3
 8009756:	f04f 0800 	mov.w	r8, #0
 800975a:	ee18 1a10 	vmov	r1, s16
 800975e:	2201      	movs	r2, #1
 8009760:	4620      	mov	r0, r4
 8009762:	f000 fa5f 	bl	8009c24 <__lshift>
 8009766:	4631      	mov	r1, r6
 8009768:	ee08 0a10 	vmov	s16, r0
 800976c:	f000 faca 	bl	8009d04 <__mcmp>
 8009770:	2800      	cmp	r0, #0
 8009772:	dc91      	bgt.n	8009698 <_dtoa_r+0xaa8>
 8009774:	d102      	bne.n	800977c <_dtoa_r+0xb8c>
 8009776:	f01a 0f01 	tst.w	sl, #1
 800977a:	d18d      	bne.n	8009698 <_dtoa_r+0xaa8>
 800977c:	462b      	mov	r3, r5
 800977e:	461d      	mov	r5, r3
 8009780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009784:	2a30      	cmp	r2, #48	; 0x30
 8009786:	d0fa      	beq.n	800977e <_dtoa_r+0xb8e>
 8009788:	e6d7      	b.n	800953a <_dtoa_r+0x94a>
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	429a      	cmp	r2, r3
 800978e:	d184      	bne.n	800969a <_dtoa_r+0xaaa>
 8009790:	9b00      	ldr	r3, [sp, #0]
 8009792:	3301      	adds	r3, #1
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	2331      	movs	r3, #49	; 0x31
 8009798:	7013      	strb	r3, [r2, #0]
 800979a:	e6ce      	b.n	800953a <_dtoa_r+0x94a>
 800979c:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <_dtoa_r+0xbd4>)
 800979e:	f7ff ba95 	b.w	8008ccc <_dtoa_r+0xdc>
 80097a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f47f aa6e 	bne.w	8008c86 <_dtoa_r+0x96>
 80097aa:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <_dtoa_r+0xbd8>)
 80097ac:	f7ff ba8e 	b.w	8008ccc <_dtoa_r+0xdc>
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dcae      	bgt.n	8009714 <_dtoa_r+0xb24>
 80097b6:	9b06      	ldr	r3, [sp, #24]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	f73f aea8 	bgt.w	800950e <_dtoa_r+0x91e>
 80097be:	e7a9      	b.n	8009714 <_dtoa_r+0xb24>
 80097c0:	0800e047 	.word	0x0800e047
 80097c4:	0800dfa4 	.word	0x0800dfa4
 80097c8:	0800dfc8 	.word	0x0800dfc8

080097cc <_localeconv_r>:
 80097cc:	4800      	ldr	r0, [pc, #0]	; (80097d0 <_localeconv_r+0x4>)
 80097ce:	4770      	bx	lr
 80097d0:	20000168 	.word	0x20000168

080097d4 <malloc>:
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <malloc+0xc>)
 80097d6:	4601      	mov	r1, r0
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	f000 bc17 	b.w	800a00c <_malloc_r>
 80097de:	bf00      	nop
 80097e0:	20000014 	.word	0x20000014

080097e4 <memcpy>:
 80097e4:	440a      	add	r2, r1
 80097e6:	4291      	cmp	r1, r2
 80097e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80097ec:	d100      	bne.n	80097f0 <memcpy+0xc>
 80097ee:	4770      	bx	lr
 80097f0:	b510      	push	{r4, lr}
 80097f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097fa:	4291      	cmp	r1, r2
 80097fc:	d1f9      	bne.n	80097f2 <memcpy+0xe>
 80097fe:	bd10      	pop	{r4, pc}

08009800 <_Balloc>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	b976      	cbnz	r6, 8009828 <_Balloc+0x28>
 800980a:	2010      	movs	r0, #16
 800980c:	f7ff ffe2 	bl	80097d4 <malloc>
 8009810:	4602      	mov	r2, r0
 8009812:	6260      	str	r0, [r4, #36]	; 0x24
 8009814:	b920      	cbnz	r0, 8009820 <_Balloc+0x20>
 8009816:	4b18      	ldr	r3, [pc, #96]	; (8009878 <_Balloc+0x78>)
 8009818:	4818      	ldr	r0, [pc, #96]	; (800987c <_Balloc+0x7c>)
 800981a:	2166      	movs	r1, #102	; 0x66
 800981c:	f000 fdd6 	bl	800a3cc <__assert_func>
 8009820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009824:	6006      	str	r6, [r0, #0]
 8009826:	60c6      	str	r6, [r0, #12]
 8009828:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800982a:	68f3      	ldr	r3, [r6, #12]
 800982c:	b183      	cbz	r3, 8009850 <_Balloc+0x50>
 800982e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009836:	b9b8      	cbnz	r0, 8009868 <_Balloc+0x68>
 8009838:	2101      	movs	r1, #1
 800983a:	fa01 f605 	lsl.w	r6, r1, r5
 800983e:	1d72      	adds	r2, r6, #5
 8009840:	0092      	lsls	r2, r2, #2
 8009842:	4620      	mov	r0, r4
 8009844:	f000 fb60 	bl	8009f08 <_calloc_r>
 8009848:	b160      	cbz	r0, 8009864 <_Balloc+0x64>
 800984a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800984e:	e00e      	b.n	800986e <_Balloc+0x6e>
 8009850:	2221      	movs	r2, #33	; 0x21
 8009852:	2104      	movs	r1, #4
 8009854:	4620      	mov	r0, r4
 8009856:	f000 fb57 	bl	8009f08 <_calloc_r>
 800985a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800985c:	60f0      	str	r0, [r6, #12]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e4      	bne.n	800982e <_Balloc+0x2e>
 8009864:	2000      	movs	r0, #0
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	6802      	ldr	r2, [r0, #0]
 800986a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800986e:	2300      	movs	r3, #0
 8009870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009874:	e7f7      	b.n	8009866 <_Balloc+0x66>
 8009876:	bf00      	nop
 8009878:	0800dfd5 	.word	0x0800dfd5
 800987c:	0800e058 	.word	0x0800e058

08009880 <_Bfree>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009884:	4605      	mov	r5, r0
 8009886:	460c      	mov	r4, r1
 8009888:	b976      	cbnz	r6, 80098a8 <_Bfree+0x28>
 800988a:	2010      	movs	r0, #16
 800988c:	f7ff ffa2 	bl	80097d4 <malloc>
 8009890:	4602      	mov	r2, r0
 8009892:	6268      	str	r0, [r5, #36]	; 0x24
 8009894:	b920      	cbnz	r0, 80098a0 <_Bfree+0x20>
 8009896:	4b09      	ldr	r3, [pc, #36]	; (80098bc <_Bfree+0x3c>)
 8009898:	4809      	ldr	r0, [pc, #36]	; (80098c0 <_Bfree+0x40>)
 800989a:	218a      	movs	r1, #138	; 0x8a
 800989c:	f000 fd96 	bl	800a3cc <__assert_func>
 80098a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098a4:	6006      	str	r6, [r0, #0]
 80098a6:	60c6      	str	r6, [r0, #12]
 80098a8:	b13c      	cbz	r4, 80098ba <_Bfree+0x3a>
 80098aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098ac:	6862      	ldr	r2, [r4, #4]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098b4:	6021      	str	r1, [r4, #0]
 80098b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	0800dfd5 	.word	0x0800dfd5
 80098c0:	0800e058 	.word	0x0800e058

080098c4 <__multadd>:
 80098c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c8:	690d      	ldr	r5, [r1, #16]
 80098ca:	4607      	mov	r7, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	461e      	mov	r6, r3
 80098d0:	f101 0c14 	add.w	ip, r1, #20
 80098d4:	2000      	movs	r0, #0
 80098d6:	f8dc 3000 	ldr.w	r3, [ip]
 80098da:	b299      	uxth	r1, r3
 80098dc:	fb02 6101 	mla	r1, r2, r1, r6
 80098e0:	0c1e      	lsrs	r6, r3, #16
 80098e2:	0c0b      	lsrs	r3, r1, #16
 80098e4:	fb02 3306 	mla	r3, r2, r6, r3
 80098e8:	b289      	uxth	r1, r1
 80098ea:	3001      	adds	r0, #1
 80098ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098f0:	4285      	cmp	r5, r0
 80098f2:	f84c 1b04 	str.w	r1, [ip], #4
 80098f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098fa:	dcec      	bgt.n	80098d6 <__multadd+0x12>
 80098fc:	b30e      	cbz	r6, 8009942 <__multadd+0x7e>
 80098fe:	68a3      	ldr	r3, [r4, #8]
 8009900:	42ab      	cmp	r3, r5
 8009902:	dc19      	bgt.n	8009938 <__multadd+0x74>
 8009904:	6861      	ldr	r1, [r4, #4]
 8009906:	4638      	mov	r0, r7
 8009908:	3101      	adds	r1, #1
 800990a:	f7ff ff79 	bl	8009800 <_Balloc>
 800990e:	4680      	mov	r8, r0
 8009910:	b928      	cbnz	r0, 800991e <__multadd+0x5a>
 8009912:	4602      	mov	r2, r0
 8009914:	4b0c      	ldr	r3, [pc, #48]	; (8009948 <__multadd+0x84>)
 8009916:	480d      	ldr	r0, [pc, #52]	; (800994c <__multadd+0x88>)
 8009918:	21b5      	movs	r1, #181	; 0xb5
 800991a:	f000 fd57 	bl	800a3cc <__assert_func>
 800991e:	6922      	ldr	r2, [r4, #16]
 8009920:	3202      	adds	r2, #2
 8009922:	f104 010c 	add.w	r1, r4, #12
 8009926:	0092      	lsls	r2, r2, #2
 8009928:	300c      	adds	r0, #12
 800992a:	f7ff ff5b 	bl	80097e4 <memcpy>
 800992e:	4621      	mov	r1, r4
 8009930:	4638      	mov	r0, r7
 8009932:	f7ff ffa5 	bl	8009880 <_Bfree>
 8009936:	4644      	mov	r4, r8
 8009938:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800993c:	3501      	adds	r5, #1
 800993e:	615e      	str	r6, [r3, #20]
 8009940:	6125      	str	r5, [r4, #16]
 8009942:	4620      	mov	r0, r4
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	0800e047 	.word	0x0800e047
 800994c:	0800e058 	.word	0x0800e058

08009950 <__hi0bits>:
 8009950:	0c03      	lsrs	r3, r0, #16
 8009952:	041b      	lsls	r3, r3, #16
 8009954:	b9d3      	cbnz	r3, 800998c <__hi0bits+0x3c>
 8009956:	0400      	lsls	r0, r0, #16
 8009958:	2310      	movs	r3, #16
 800995a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800995e:	bf04      	itt	eq
 8009960:	0200      	lsleq	r0, r0, #8
 8009962:	3308      	addeq	r3, #8
 8009964:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009968:	bf04      	itt	eq
 800996a:	0100      	lsleq	r0, r0, #4
 800996c:	3304      	addeq	r3, #4
 800996e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009972:	bf04      	itt	eq
 8009974:	0080      	lsleq	r0, r0, #2
 8009976:	3302      	addeq	r3, #2
 8009978:	2800      	cmp	r0, #0
 800997a:	db05      	blt.n	8009988 <__hi0bits+0x38>
 800997c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009980:	f103 0301 	add.w	r3, r3, #1
 8009984:	bf08      	it	eq
 8009986:	2320      	moveq	r3, #32
 8009988:	4618      	mov	r0, r3
 800998a:	4770      	bx	lr
 800998c:	2300      	movs	r3, #0
 800998e:	e7e4      	b.n	800995a <__hi0bits+0xa>

08009990 <__lo0bits>:
 8009990:	6803      	ldr	r3, [r0, #0]
 8009992:	f013 0207 	ands.w	r2, r3, #7
 8009996:	4601      	mov	r1, r0
 8009998:	d00b      	beq.n	80099b2 <__lo0bits+0x22>
 800999a:	07da      	lsls	r2, r3, #31
 800999c:	d423      	bmi.n	80099e6 <__lo0bits+0x56>
 800999e:	0798      	lsls	r0, r3, #30
 80099a0:	bf49      	itett	mi
 80099a2:	085b      	lsrmi	r3, r3, #1
 80099a4:	089b      	lsrpl	r3, r3, #2
 80099a6:	2001      	movmi	r0, #1
 80099a8:	600b      	strmi	r3, [r1, #0]
 80099aa:	bf5c      	itt	pl
 80099ac:	600b      	strpl	r3, [r1, #0]
 80099ae:	2002      	movpl	r0, #2
 80099b0:	4770      	bx	lr
 80099b2:	b298      	uxth	r0, r3
 80099b4:	b9a8      	cbnz	r0, 80099e2 <__lo0bits+0x52>
 80099b6:	0c1b      	lsrs	r3, r3, #16
 80099b8:	2010      	movs	r0, #16
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	b90a      	cbnz	r2, 80099c2 <__lo0bits+0x32>
 80099be:	3008      	adds	r0, #8
 80099c0:	0a1b      	lsrs	r3, r3, #8
 80099c2:	071a      	lsls	r2, r3, #28
 80099c4:	bf04      	itt	eq
 80099c6:	091b      	lsreq	r3, r3, #4
 80099c8:	3004      	addeq	r0, #4
 80099ca:	079a      	lsls	r2, r3, #30
 80099cc:	bf04      	itt	eq
 80099ce:	089b      	lsreq	r3, r3, #2
 80099d0:	3002      	addeq	r0, #2
 80099d2:	07da      	lsls	r2, r3, #31
 80099d4:	d403      	bmi.n	80099de <__lo0bits+0x4e>
 80099d6:	085b      	lsrs	r3, r3, #1
 80099d8:	f100 0001 	add.w	r0, r0, #1
 80099dc:	d005      	beq.n	80099ea <__lo0bits+0x5a>
 80099de:	600b      	str	r3, [r1, #0]
 80099e0:	4770      	bx	lr
 80099e2:	4610      	mov	r0, r2
 80099e4:	e7e9      	b.n	80099ba <__lo0bits+0x2a>
 80099e6:	2000      	movs	r0, #0
 80099e8:	4770      	bx	lr
 80099ea:	2020      	movs	r0, #32
 80099ec:	4770      	bx	lr
	...

080099f0 <__i2b>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	460c      	mov	r4, r1
 80099f4:	2101      	movs	r1, #1
 80099f6:	f7ff ff03 	bl	8009800 <_Balloc>
 80099fa:	4602      	mov	r2, r0
 80099fc:	b928      	cbnz	r0, 8009a0a <__i2b+0x1a>
 80099fe:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <__i2b+0x24>)
 8009a00:	4805      	ldr	r0, [pc, #20]	; (8009a18 <__i2b+0x28>)
 8009a02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a06:	f000 fce1 	bl	800a3cc <__assert_func>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	6144      	str	r4, [r0, #20]
 8009a0e:	6103      	str	r3, [r0, #16]
 8009a10:	bd10      	pop	{r4, pc}
 8009a12:	bf00      	nop
 8009a14:	0800e047 	.word	0x0800e047
 8009a18:	0800e058 	.word	0x0800e058

08009a1c <__multiply>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	4691      	mov	r9, r2
 8009a22:	690a      	ldr	r2, [r1, #16]
 8009a24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	bfb8      	it	lt
 8009a2c:	460b      	movlt	r3, r1
 8009a2e:	460c      	mov	r4, r1
 8009a30:	bfbc      	itt	lt
 8009a32:	464c      	movlt	r4, r9
 8009a34:	4699      	movlt	r9, r3
 8009a36:	6927      	ldr	r7, [r4, #16]
 8009a38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a3c:	68a3      	ldr	r3, [r4, #8]
 8009a3e:	6861      	ldr	r1, [r4, #4]
 8009a40:	eb07 060a 	add.w	r6, r7, sl
 8009a44:	42b3      	cmp	r3, r6
 8009a46:	b085      	sub	sp, #20
 8009a48:	bfb8      	it	lt
 8009a4a:	3101      	addlt	r1, #1
 8009a4c:	f7ff fed8 	bl	8009800 <_Balloc>
 8009a50:	b930      	cbnz	r0, 8009a60 <__multiply+0x44>
 8009a52:	4602      	mov	r2, r0
 8009a54:	4b44      	ldr	r3, [pc, #272]	; (8009b68 <__multiply+0x14c>)
 8009a56:	4845      	ldr	r0, [pc, #276]	; (8009b6c <__multiply+0x150>)
 8009a58:	f240 115d 	movw	r1, #349	; 0x15d
 8009a5c:	f000 fcb6 	bl	800a3cc <__assert_func>
 8009a60:	f100 0514 	add.w	r5, r0, #20
 8009a64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a68:	462b      	mov	r3, r5
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	4543      	cmp	r3, r8
 8009a6e:	d321      	bcc.n	8009ab4 <__multiply+0x98>
 8009a70:	f104 0314 	add.w	r3, r4, #20
 8009a74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a78:	f109 0314 	add.w	r3, r9, #20
 8009a7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a80:	9202      	str	r2, [sp, #8]
 8009a82:	1b3a      	subs	r2, r7, r4
 8009a84:	3a15      	subs	r2, #21
 8009a86:	f022 0203 	bic.w	r2, r2, #3
 8009a8a:	3204      	adds	r2, #4
 8009a8c:	f104 0115 	add.w	r1, r4, #21
 8009a90:	428f      	cmp	r7, r1
 8009a92:	bf38      	it	cc
 8009a94:	2204      	movcc	r2, #4
 8009a96:	9201      	str	r2, [sp, #4]
 8009a98:	9a02      	ldr	r2, [sp, #8]
 8009a9a:	9303      	str	r3, [sp, #12]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d80c      	bhi.n	8009aba <__multiply+0x9e>
 8009aa0:	2e00      	cmp	r6, #0
 8009aa2:	dd03      	ble.n	8009aac <__multiply+0x90>
 8009aa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d05a      	beq.n	8009b62 <__multiply+0x146>
 8009aac:	6106      	str	r6, [r0, #16]
 8009aae:	b005      	add	sp, #20
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab4:	f843 2b04 	str.w	r2, [r3], #4
 8009ab8:	e7d8      	b.n	8009a6c <__multiply+0x50>
 8009aba:	f8b3 a000 	ldrh.w	sl, [r3]
 8009abe:	f1ba 0f00 	cmp.w	sl, #0
 8009ac2:	d024      	beq.n	8009b0e <__multiply+0xf2>
 8009ac4:	f104 0e14 	add.w	lr, r4, #20
 8009ac8:	46a9      	mov	r9, r5
 8009aca:	f04f 0c00 	mov.w	ip, #0
 8009ace:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ad2:	f8d9 1000 	ldr.w	r1, [r9]
 8009ad6:	fa1f fb82 	uxth.w	fp, r2
 8009ada:	b289      	uxth	r1, r1
 8009adc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ae0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ae8:	4461      	add	r1, ip
 8009aea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009aee:	fb0a c20b 	mla	r2, sl, fp, ip
 8009af2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009af6:	b289      	uxth	r1, r1
 8009af8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009afc:	4577      	cmp	r7, lr
 8009afe:	f849 1b04 	str.w	r1, [r9], #4
 8009b02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b06:	d8e2      	bhi.n	8009ace <__multiply+0xb2>
 8009b08:	9a01      	ldr	r2, [sp, #4]
 8009b0a:	f845 c002 	str.w	ip, [r5, r2]
 8009b0e:	9a03      	ldr	r2, [sp, #12]
 8009b10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b14:	3304      	adds	r3, #4
 8009b16:	f1b9 0f00 	cmp.w	r9, #0
 8009b1a:	d020      	beq.n	8009b5e <__multiply+0x142>
 8009b1c:	6829      	ldr	r1, [r5, #0]
 8009b1e:	f104 0c14 	add.w	ip, r4, #20
 8009b22:	46ae      	mov	lr, r5
 8009b24:	f04f 0a00 	mov.w	sl, #0
 8009b28:	f8bc b000 	ldrh.w	fp, [ip]
 8009b2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b30:	fb09 220b 	mla	r2, r9, fp, r2
 8009b34:	4492      	add	sl, r2
 8009b36:	b289      	uxth	r1, r1
 8009b38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b3c:	f84e 1b04 	str.w	r1, [lr], #4
 8009b40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b44:	f8be 1000 	ldrh.w	r1, [lr]
 8009b48:	0c12      	lsrs	r2, r2, #16
 8009b4a:	fb09 1102 	mla	r1, r9, r2, r1
 8009b4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b52:	4567      	cmp	r7, ip
 8009b54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b58:	d8e6      	bhi.n	8009b28 <__multiply+0x10c>
 8009b5a:	9a01      	ldr	r2, [sp, #4]
 8009b5c:	50a9      	str	r1, [r5, r2]
 8009b5e:	3504      	adds	r5, #4
 8009b60:	e79a      	b.n	8009a98 <__multiply+0x7c>
 8009b62:	3e01      	subs	r6, #1
 8009b64:	e79c      	b.n	8009aa0 <__multiply+0x84>
 8009b66:	bf00      	nop
 8009b68:	0800e047 	.word	0x0800e047
 8009b6c:	0800e058 	.word	0x0800e058

08009b70 <__pow5mult>:
 8009b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b74:	4615      	mov	r5, r2
 8009b76:	f012 0203 	ands.w	r2, r2, #3
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460f      	mov	r7, r1
 8009b7e:	d007      	beq.n	8009b90 <__pow5mult+0x20>
 8009b80:	4c25      	ldr	r4, [pc, #148]	; (8009c18 <__pow5mult+0xa8>)
 8009b82:	3a01      	subs	r2, #1
 8009b84:	2300      	movs	r3, #0
 8009b86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b8a:	f7ff fe9b 	bl	80098c4 <__multadd>
 8009b8e:	4607      	mov	r7, r0
 8009b90:	10ad      	asrs	r5, r5, #2
 8009b92:	d03d      	beq.n	8009c10 <__pow5mult+0xa0>
 8009b94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b96:	b97c      	cbnz	r4, 8009bb8 <__pow5mult+0x48>
 8009b98:	2010      	movs	r0, #16
 8009b9a:	f7ff fe1b 	bl	80097d4 <malloc>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	6270      	str	r0, [r6, #36]	; 0x24
 8009ba2:	b928      	cbnz	r0, 8009bb0 <__pow5mult+0x40>
 8009ba4:	4b1d      	ldr	r3, [pc, #116]	; (8009c1c <__pow5mult+0xac>)
 8009ba6:	481e      	ldr	r0, [pc, #120]	; (8009c20 <__pow5mult+0xb0>)
 8009ba8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bac:	f000 fc0e 	bl	800a3cc <__assert_func>
 8009bb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bb4:	6004      	str	r4, [r0, #0]
 8009bb6:	60c4      	str	r4, [r0, #12]
 8009bb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bc0:	b94c      	cbnz	r4, 8009bd6 <__pow5mult+0x66>
 8009bc2:	f240 2171 	movw	r1, #625	; 0x271
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ff12 	bl	80099f0 <__i2b>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	6003      	str	r3, [r0, #0]
 8009bd6:	f04f 0900 	mov.w	r9, #0
 8009bda:	07eb      	lsls	r3, r5, #31
 8009bdc:	d50a      	bpl.n	8009bf4 <__pow5mult+0x84>
 8009bde:	4639      	mov	r1, r7
 8009be0:	4622      	mov	r2, r4
 8009be2:	4630      	mov	r0, r6
 8009be4:	f7ff ff1a 	bl	8009a1c <__multiply>
 8009be8:	4639      	mov	r1, r7
 8009bea:	4680      	mov	r8, r0
 8009bec:	4630      	mov	r0, r6
 8009bee:	f7ff fe47 	bl	8009880 <_Bfree>
 8009bf2:	4647      	mov	r7, r8
 8009bf4:	106d      	asrs	r5, r5, #1
 8009bf6:	d00b      	beq.n	8009c10 <__pow5mult+0xa0>
 8009bf8:	6820      	ldr	r0, [r4, #0]
 8009bfa:	b938      	cbnz	r0, 8009c0c <__pow5mult+0x9c>
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff ff0b 	bl	8009a1c <__multiply>
 8009c06:	6020      	str	r0, [r4, #0]
 8009c08:	f8c0 9000 	str.w	r9, [r0]
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	e7e4      	b.n	8009bda <__pow5mult+0x6a>
 8009c10:	4638      	mov	r0, r7
 8009c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c16:	bf00      	nop
 8009c18:	0800e1a8 	.word	0x0800e1a8
 8009c1c:	0800dfd5 	.word	0x0800dfd5
 8009c20:	0800e058 	.word	0x0800e058

08009c24 <__lshift>:
 8009c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	460c      	mov	r4, r1
 8009c2a:	6849      	ldr	r1, [r1, #4]
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c32:	68a3      	ldr	r3, [r4, #8]
 8009c34:	4607      	mov	r7, r0
 8009c36:	4691      	mov	r9, r2
 8009c38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c3c:	f108 0601 	add.w	r6, r8, #1
 8009c40:	42b3      	cmp	r3, r6
 8009c42:	db0b      	blt.n	8009c5c <__lshift+0x38>
 8009c44:	4638      	mov	r0, r7
 8009c46:	f7ff fddb 	bl	8009800 <_Balloc>
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	b948      	cbnz	r0, 8009c62 <__lshift+0x3e>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	4b2a      	ldr	r3, [pc, #168]	; (8009cfc <__lshift+0xd8>)
 8009c52:	482b      	ldr	r0, [pc, #172]	; (8009d00 <__lshift+0xdc>)
 8009c54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c58:	f000 fbb8 	bl	800a3cc <__assert_func>
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	e7ee      	b.n	8009c40 <__lshift+0x1c>
 8009c62:	2300      	movs	r3, #0
 8009c64:	f100 0114 	add.w	r1, r0, #20
 8009c68:	f100 0210 	add.w	r2, r0, #16
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	4553      	cmp	r3, sl
 8009c70:	db37      	blt.n	8009ce2 <__lshift+0xbe>
 8009c72:	6920      	ldr	r0, [r4, #16]
 8009c74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c78:	f104 0314 	add.w	r3, r4, #20
 8009c7c:	f019 091f 	ands.w	r9, r9, #31
 8009c80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c88:	d02f      	beq.n	8009cea <__lshift+0xc6>
 8009c8a:	f1c9 0e20 	rsb	lr, r9, #32
 8009c8e:	468a      	mov	sl, r1
 8009c90:	f04f 0c00 	mov.w	ip, #0
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	fa02 f209 	lsl.w	r2, r2, r9
 8009c9a:	ea42 020c 	orr.w	r2, r2, ip
 8009c9e:	f84a 2b04 	str.w	r2, [sl], #4
 8009ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca6:	4298      	cmp	r0, r3
 8009ca8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009cac:	d8f2      	bhi.n	8009c94 <__lshift+0x70>
 8009cae:	1b03      	subs	r3, r0, r4
 8009cb0:	3b15      	subs	r3, #21
 8009cb2:	f023 0303 	bic.w	r3, r3, #3
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	f104 0215 	add.w	r2, r4, #21
 8009cbc:	4290      	cmp	r0, r2
 8009cbe:	bf38      	it	cc
 8009cc0:	2304      	movcc	r3, #4
 8009cc2:	f841 c003 	str.w	ip, [r1, r3]
 8009cc6:	f1bc 0f00 	cmp.w	ip, #0
 8009cca:	d001      	beq.n	8009cd0 <__lshift+0xac>
 8009ccc:	f108 0602 	add.w	r6, r8, #2
 8009cd0:	3e01      	subs	r6, #1
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	612e      	str	r6, [r5, #16]
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	f7ff fdd2 	bl	8009880 <_Bfree>
 8009cdc:	4628      	mov	r0, r5
 8009cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	e7c1      	b.n	8009c6e <__lshift+0x4a>
 8009cea:	3904      	subs	r1, #4
 8009cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cf4:	4298      	cmp	r0, r3
 8009cf6:	d8f9      	bhi.n	8009cec <__lshift+0xc8>
 8009cf8:	e7ea      	b.n	8009cd0 <__lshift+0xac>
 8009cfa:	bf00      	nop
 8009cfc:	0800e047 	.word	0x0800e047
 8009d00:	0800e058 	.word	0x0800e058

08009d04 <__mcmp>:
 8009d04:	b530      	push	{r4, r5, lr}
 8009d06:	6902      	ldr	r2, [r0, #16]
 8009d08:	690c      	ldr	r4, [r1, #16]
 8009d0a:	1b12      	subs	r2, r2, r4
 8009d0c:	d10e      	bne.n	8009d2c <__mcmp+0x28>
 8009d0e:	f100 0314 	add.w	r3, r0, #20
 8009d12:	3114      	adds	r1, #20
 8009d14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d24:	42a5      	cmp	r5, r4
 8009d26:	d003      	beq.n	8009d30 <__mcmp+0x2c>
 8009d28:	d305      	bcc.n	8009d36 <__mcmp+0x32>
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	bd30      	pop	{r4, r5, pc}
 8009d30:	4283      	cmp	r3, r0
 8009d32:	d3f3      	bcc.n	8009d1c <__mcmp+0x18>
 8009d34:	e7fa      	b.n	8009d2c <__mcmp+0x28>
 8009d36:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3a:	e7f7      	b.n	8009d2c <__mcmp+0x28>

08009d3c <__mdiff>:
 8009d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d40:	460c      	mov	r4, r1
 8009d42:	4606      	mov	r6, r0
 8009d44:	4611      	mov	r1, r2
 8009d46:	4620      	mov	r0, r4
 8009d48:	4690      	mov	r8, r2
 8009d4a:	f7ff ffdb 	bl	8009d04 <__mcmp>
 8009d4e:	1e05      	subs	r5, r0, #0
 8009d50:	d110      	bne.n	8009d74 <__mdiff+0x38>
 8009d52:	4629      	mov	r1, r5
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff fd53 	bl	8009800 <_Balloc>
 8009d5a:	b930      	cbnz	r0, 8009d6a <__mdiff+0x2e>
 8009d5c:	4b3a      	ldr	r3, [pc, #232]	; (8009e48 <__mdiff+0x10c>)
 8009d5e:	4602      	mov	r2, r0
 8009d60:	f240 2132 	movw	r1, #562	; 0x232
 8009d64:	4839      	ldr	r0, [pc, #228]	; (8009e4c <__mdiff+0x110>)
 8009d66:	f000 fb31 	bl	800a3cc <__assert_func>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d74:	bfa4      	itt	ge
 8009d76:	4643      	movge	r3, r8
 8009d78:	46a0      	movge	r8, r4
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d80:	bfa6      	itte	ge
 8009d82:	461c      	movge	r4, r3
 8009d84:	2500      	movge	r5, #0
 8009d86:	2501      	movlt	r5, #1
 8009d88:	f7ff fd3a 	bl	8009800 <_Balloc>
 8009d8c:	b920      	cbnz	r0, 8009d98 <__mdiff+0x5c>
 8009d8e:	4b2e      	ldr	r3, [pc, #184]	; (8009e48 <__mdiff+0x10c>)
 8009d90:	4602      	mov	r2, r0
 8009d92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d96:	e7e5      	b.n	8009d64 <__mdiff+0x28>
 8009d98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d9c:	6926      	ldr	r6, [r4, #16]
 8009d9e:	60c5      	str	r5, [r0, #12]
 8009da0:	f104 0914 	add.w	r9, r4, #20
 8009da4:	f108 0514 	add.w	r5, r8, #20
 8009da8:	f100 0e14 	add.w	lr, r0, #20
 8009dac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009db0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009db4:	f108 0210 	add.w	r2, r8, #16
 8009db8:	46f2      	mov	sl, lr
 8009dba:	2100      	movs	r1, #0
 8009dbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009dc4:	fa1f f883 	uxth.w	r8, r3
 8009dc8:	fa11 f18b 	uxtah	r1, r1, fp
 8009dcc:	0c1b      	lsrs	r3, r3, #16
 8009dce:	eba1 0808 	sub.w	r8, r1, r8
 8009dd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009dda:	fa1f f888 	uxth.w	r8, r8
 8009dde:	1419      	asrs	r1, r3, #16
 8009de0:	454e      	cmp	r6, r9
 8009de2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009de6:	f84a 3b04 	str.w	r3, [sl], #4
 8009dea:	d8e7      	bhi.n	8009dbc <__mdiff+0x80>
 8009dec:	1b33      	subs	r3, r6, r4
 8009dee:	3b15      	subs	r3, #21
 8009df0:	f023 0303 	bic.w	r3, r3, #3
 8009df4:	3304      	adds	r3, #4
 8009df6:	3415      	adds	r4, #21
 8009df8:	42a6      	cmp	r6, r4
 8009dfa:	bf38      	it	cc
 8009dfc:	2304      	movcc	r3, #4
 8009dfe:	441d      	add	r5, r3
 8009e00:	4473      	add	r3, lr
 8009e02:	469e      	mov	lr, r3
 8009e04:	462e      	mov	r6, r5
 8009e06:	4566      	cmp	r6, ip
 8009e08:	d30e      	bcc.n	8009e28 <__mdiff+0xec>
 8009e0a:	f10c 0203 	add.w	r2, ip, #3
 8009e0e:	1b52      	subs	r2, r2, r5
 8009e10:	f022 0203 	bic.w	r2, r2, #3
 8009e14:	3d03      	subs	r5, #3
 8009e16:	45ac      	cmp	ip, r5
 8009e18:	bf38      	it	cc
 8009e1a:	2200      	movcc	r2, #0
 8009e1c:	441a      	add	r2, r3
 8009e1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e22:	b17b      	cbz	r3, 8009e44 <__mdiff+0x108>
 8009e24:	6107      	str	r7, [r0, #16]
 8009e26:	e7a3      	b.n	8009d70 <__mdiff+0x34>
 8009e28:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e2c:	fa11 f288 	uxtah	r2, r1, r8
 8009e30:	1414      	asrs	r4, r2, #16
 8009e32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e36:	b292      	uxth	r2, r2
 8009e38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e3c:	f84e 2b04 	str.w	r2, [lr], #4
 8009e40:	1421      	asrs	r1, r4, #16
 8009e42:	e7e0      	b.n	8009e06 <__mdiff+0xca>
 8009e44:	3f01      	subs	r7, #1
 8009e46:	e7ea      	b.n	8009e1e <__mdiff+0xe2>
 8009e48:	0800e047 	.word	0x0800e047
 8009e4c:	0800e058 	.word	0x0800e058

08009e50 <__d2b>:
 8009e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e54:	4689      	mov	r9, r1
 8009e56:	2101      	movs	r1, #1
 8009e58:	ec57 6b10 	vmov	r6, r7, d0
 8009e5c:	4690      	mov	r8, r2
 8009e5e:	f7ff fccf 	bl	8009800 <_Balloc>
 8009e62:	4604      	mov	r4, r0
 8009e64:	b930      	cbnz	r0, 8009e74 <__d2b+0x24>
 8009e66:	4602      	mov	r2, r0
 8009e68:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <__d2b+0xb0>)
 8009e6a:	4826      	ldr	r0, [pc, #152]	; (8009f04 <__d2b+0xb4>)
 8009e6c:	f240 310a 	movw	r1, #778	; 0x30a
 8009e70:	f000 faac 	bl	800a3cc <__assert_func>
 8009e74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e7c:	bb35      	cbnz	r5, 8009ecc <__d2b+0x7c>
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	d028      	beq.n	8009ed6 <__d2b+0x86>
 8009e84:	4668      	mov	r0, sp
 8009e86:	9600      	str	r6, [sp, #0]
 8009e88:	f7ff fd82 	bl	8009990 <__lo0bits>
 8009e8c:	9900      	ldr	r1, [sp, #0]
 8009e8e:	b300      	cbz	r0, 8009ed2 <__d2b+0x82>
 8009e90:	9a01      	ldr	r2, [sp, #4]
 8009e92:	f1c0 0320 	rsb	r3, r0, #32
 8009e96:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	40c2      	lsrs	r2, r0
 8009e9e:	6163      	str	r3, [r4, #20]
 8009ea0:	9201      	str	r2, [sp, #4]
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	61a3      	str	r3, [r4, #24]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bf14      	ite	ne
 8009eaa:	2202      	movne	r2, #2
 8009eac:	2201      	moveq	r2, #1
 8009eae:	6122      	str	r2, [r4, #16]
 8009eb0:	b1d5      	cbz	r5, 8009ee8 <__d2b+0x98>
 8009eb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eb6:	4405      	add	r5, r0
 8009eb8:	f8c9 5000 	str.w	r5, [r9]
 8009ebc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ec0:	f8c8 0000 	str.w	r0, [r8]
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	b003      	add	sp, #12
 8009ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed0:	e7d5      	b.n	8009e7e <__d2b+0x2e>
 8009ed2:	6161      	str	r1, [r4, #20]
 8009ed4:	e7e5      	b.n	8009ea2 <__d2b+0x52>
 8009ed6:	a801      	add	r0, sp, #4
 8009ed8:	f7ff fd5a 	bl	8009990 <__lo0bits>
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	6163      	str	r3, [r4, #20]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	6122      	str	r2, [r4, #16]
 8009ee4:	3020      	adds	r0, #32
 8009ee6:	e7e3      	b.n	8009eb0 <__d2b+0x60>
 8009ee8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009eec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ef0:	f8c9 0000 	str.w	r0, [r9]
 8009ef4:	6918      	ldr	r0, [r3, #16]
 8009ef6:	f7ff fd2b 	bl	8009950 <__hi0bits>
 8009efa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009efe:	e7df      	b.n	8009ec0 <__d2b+0x70>
 8009f00:	0800e047 	.word	0x0800e047
 8009f04:	0800e058 	.word	0x0800e058

08009f08 <_calloc_r>:
 8009f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f0a:	fba1 2402 	umull	r2, r4, r1, r2
 8009f0e:	b94c      	cbnz	r4, 8009f24 <_calloc_r+0x1c>
 8009f10:	4611      	mov	r1, r2
 8009f12:	9201      	str	r2, [sp, #4]
 8009f14:	f000 f87a 	bl	800a00c <_malloc_r>
 8009f18:	9a01      	ldr	r2, [sp, #4]
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	b930      	cbnz	r0, 8009f2c <_calloc_r+0x24>
 8009f1e:	4628      	mov	r0, r5
 8009f20:	b003      	add	sp, #12
 8009f22:	bd30      	pop	{r4, r5, pc}
 8009f24:	220c      	movs	r2, #12
 8009f26:	6002      	str	r2, [r0, #0]
 8009f28:	2500      	movs	r5, #0
 8009f2a:	e7f8      	b.n	8009f1e <_calloc_r+0x16>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	f7fe f93f 	bl	80081b0 <memset>
 8009f32:	e7f4      	b.n	8009f1e <_calloc_r+0x16>

08009f34 <_free_r>:
 8009f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f36:	2900      	cmp	r1, #0
 8009f38:	d044      	beq.n	8009fc4 <_free_r+0x90>
 8009f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f3e:	9001      	str	r0, [sp, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f1a1 0404 	sub.w	r4, r1, #4
 8009f46:	bfb8      	it	lt
 8009f48:	18e4      	addlt	r4, r4, r3
 8009f4a:	f000 fa9b 	bl	800a484 <__malloc_lock>
 8009f4e:	4a1e      	ldr	r2, [pc, #120]	; (8009fc8 <_free_r+0x94>)
 8009f50:	9801      	ldr	r0, [sp, #4]
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	b933      	cbnz	r3, 8009f64 <_free_r+0x30>
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	6014      	str	r4, [r2, #0]
 8009f5a:	b003      	add	sp, #12
 8009f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f60:	f000 ba96 	b.w	800a490 <__malloc_unlock>
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d908      	bls.n	8009f7a <_free_r+0x46>
 8009f68:	6825      	ldr	r5, [r4, #0]
 8009f6a:	1961      	adds	r1, r4, r5
 8009f6c:	428b      	cmp	r3, r1
 8009f6e:	bf01      	itttt	eq
 8009f70:	6819      	ldreq	r1, [r3, #0]
 8009f72:	685b      	ldreq	r3, [r3, #4]
 8009f74:	1949      	addeq	r1, r1, r5
 8009f76:	6021      	streq	r1, [r4, #0]
 8009f78:	e7ed      	b.n	8009f56 <_free_r+0x22>
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	b10b      	cbz	r3, 8009f84 <_free_r+0x50>
 8009f80:	42a3      	cmp	r3, r4
 8009f82:	d9fa      	bls.n	8009f7a <_free_r+0x46>
 8009f84:	6811      	ldr	r1, [r2, #0]
 8009f86:	1855      	adds	r5, r2, r1
 8009f88:	42a5      	cmp	r5, r4
 8009f8a:	d10b      	bne.n	8009fa4 <_free_r+0x70>
 8009f8c:	6824      	ldr	r4, [r4, #0]
 8009f8e:	4421      	add	r1, r4
 8009f90:	1854      	adds	r4, r2, r1
 8009f92:	42a3      	cmp	r3, r4
 8009f94:	6011      	str	r1, [r2, #0]
 8009f96:	d1e0      	bne.n	8009f5a <_free_r+0x26>
 8009f98:	681c      	ldr	r4, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	6053      	str	r3, [r2, #4]
 8009f9e:	4421      	add	r1, r4
 8009fa0:	6011      	str	r1, [r2, #0]
 8009fa2:	e7da      	b.n	8009f5a <_free_r+0x26>
 8009fa4:	d902      	bls.n	8009fac <_free_r+0x78>
 8009fa6:	230c      	movs	r3, #12
 8009fa8:	6003      	str	r3, [r0, #0]
 8009faa:	e7d6      	b.n	8009f5a <_free_r+0x26>
 8009fac:	6825      	ldr	r5, [r4, #0]
 8009fae:	1961      	adds	r1, r4, r5
 8009fb0:	428b      	cmp	r3, r1
 8009fb2:	bf04      	itt	eq
 8009fb4:	6819      	ldreq	r1, [r3, #0]
 8009fb6:	685b      	ldreq	r3, [r3, #4]
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	bf04      	itt	eq
 8009fbc:	1949      	addeq	r1, r1, r5
 8009fbe:	6021      	streq	r1, [r4, #0]
 8009fc0:	6054      	str	r4, [r2, #4]
 8009fc2:	e7ca      	b.n	8009f5a <_free_r+0x26>
 8009fc4:	b003      	add	sp, #12
 8009fc6:	bd30      	pop	{r4, r5, pc}
 8009fc8:	20000614 	.word	0x20000614

08009fcc <sbrk_aligned>:
 8009fcc:	b570      	push	{r4, r5, r6, lr}
 8009fce:	4e0e      	ldr	r6, [pc, #56]	; (800a008 <sbrk_aligned+0x3c>)
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	6831      	ldr	r1, [r6, #0]
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	b911      	cbnz	r1, 8009fde <sbrk_aligned+0x12>
 8009fd8:	f000 f9e8 	bl	800a3ac <_sbrk_r>
 8009fdc:	6030      	str	r0, [r6, #0]
 8009fde:	4621      	mov	r1, r4
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f000 f9e3 	bl	800a3ac <_sbrk_r>
 8009fe6:	1c43      	adds	r3, r0, #1
 8009fe8:	d00a      	beq.n	800a000 <sbrk_aligned+0x34>
 8009fea:	1cc4      	adds	r4, r0, #3
 8009fec:	f024 0403 	bic.w	r4, r4, #3
 8009ff0:	42a0      	cmp	r0, r4
 8009ff2:	d007      	beq.n	800a004 <sbrk_aligned+0x38>
 8009ff4:	1a21      	subs	r1, r4, r0
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f000 f9d8 	bl	800a3ac <_sbrk_r>
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d101      	bne.n	800a004 <sbrk_aligned+0x38>
 800a000:	f04f 34ff 	mov.w	r4, #4294967295
 800a004:	4620      	mov	r0, r4
 800a006:	bd70      	pop	{r4, r5, r6, pc}
 800a008:	20000618 	.word	0x20000618

0800a00c <_malloc_r>:
 800a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a010:	1ccd      	adds	r5, r1, #3
 800a012:	f025 0503 	bic.w	r5, r5, #3
 800a016:	3508      	adds	r5, #8
 800a018:	2d0c      	cmp	r5, #12
 800a01a:	bf38      	it	cc
 800a01c:	250c      	movcc	r5, #12
 800a01e:	2d00      	cmp	r5, #0
 800a020:	4607      	mov	r7, r0
 800a022:	db01      	blt.n	800a028 <_malloc_r+0x1c>
 800a024:	42a9      	cmp	r1, r5
 800a026:	d905      	bls.n	800a034 <_malloc_r+0x28>
 800a028:	230c      	movs	r3, #12
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	2600      	movs	r6, #0
 800a02e:	4630      	mov	r0, r6
 800a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a034:	4e2e      	ldr	r6, [pc, #184]	; (800a0f0 <_malloc_r+0xe4>)
 800a036:	f000 fa25 	bl	800a484 <__malloc_lock>
 800a03a:	6833      	ldr	r3, [r6, #0]
 800a03c:	461c      	mov	r4, r3
 800a03e:	bb34      	cbnz	r4, 800a08e <_malloc_r+0x82>
 800a040:	4629      	mov	r1, r5
 800a042:	4638      	mov	r0, r7
 800a044:	f7ff ffc2 	bl	8009fcc <sbrk_aligned>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	4604      	mov	r4, r0
 800a04c:	d14d      	bne.n	800a0ea <_malloc_r+0xde>
 800a04e:	6834      	ldr	r4, [r6, #0]
 800a050:	4626      	mov	r6, r4
 800a052:	2e00      	cmp	r6, #0
 800a054:	d140      	bne.n	800a0d8 <_malloc_r+0xcc>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	4631      	mov	r1, r6
 800a05a:	4638      	mov	r0, r7
 800a05c:	eb04 0803 	add.w	r8, r4, r3
 800a060:	f000 f9a4 	bl	800a3ac <_sbrk_r>
 800a064:	4580      	cmp	r8, r0
 800a066:	d13a      	bne.n	800a0de <_malloc_r+0xd2>
 800a068:	6821      	ldr	r1, [r4, #0]
 800a06a:	3503      	adds	r5, #3
 800a06c:	1a6d      	subs	r5, r5, r1
 800a06e:	f025 0503 	bic.w	r5, r5, #3
 800a072:	3508      	adds	r5, #8
 800a074:	2d0c      	cmp	r5, #12
 800a076:	bf38      	it	cc
 800a078:	250c      	movcc	r5, #12
 800a07a:	4629      	mov	r1, r5
 800a07c:	4638      	mov	r0, r7
 800a07e:	f7ff ffa5 	bl	8009fcc <sbrk_aligned>
 800a082:	3001      	adds	r0, #1
 800a084:	d02b      	beq.n	800a0de <_malloc_r+0xd2>
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	442b      	add	r3, r5
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	e00e      	b.n	800a0ac <_malloc_r+0xa0>
 800a08e:	6822      	ldr	r2, [r4, #0]
 800a090:	1b52      	subs	r2, r2, r5
 800a092:	d41e      	bmi.n	800a0d2 <_malloc_r+0xc6>
 800a094:	2a0b      	cmp	r2, #11
 800a096:	d916      	bls.n	800a0c6 <_malloc_r+0xba>
 800a098:	1961      	adds	r1, r4, r5
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	6025      	str	r5, [r4, #0]
 800a09e:	bf18      	it	ne
 800a0a0:	6059      	strne	r1, [r3, #4]
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	bf08      	it	eq
 800a0a6:	6031      	streq	r1, [r6, #0]
 800a0a8:	5162      	str	r2, [r4, r5]
 800a0aa:	604b      	str	r3, [r1, #4]
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f104 060b 	add.w	r6, r4, #11
 800a0b2:	f000 f9ed 	bl	800a490 <__malloc_unlock>
 800a0b6:	f026 0607 	bic.w	r6, r6, #7
 800a0ba:	1d23      	adds	r3, r4, #4
 800a0bc:	1af2      	subs	r2, r6, r3
 800a0be:	d0b6      	beq.n	800a02e <_malloc_r+0x22>
 800a0c0:	1b9b      	subs	r3, r3, r6
 800a0c2:	50a3      	str	r3, [r4, r2]
 800a0c4:	e7b3      	b.n	800a02e <_malloc_r+0x22>
 800a0c6:	6862      	ldr	r2, [r4, #4]
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	bf0c      	ite	eq
 800a0cc:	6032      	streq	r2, [r6, #0]
 800a0ce:	605a      	strne	r2, [r3, #4]
 800a0d0:	e7ec      	b.n	800a0ac <_malloc_r+0xa0>
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	6864      	ldr	r4, [r4, #4]
 800a0d6:	e7b2      	b.n	800a03e <_malloc_r+0x32>
 800a0d8:	4634      	mov	r4, r6
 800a0da:	6876      	ldr	r6, [r6, #4]
 800a0dc:	e7b9      	b.n	800a052 <_malloc_r+0x46>
 800a0de:	230c      	movs	r3, #12
 800a0e0:	603b      	str	r3, [r7, #0]
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	f000 f9d4 	bl	800a490 <__malloc_unlock>
 800a0e8:	e7a1      	b.n	800a02e <_malloc_r+0x22>
 800a0ea:	6025      	str	r5, [r4, #0]
 800a0ec:	e7de      	b.n	800a0ac <_malloc_r+0xa0>
 800a0ee:	bf00      	nop
 800a0f0:	20000614 	.word	0x20000614

0800a0f4 <__ssputs_r>:
 800a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f8:	688e      	ldr	r6, [r1, #8]
 800a0fa:	429e      	cmp	r6, r3
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	4690      	mov	r8, r2
 800a102:	461f      	mov	r7, r3
 800a104:	d838      	bhi.n	800a178 <__ssputs_r+0x84>
 800a106:	898a      	ldrh	r2, [r1, #12]
 800a108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a10c:	d032      	beq.n	800a174 <__ssputs_r+0x80>
 800a10e:	6825      	ldr	r5, [r4, #0]
 800a110:	6909      	ldr	r1, [r1, #16]
 800a112:	eba5 0901 	sub.w	r9, r5, r1
 800a116:	6965      	ldr	r5, [r4, #20]
 800a118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a11c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a120:	3301      	adds	r3, #1
 800a122:	444b      	add	r3, r9
 800a124:	106d      	asrs	r5, r5, #1
 800a126:	429d      	cmp	r5, r3
 800a128:	bf38      	it	cc
 800a12a:	461d      	movcc	r5, r3
 800a12c:	0553      	lsls	r3, r2, #21
 800a12e:	d531      	bpl.n	800a194 <__ssputs_r+0xa0>
 800a130:	4629      	mov	r1, r5
 800a132:	f7ff ff6b 	bl	800a00c <_malloc_r>
 800a136:	4606      	mov	r6, r0
 800a138:	b950      	cbnz	r0, 800a150 <__ssputs_r+0x5c>
 800a13a:	230c      	movs	r3, #12
 800a13c:	f8ca 3000 	str.w	r3, [sl]
 800a140:	89a3      	ldrh	r3, [r4, #12]
 800a142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a146:	81a3      	strh	r3, [r4, #12]
 800a148:	f04f 30ff 	mov.w	r0, #4294967295
 800a14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a150:	6921      	ldr	r1, [r4, #16]
 800a152:	464a      	mov	r2, r9
 800a154:	f7ff fb46 	bl	80097e4 <memcpy>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a162:	81a3      	strh	r3, [r4, #12]
 800a164:	6126      	str	r6, [r4, #16]
 800a166:	6165      	str	r5, [r4, #20]
 800a168:	444e      	add	r6, r9
 800a16a:	eba5 0509 	sub.w	r5, r5, r9
 800a16e:	6026      	str	r6, [r4, #0]
 800a170:	60a5      	str	r5, [r4, #8]
 800a172:	463e      	mov	r6, r7
 800a174:	42be      	cmp	r6, r7
 800a176:	d900      	bls.n	800a17a <__ssputs_r+0x86>
 800a178:	463e      	mov	r6, r7
 800a17a:	6820      	ldr	r0, [r4, #0]
 800a17c:	4632      	mov	r2, r6
 800a17e:	4641      	mov	r1, r8
 800a180:	f000 f966 	bl	800a450 <memmove>
 800a184:	68a3      	ldr	r3, [r4, #8]
 800a186:	1b9b      	subs	r3, r3, r6
 800a188:	60a3      	str	r3, [r4, #8]
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	4433      	add	r3, r6
 800a18e:	6023      	str	r3, [r4, #0]
 800a190:	2000      	movs	r0, #0
 800a192:	e7db      	b.n	800a14c <__ssputs_r+0x58>
 800a194:	462a      	mov	r2, r5
 800a196:	f000 f981 	bl	800a49c <_realloc_r>
 800a19a:	4606      	mov	r6, r0
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d1e1      	bne.n	800a164 <__ssputs_r+0x70>
 800a1a0:	6921      	ldr	r1, [r4, #16]
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	f7ff fec6 	bl	8009f34 <_free_r>
 800a1a8:	e7c7      	b.n	800a13a <__ssputs_r+0x46>
	...

0800a1ac <_svfiprintf_r>:
 800a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	4698      	mov	r8, r3
 800a1b2:	898b      	ldrh	r3, [r1, #12]
 800a1b4:	061b      	lsls	r3, r3, #24
 800a1b6:	b09d      	sub	sp, #116	; 0x74
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	4614      	mov	r4, r2
 800a1be:	d50e      	bpl.n	800a1de <_svfiprintf_r+0x32>
 800a1c0:	690b      	ldr	r3, [r1, #16]
 800a1c2:	b963      	cbnz	r3, 800a1de <_svfiprintf_r+0x32>
 800a1c4:	2140      	movs	r1, #64	; 0x40
 800a1c6:	f7ff ff21 	bl	800a00c <_malloc_r>
 800a1ca:	6028      	str	r0, [r5, #0]
 800a1cc:	6128      	str	r0, [r5, #16]
 800a1ce:	b920      	cbnz	r0, 800a1da <_svfiprintf_r+0x2e>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	e0d1      	b.n	800a37e <_svfiprintf_r+0x1d2>
 800a1da:	2340      	movs	r3, #64	; 0x40
 800a1dc:	616b      	str	r3, [r5, #20]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e2:	2320      	movs	r3, #32
 800a1e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ec:	2330      	movs	r3, #48	; 0x30
 800a1ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a398 <_svfiprintf_r+0x1ec>
 800a1f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1f6:	f04f 0901 	mov.w	r9, #1
 800a1fa:	4623      	mov	r3, r4
 800a1fc:	469a      	mov	sl, r3
 800a1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a202:	b10a      	cbz	r2, 800a208 <_svfiprintf_r+0x5c>
 800a204:	2a25      	cmp	r2, #37	; 0x25
 800a206:	d1f9      	bne.n	800a1fc <_svfiprintf_r+0x50>
 800a208:	ebba 0b04 	subs.w	fp, sl, r4
 800a20c:	d00b      	beq.n	800a226 <_svfiprintf_r+0x7a>
 800a20e:	465b      	mov	r3, fp
 800a210:	4622      	mov	r2, r4
 800a212:	4629      	mov	r1, r5
 800a214:	4638      	mov	r0, r7
 800a216:	f7ff ff6d 	bl	800a0f4 <__ssputs_r>
 800a21a:	3001      	adds	r0, #1
 800a21c:	f000 80aa 	beq.w	800a374 <_svfiprintf_r+0x1c8>
 800a220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a222:	445a      	add	r2, fp
 800a224:	9209      	str	r2, [sp, #36]	; 0x24
 800a226:	f89a 3000 	ldrb.w	r3, [sl]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 80a2 	beq.w	800a374 <_svfiprintf_r+0x1c8>
 800a230:	2300      	movs	r3, #0
 800a232:	f04f 32ff 	mov.w	r2, #4294967295
 800a236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a23a:	f10a 0a01 	add.w	sl, sl, #1
 800a23e:	9304      	str	r3, [sp, #16]
 800a240:	9307      	str	r3, [sp, #28]
 800a242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a246:	931a      	str	r3, [sp, #104]	; 0x68
 800a248:	4654      	mov	r4, sl
 800a24a:	2205      	movs	r2, #5
 800a24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a250:	4851      	ldr	r0, [pc, #324]	; (800a398 <_svfiprintf_r+0x1ec>)
 800a252:	f7f5 ffc5 	bl	80001e0 <memchr>
 800a256:	9a04      	ldr	r2, [sp, #16]
 800a258:	b9d8      	cbnz	r0, 800a292 <_svfiprintf_r+0xe6>
 800a25a:	06d0      	lsls	r0, r2, #27
 800a25c:	bf44      	itt	mi
 800a25e:	2320      	movmi	r3, #32
 800a260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a264:	0711      	lsls	r1, r2, #28
 800a266:	bf44      	itt	mi
 800a268:	232b      	movmi	r3, #43	; 0x2b
 800a26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26e:	f89a 3000 	ldrb.w	r3, [sl]
 800a272:	2b2a      	cmp	r3, #42	; 0x2a
 800a274:	d015      	beq.n	800a2a2 <_svfiprintf_r+0xf6>
 800a276:	9a07      	ldr	r2, [sp, #28]
 800a278:	4654      	mov	r4, sl
 800a27a:	2000      	movs	r0, #0
 800a27c:	f04f 0c0a 	mov.w	ip, #10
 800a280:	4621      	mov	r1, r4
 800a282:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a286:	3b30      	subs	r3, #48	; 0x30
 800a288:	2b09      	cmp	r3, #9
 800a28a:	d94e      	bls.n	800a32a <_svfiprintf_r+0x17e>
 800a28c:	b1b0      	cbz	r0, 800a2bc <_svfiprintf_r+0x110>
 800a28e:	9207      	str	r2, [sp, #28]
 800a290:	e014      	b.n	800a2bc <_svfiprintf_r+0x110>
 800a292:	eba0 0308 	sub.w	r3, r0, r8
 800a296:	fa09 f303 	lsl.w	r3, r9, r3
 800a29a:	4313      	orrs	r3, r2
 800a29c:	9304      	str	r3, [sp, #16]
 800a29e:	46a2      	mov	sl, r4
 800a2a0:	e7d2      	b.n	800a248 <_svfiprintf_r+0x9c>
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	1d19      	adds	r1, r3, #4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	9103      	str	r1, [sp, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	bfbb      	ittet	lt
 800a2ae:	425b      	neglt	r3, r3
 800a2b0:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b4:	9307      	strge	r3, [sp, #28]
 800a2b6:	9307      	strlt	r3, [sp, #28]
 800a2b8:	bfb8      	it	lt
 800a2ba:	9204      	strlt	r2, [sp, #16]
 800a2bc:	7823      	ldrb	r3, [r4, #0]
 800a2be:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c0:	d10c      	bne.n	800a2dc <_svfiprintf_r+0x130>
 800a2c2:	7863      	ldrb	r3, [r4, #1]
 800a2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c6:	d135      	bne.n	800a334 <_svfiprintf_r+0x188>
 800a2c8:	9b03      	ldr	r3, [sp, #12]
 800a2ca:	1d1a      	adds	r2, r3, #4
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	9203      	str	r2, [sp, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bfb8      	it	lt
 800a2d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2d8:	3402      	adds	r4, #2
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3a8 <_svfiprintf_r+0x1fc>
 800a2e0:	7821      	ldrb	r1, [r4, #0]
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	f7f5 ff7b 	bl	80001e0 <memchr>
 800a2ea:	b140      	cbz	r0, 800a2fe <_svfiprintf_r+0x152>
 800a2ec:	2340      	movs	r3, #64	; 0x40
 800a2ee:	eba0 000a 	sub.w	r0, r0, sl
 800a2f2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	4303      	orrs	r3, r0
 800a2fa:	3401      	adds	r4, #1
 800a2fc:	9304      	str	r3, [sp, #16]
 800a2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a302:	4826      	ldr	r0, [pc, #152]	; (800a39c <_svfiprintf_r+0x1f0>)
 800a304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a308:	2206      	movs	r2, #6
 800a30a:	f7f5 ff69 	bl	80001e0 <memchr>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d038      	beq.n	800a384 <_svfiprintf_r+0x1d8>
 800a312:	4b23      	ldr	r3, [pc, #140]	; (800a3a0 <_svfiprintf_r+0x1f4>)
 800a314:	bb1b      	cbnz	r3, 800a35e <_svfiprintf_r+0x1b2>
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	3307      	adds	r3, #7
 800a31a:	f023 0307 	bic.w	r3, r3, #7
 800a31e:	3308      	adds	r3, #8
 800a320:	9303      	str	r3, [sp, #12]
 800a322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a324:	4433      	add	r3, r6
 800a326:	9309      	str	r3, [sp, #36]	; 0x24
 800a328:	e767      	b.n	800a1fa <_svfiprintf_r+0x4e>
 800a32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a32e:	460c      	mov	r4, r1
 800a330:	2001      	movs	r0, #1
 800a332:	e7a5      	b.n	800a280 <_svfiprintf_r+0xd4>
 800a334:	2300      	movs	r3, #0
 800a336:	3401      	adds	r4, #1
 800a338:	9305      	str	r3, [sp, #20]
 800a33a:	4619      	mov	r1, r3
 800a33c:	f04f 0c0a 	mov.w	ip, #10
 800a340:	4620      	mov	r0, r4
 800a342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a346:	3a30      	subs	r2, #48	; 0x30
 800a348:	2a09      	cmp	r2, #9
 800a34a:	d903      	bls.n	800a354 <_svfiprintf_r+0x1a8>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0c5      	beq.n	800a2dc <_svfiprintf_r+0x130>
 800a350:	9105      	str	r1, [sp, #20]
 800a352:	e7c3      	b.n	800a2dc <_svfiprintf_r+0x130>
 800a354:	fb0c 2101 	mla	r1, ip, r1, r2
 800a358:	4604      	mov	r4, r0
 800a35a:	2301      	movs	r3, #1
 800a35c:	e7f0      	b.n	800a340 <_svfiprintf_r+0x194>
 800a35e:	ab03      	add	r3, sp, #12
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	462a      	mov	r2, r5
 800a364:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <_svfiprintf_r+0x1f8>)
 800a366:	a904      	add	r1, sp, #16
 800a368:	4638      	mov	r0, r7
 800a36a:	f7fd ffc9 	bl	8008300 <_printf_float>
 800a36e:	1c42      	adds	r2, r0, #1
 800a370:	4606      	mov	r6, r0
 800a372:	d1d6      	bne.n	800a322 <_svfiprintf_r+0x176>
 800a374:	89ab      	ldrh	r3, [r5, #12]
 800a376:	065b      	lsls	r3, r3, #25
 800a378:	f53f af2c 	bmi.w	800a1d4 <_svfiprintf_r+0x28>
 800a37c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37e:	b01d      	add	sp, #116	; 0x74
 800a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a384:	ab03      	add	r3, sp, #12
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	462a      	mov	r2, r5
 800a38a:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <_svfiprintf_r+0x1f8>)
 800a38c:	a904      	add	r1, sp, #16
 800a38e:	4638      	mov	r0, r7
 800a390:	f7fe fa5a 	bl	8008848 <_printf_i>
 800a394:	e7eb      	b.n	800a36e <_svfiprintf_r+0x1c2>
 800a396:	bf00      	nop
 800a398:	0800e1b4 	.word	0x0800e1b4
 800a39c:	0800e1be 	.word	0x0800e1be
 800a3a0:	08008301 	.word	0x08008301
 800a3a4:	0800a0f5 	.word	0x0800a0f5
 800a3a8:	0800e1ba 	.word	0x0800e1ba

0800a3ac <_sbrk_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d06      	ldr	r5, [pc, #24]	; (800a3c8 <_sbrk_r+0x1c>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	602b      	str	r3, [r5, #0]
 800a3b8:	f7f8 fb34 	bl	8002a24 <_sbrk>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_sbrk_r+0x1a>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_sbrk_r+0x1a>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	2000061c 	.word	0x2000061c

0800a3cc <__assert_func>:
 800a3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ce:	4614      	mov	r4, r2
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4b09      	ldr	r3, [pc, #36]	; (800a3f8 <__assert_func+0x2c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	68d8      	ldr	r0, [r3, #12]
 800a3da:	b14c      	cbz	r4, 800a3f0 <__assert_func+0x24>
 800a3dc:	4b07      	ldr	r3, [pc, #28]	; (800a3fc <__assert_func+0x30>)
 800a3de:	9100      	str	r1, [sp, #0]
 800a3e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3e4:	4906      	ldr	r1, [pc, #24]	; (800a400 <__assert_func+0x34>)
 800a3e6:	462b      	mov	r3, r5
 800a3e8:	f000 f80e 	bl	800a408 <fiprintf>
 800a3ec:	f000 faac 	bl	800a948 <abort>
 800a3f0:	4b04      	ldr	r3, [pc, #16]	; (800a404 <__assert_func+0x38>)
 800a3f2:	461c      	mov	r4, r3
 800a3f4:	e7f3      	b.n	800a3de <__assert_func+0x12>
 800a3f6:	bf00      	nop
 800a3f8:	20000014 	.word	0x20000014
 800a3fc:	0800e1c5 	.word	0x0800e1c5
 800a400:	0800e1d2 	.word	0x0800e1d2
 800a404:	0800e200 	.word	0x0800e200

0800a408 <fiprintf>:
 800a408:	b40e      	push	{r1, r2, r3}
 800a40a:	b503      	push	{r0, r1, lr}
 800a40c:	4601      	mov	r1, r0
 800a40e:	ab03      	add	r3, sp, #12
 800a410:	4805      	ldr	r0, [pc, #20]	; (800a428 <fiprintf+0x20>)
 800a412:	f853 2b04 	ldr.w	r2, [r3], #4
 800a416:	6800      	ldr	r0, [r0, #0]
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	f000 f897 	bl	800a54c <_vfiprintf_r>
 800a41e:	b002      	add	sp, #8
 800a420:	f85d eb04 	ldr.w	lr, [sp], #4
 800a424:	b003      	add	sp, #12
 800a426:	4770      	bx	lr
 800a428:	20000014 	.word	0x20000014

0800a42c <__ascii_mbtowc>:
 800a42c:	b082      	sub	sp, #8
 800a42e:	b901      	cbnz	r1, 800a432 <__ascii_mbtowc+0x6>
 800a430:	a901      	add	r1, sp, #4
 800a432:	b142      	cbz	r2, 800a446 <__ascii_mbtowc+0x1a>
 800a434:	b14b      	cbz	r3, 800a44a <__ascii_mbtowc+0x1e>
 800a436:	7813      	ldrb	r3, [r2, #0]
 800a438:	600b      	str	r3, [r1, #0]
 800a43a:	7812      	ldrb	r2, [r2, #0]
 800a43c:	1e10      	subs	r0, r2, #0
 800a43e:	bf18      	it	ne
 800a440:	2001      	movne	r0, #1
 800a442:	b002      	add	sp, #8
 800a444:	4770      	bx	lr
 800a446:	4610      	mov	r0, r2
 800a448:	e7fb      	b.n	800a442 <__ascii_mbtowc+0x16>
 800a44a:	f06f 0001 	mvn.w	r0, #1
 800a44e:	e7f8      	b.n	800a442 <__ascii_mbtowc+0x16>

0800a450 <memmove>:
 800a450:	4288      	cmp	r0, r1
 800a452:	b510      	push	{r4, lr}
 800a454:	eb01 0402 	add.w	r4, r1, r2
 800a458:	d902      	bls.n	800a460 <memmove+0x10>
 800a45a:	4284      	cmp	r4, r0
 800a45c:	4623      	mov	r3, r4
 800a45e:	d807      	bhi.n	800a470 <memmove+0x20>
 800a460:	1e43      	subs	r3, r0, #1
 800a462:	42a1      	cmp	r1, r4
 800a464:	d008      	beq.n	800a478 <memmove+0x28>
 800a466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a46a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a46e:	e7f8      	b.n	800a462 <memmove+0x12>
 800a470:	4402      	add	r2, r0
 800a472:	4601      	mov	r1, r0
 800a474:	428a      	cmp	r2, r1
 800a476:	d100      	bne.n	800a47a <memmove+0x2a>
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a47e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a482:	e7f7      	b.n	800a474 <memmove+0x24>

0800a484 <__malloc_lock>:
 800a484:	4801      	ldr	r0, [pc, #4]	; (800a48c <__malloc_lock+0x8>)
 800a486:	f000 bc1f 	b.w	800acc8 <__retarget_lock_acquire_recursive>
 800a48a:	bf00      	nop
 800a48c:	20000620 	.word	0x20000620

0800a490 <__malloc_unlock>:
 800a490:	4801      	ldr	r0, [pc, #4]	; (800a498 <__malloc_unlock+0x8>)
 800a492:	f000 bc1a 	b.w	800acca <__retarget_lock_release_recursive>
 800a496:	bf00      	nop
 800a498:	20000620 	.word	0x20000620

0800a49c <_realloc_r>:
 800a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a0:	4680      	mov	r8, r0
 800a4a2:	4614      	mov	r4, r2
 800a4a4:	460e      	mov	r6, r1
 800a4a6:	b921      	cbnz	r1, 800a4b2 <_realloc_r+0x16>
 800a4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	f7ff bdad 	b.w	800a00c <_malloc_r>
 800a4b2:	b92a      	cbnz	r2, 800a4c0 <_realloc_r+0x24>
 800a4b4:	f7ff fd3e 	bl	8009f34 <_free_r>
 800a4b8:	4625      	mov	r5, r4
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c0:	f000 fc6a 	bl	800ad98 <_malloc_usable_size_r>
 800a4c4:	4284      	cmp	r4, r0
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	d802      	bhi.n	800a4d0 <_realloc_r+0x34>
 800a4ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4ce:	d812      	bhi.n	800a4f6 <_realloc_r+0x5a>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	f7ff fd9a 	bl	800a00c <_malloc_r>
 800a4d8:	4605      	mov	r5, r0
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d0ed      	beq.n	800a4ba <_realloc_r+0x1e>
 800a4de:	42bc      	cmp	r4, r7
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	bf28      	it	cs
 800a4e6:	463a      	movcs	r2, r7
 800a4e8:	f7ff f97c 	bl	80097e4 <memcpy>
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	f7ff fd20 	bl	8009f34 <_free_r>
 800a4f4:	e7e1      	b.n	800a4ba <_realloc_r+0x1e>
 800a4f6:	4635      	mov	r5, r6
 800a4f8:	e7df      	b.n	800a4ba <_realloc_r+0x1e>

0800a4fa <__sfputc_r>:
 800a4fa:	6893      	ldr	r3, [r2, #8]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	b410      	push	{r4}
 800a502:	6093      	str	r3, [r2, #8]
 800a504:	da08      	bge.n	800a518 <__sfputc_r+0x1e>
 800a506:	6994      	ldr	r4, [r2, #24]
 800a508:	42a3      	cmp	r3, r4
 800a50a:	db01      	blt.n	800a510 <__sfputc_r+0x16>
 800a50c:	290a      	cmp	r1, #10
 800a50e:	d103      	bne.n	800a518 <__sfputc_r+0x1e>
 800a510:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a514:	f000 b94a 	b.w	800a7ac <__swbuf_r>
 800a518:	6813      	ldr	r3, [r2, #0]
 800a51a:	1c58      	adds	r0, r3, #1
 800a51c:	6010      	str	r0, [r2, #0]
 800a51e:	7019      	strb	r1, [r3, #0]
 800a520:	4608      	mov	r0, r1
 800a522:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <__sfputs_r>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	4606      	mov	r6, r0
 800a52c:	460f      	mov	r7, r1
 800a52e:	4614      	mov	r4, r2
 800a530:	18d5      	adds	r5, r2, r3
 800a532:	42ac      	cmp	r4, r5
 800a534:	d101      	bne.n	800a53a <__sfputs_r+0x12>
 800a536:	2000      	movs	r0, #0
 800a538:	e007      	b.n	800a54a <__sfputs_r+0x22>
 800a53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53e:	463a      	mov	r2, r7
 800a540:	4630      	mov	r0, r6
 800a542:	f7ff ffda 	bl	800a4fa <__sfputc_r>
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	d1f3      	bne.n	800a532 <__sfputs_r+0xa>
 800a54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a54c <_vfiprintf_r>:
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	460d      	mov	r5, r1
 800a552:	b09d      	sub	sp, #116	; 0x74
 800a554:	4614      	mov	r4, r2
 800a556:	4698      	mov	r8, r3
 800a558:	4606      	mov	r6, r0
 800a55a:	b118      	cbz	r0, 800a564 <_vfiprintf_r+0x18>
 800a55c:	6983      	ldr	r3, [r0, #24]
 800a55e:	b90b      	cbnz	r3, 800a564 <_vfiprintf_r+0x18>
 800a560:	f000 fb14 	bl	800ab8c <__sinit>
 800a564:	4b89      	ldr	r3, [pc, #548]	; (800a78c <_vfiprintf_r+0x240>)
 800a566:	429d      	cmp	r5, r3
 800a568:	d11b      	bne.n	800a5a2 <_vfiprintf_r+0x56>
 800a56a:	6875      	ldr	r5, [r6, #4]
 800a56c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a56e:	07d9      	lsls	r1, r3, #31
 800a570:	d405      	bmi.n	800a57e <_vfiprintf_r+0x32>
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	059a      	lsls	r2, r3, #22
 800a576:	d402      	bmi.n	800a57e <_vfiprintf_r+0x32>
 800a578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a57a:	f000 fba5 	bl	800acc8 <__retarget_lock_acquire_recursive>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	071b      	lsls	r3, r3, #28
 800a582:	d501      	bpl.n	800a588 <_vfiprintf_r+0x3c>
 800a584:	692b      	ldr	r3, [r5, #16]
 800a586:	b9eb      	cbnz	r3, 800a5c4 <_vfiprintf_r+0x78>
 800a588:	4629      	mov	r1, r5
 800a58a:	4630      	mov	r0, r6
 800a58c:	f000 f96e 	bl	800a86c <__swsetup_r>
 800a590:	b1c0      	cbz	r0, 800a5c4 <_vfiprintf_r+0x78>
 800a592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a594:	07dc      	lsls	r4, r3, #31
 800a596:	d50e      	bpl.n	800a5b6 <_vfiprintf_r+0x6a>
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	b01d      	add	sp, #116	; 0x74
 800a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a2:	4b7b      	ldr	r3, [pc, #492]	; (800a790 <_vfiprintf_r+0x244>)
 800a5a4:	429d      	cmp	r5, r3
 800a5a6:	d101      	bne.n	800a5ac <_vfiprintf_r+0x60>
 800a5a8:	68b5      	ldr	r5, [r6, #8]
 800a5aa:	e7df      	b.n	800a56c <_vfiprintf_r+0x20>
 800a5ac:	4b79      	ldr	r3, [pc, #484]	; (800a794 <_vfiprintf_r+0x248>)
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	bf08      	it	eq
 800a5b2:	68f5      	ldreq	r5, [r6, #12]
 800a5b4:	e7da      	b.n	800a56c <_vfiprintf_r+0x20>
 800a5b6:	89ab      	ldrh	r3, [r5, #12]
 800a5b8:	0598      	lsls	r0, r3, #22
 800a5ba:	d4ed      	bmi.n	800a598 <_vfiprintf_r+0x4c>
 800a5bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5be:	f000 fb84 	bl	800acca <__retarget_lock_release_recursive>
 800a5c2:	e7e9      	b.n	800a598 <_vfiprintf_r+0x4c>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c8:	2320      	movs	r3, #32
 800a5ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d2:	2330      	movs	r3, #48	; 0x30
 800a5d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a798 <_vfiprintf_r+0x24c>
 800a5d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5dc:	f04f 0901 	mov.w	r9, #1
 800a5e0:	4623      	mov	r3, r4
 800a5e2:	469a      	mov	sl, r3
 800a5e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e8:	b10a      	cbz	r2, 800a5ee <_vfiprintf_r+0xa2>
 800a5ea:	2a25      	cmp	r2, #37	; 0x25
 800a5ec:	d1f9      	bne.n	800a5e2 <_vfiprintf_r+0x96>
 800a5ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a5f2:	d00b      	beq.n	800a60c <_vfiprintf_r+0xc0>
 800a5f4:	465b      	mov	r3, fp
 800a5f6:	4622      	mov	r2, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7ff ff94 	bl	800a528 <__sfputs_r>
 800a600:	3001      	adds	r0, #1
 800a602:	f000 80aa 	beq.w	800a75a <_vfiprintf_r+0x20e>
 800a606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a608:	445a      	add	r2, fp
 800a60a:	9209      	str	r2, [sp, #36]	; 0x24
 800a60c:	f89a 3000 	ldrb.w	r3, [sl]
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 80a2 	beq.w	800a75a <_vfiprintf_r+0x20e>
 800a616:	2300      	movs	r3, #0
 800a618:	f04f 32ff 	mov.w	r2, #4294967295
 800a61c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a620:	f10a 0a01 	add.w	sl, sl, #1
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	9307      	str	r3, [sp, #28]
 800a628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a62c:	931a      	str	r3, [sp, #104]	; 0x68
 800a62e:	4654      	mov	r4, sl
 800a630:	2205      	movs	r2, #5
 800a632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a636:	4858      	ldr	r0, [pc, #352]	; (800a798 <_vfiprintf_r+0x24c>)
 800a638:	f7f5 fdd2 	bl	80001e0 <memchr>
 800a63c:	9a04      	ldr	r2, [sp, #16]
 800a63e:	b9d8      	cbnz	r0, 800a678 <_vfiprintf_r+0x12c>
 800a640:	06d1      	lsls	r1, r2, #27
 800a642:	bf44      	itt	mi
 800a644:	2320      	movmi	r3, #32
 800a646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64a:	0713      	lsls	r3, r2, #28
 800a64c:	bf44      	itt	mi
 800a64e:	232b      	movmi	r3, #43	; 0x2b
 800a650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a654:	f89a 3000 	ldrb.w	r3, [sl]
 800a658:	2b2a      	cmp	r3, #42	; 0x2a
 800a65a:	d015      	beq.n	800a688 <_vfiprintf_r+0x13c>
 800a65c:	9a07      	ldr	r2, [sp, #28]
 800a65e:	4654      	mov	r4, sl
 800a660:	2000      	movs	r0, #0
 800a662:	f04f 0c0a 	mov.w	ip, #10
 800a666:	4621      	mov	r1, r4
 800a668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a66c:	3b30      	subs	r3, #48	; 0x30
 800a66e:	2b09      	cmp	r3, #9
 800a670:	d94e      	bls.n	800a710 <_vfiprintf_r+0x1c4>
 800a672:	b1b0      	cbz	r0, 800a6a2 <_vfiprintf_r+0x156>
 800a674:	9207      	str	r2, [sp, #28]
 800a676:	e014      	b.n	800a6a2 <_vfiprintf_r+0x156>
 800a678:	eba0 0308 	sub.w	r3, r0, r8
 800a67c:	fa09 f303 	lsl.w	r3, r9, r3
 800a680:	4313      	orrs	r3, r2
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	46a2      	mov	sl, r4
 800a686:	e7d2      	b.n	800a62e <_vfiprintf_r+0xe2>
 800a688:	9b03      	ldr	r3, [sp, #12]
 800a68a:	1d19      	adds	r1, r3, #4
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	9103      	str	r1, [sp, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	bfbb      	ittet	lt
 800a694:	425b      	neglt	r3, r3
 800a696:	f042 0202 	orrlt.w	r2, r2, #2
 800a69a:	9307      	strge	r3, [sp, #28]
 800a69c:	9307      	strlt	r3, [sp, #28]
 800a69e:	bfb8      	it	lt
 800a6a0:	9204      	strlt	r2, [sp, #16]
 800a6a2:	7823      	ldrb	r3, [r4, #0]
 800a6a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a6a6:	d10c      	bne.n	800a6c2 <_vfiprintf_r+0x176>
 800a6a8:	7863      	ldrb	r3, [r4, #1]
 800a6aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ac:	d135      	bne.n	800a71a <_vfiprintf_r+0x1ce>
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	1d1a      	adds	r2, r3, #4
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	9203      	str	r2, [sp, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	bfb8      	it	lt
 800a6ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6be:	3402      	adds	r4, #2
 800a6c0:	9305      	str	r3, [sp, #20]
 800a6c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7a8 <_vfiprintf_r+0x25c>
 800a6c6:	7821      	ldrb	r1, [r4, #0]
 800a6c8:	2203      	movs	r2, #3
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	f7f5 fd88 	bl	80001e0 <memchr>
 800a6d0:	b140      	cbz	r0, 800a6e4 <_vfiprintf_r+0x198>
 800a6d2:	2340      	movs	r3, #64	; 0x40
 800a6d4:	eba0 000a 	sub.w	r0, r0, sl
 800a6d8:	fa03 f000 	lsl.w	r0, r3, r0
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	4303      	orrs	r3, r0
 800a6e0:	3401      	adds	r4, #1
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e8:	482c      	ldr	r0, [pc, #176]	; (800a79c <_vfiprintf_r+0x250>)
 800a6ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6ee:	2206      	movs	r2, #6
 800a6f0:	f7f5 fd76 	bl	80001e0 <memchr>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d03f      	beq.n	800a778 <_vfiprintf_r+0x22c>
 800a6f8:	4b29      	ldr	r3, [pc, #164]	; (800a7a0 <_vfiprintf_r+0x254>)
 800a6fa:	bb1b      	cbnz	r3, 800a744 <_vfiprintf_r+0x1f8>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	3307      	adds	r3, #7
 800a700:	f023 0307 	bic.w	r3, r3, #7
 800a704:	3308      	adds	r3, #8
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70a:	443b      	add	r3, r7
 800a70c:	9309      	str	r3, [sp, #36]	; 0x24
 800a70e:	e767      	b.n	800a5e0 <_vfiprintf_r+0x94>
 800a710:	fb0c 3202 	mla	r2, ip, r2, r3
 800a714:	460c      	mov	r4, r1
 800a716:	2001      	movs	r0, #1
 800a718:	e7a5      	b.n	800a666 <_vfiprintf_r+0x11a>
 800a71a:	2300      	movs	r3, #0
 800a71c:	3401      	adds	r4, #1
 800a71e:	9305      	str	r3, [sp, #20]
 800a720:	4619      	mov	r1, r3
 800a722:	f04f 0c0a 	mov.w	ip, #10
 800a726:	4620      	mov	r0, r4
 800a728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a72c:	3a30      	subs	r2, #48	; 0x30
 800a72e:	2a09      	cmp	r2, #9
 800a730:	d903      	bls.n	800a73a <_vfiprintf_r+0x1ee>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0c5      	beq.n	800a6c2 <_vfiprintf_r+0x176>
 800a736:	9105      	str	r1, [sp, #20]
 800a738:	e7c3      	b.n	800a6c2 <_vfiprintf_r+0x176>
 800a73a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a73e:	4604      	mov	r4, r0
 800a740:	2301      	movs	r3, #1
 800a742:	e7f0      	b.n	800a726 <_vfiprintf_r+0x1da>
 800a744:	ab03      	add	r3, sp, #12
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	462a      	mov	r2, r5
 800a74a:	4b16      	ldr	r3, [pc, #88]	; (800a7a4 <_vfiprintf_r+0x258>)
 800a74c:	a904      	add	r1, sp, #16
 800a74e:	4630      	mov	r0, r6
 800a750:	f7fd fdd6 	bl	8008300 <_printf_float>
 800a754:	4607      	mov	r7, r0
 800a756:	1c78      	adds	r0, r7, #1
 800a758:	d1d6      	bne.n	800a708 <_vfiprintf_r+0x1bc>
 800a75a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a75c:	07d9      	lsls	r1, r3, #31
 800a75e:	d405      	bmi.n	800a76c <_vfiprintf_r+0x220>
 800a760:	89ab      	ldrh	r3, [r5, #12]
 800a762:	059a      	lsls	r2, r3, #22
 800a764:	d402      	bmi.n	800a76c <_vfiprintf_r+0x220>
 800a766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a768:	f000 faaf 	bl	800acca <__retarget_lock_release_recursive>
 800a76c:	89ab      	ldrh	r3, [r5, #12]
 800a76e:	065b      	lsls	r3, r3, #25
 800a770:	f53f af12 	bmi.w	800a598 <_vfiprintf_r+0x4c>
 800a774:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a776:	e711      	b.n	800a59c <_vfiprintf_r+0x50>
 800a778:	ab03      	add	r3, sp, #12
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	462a      	mov	r2, r5
 800a77e:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <_vfiprintf_r+0x258>)
 800a780:	a904      	add	r1, sp, #16
 800a782:	4630      	mov	r0, r6
 800a784:	f7fe f860 	bl	8008848 <_printf_i>
 800a788:	e7e4      	b.n	800a754 <_vfiprintf_r+0x208>
 800a78a:	bf00      	nop
 800a78c:	0800e32c 	.word	0x0800e32c
 800a790:	0800e34c 	.word	0x0800e34c
 800a794:	0800e30c 	.word	0x0800e30c
 800a798:	0800e1b4 	.word	0x0800e1b4
 800a79c:	0800e1be 	.word	0x0800e1be
 800a7a0:	08008301 	.word	0x08008301
 800a7a4:	0800a529 	.word	0x0800a529
 800a7a8:	0800e1ba 	.word	0x0800e1ba

0800a7ac <__swbuf_r>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	460e      	mov	r6, r1
 800a7b0:	4614      	mov	r4, r2
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	b118      	cbz	r0, 800a7be <__swbuf_r+0x12>
 800a7b6:	6983      	ldr	r3, [r0, #24]
 800a7b8:	b90b      	cbnz	r3, 800a7be <__swbuf_r+0x12>
 800a7ba:	f000 f9e7 	bl	800ab8c <__sinit>
 800a7be:	4b21      	ldr	r3, [pc, #132]	; (800a844 <__swbuf_r+0x98>)
 800a7c0:	429c      	cmp	r4, r3
 800a7c2:	d12b      	bne.n	800a81c <__swbuf_r+0x70>
 800a7c4:	686c      	ldr	r4, [r5, #4]
 800a7c6:	69a3      	ldr	r3, [r4, #24]
 800a7c8:	60a3      	str	r3, [r4, #8]
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	071a      	lsls	r2, r3, #28
 800a7ce:	d52f      	bpl.n	800a830 <__swbuf_r+0x84>
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	b36b      	cbz	r3, 800a830 <__swbuf_r+0x84>
 800a7d4:	6923      	ldr	r3, [r4, #16]
 800a7d6:	6820      	ldr	r0, [r4, #0]
 800a7d8:	1ac0      	subs	r0, r0, r3
 800a7da:	6963      	ldr	r3, [r4, #20]
 800a7dc:	b2f6      	uxtb	r6, r6
 800a7de:	4283      	cmp	r3, r0
 800a7e0:	4637      	mov	r7, r6
 800a7e2:	dc04      	bgt.n	800a7ee <__swbuf_r+0x42>
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f000 f93c 	bl	800aa64 <_fflush_r>
 800a7ec:	bb30      	cbnz	r0, 800a83c <__swbuf_r+0x90>
 800a7ee:	68a3      	ldr	r3, [r4, #8]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	60a3      	str	r3, [r4, #8]
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	6022      	str	r2, [r4, #0]
 800a7fa:	701e      	strb	r6, [r3, #0]
 800a7fc:	6963      	ldr	r3, [r4, #20]
 800a7fe:	3001      	adds	r0, #1
 800a800:	4283      	cmp	r3, r0
 800a802:	d004      	beq.n	800a80e <__swbuf_r+0x62>
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	07db      	lsls	r3, r3, #31
 800a808:	d506      	bpl.n	800a818 <__swbuf_r+0x6c>
 800a80a:	2e0a      	cmp	r6, #10
 800a80c:	d104      	bne.n	800a818 <__swbuf_r+0x6c>
 800a80e:	4621      	mov	r1, r4
 800a810:	4628      	mov	r0, r5
 800a812:	f000 f927 	bl	800aa64 <_fflush_r>
 800a816:	b988      	cbnz	r0, 800a83c <__swbuf_r+0x90>
 800a818:	4638      	mov	r0, r7
 800a81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <__swbuf_r+0x9c>)
 800a81e:	429c      	cmp	r4, r3
 800a820:	d101      	bne.n	800a826 <__swbuf_r+0x7a>
 800a822:	68ac      	ldr	r4, [r5, #8]
 800a824:	e7cf      	b.n	800a7c6 <__swbuf_r+0x1a>
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <__swbuf_r+0xa0>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	bf08      	it	eq
 800a82c:	68ec      	ldreq	r4, [r5, #12]
 800a82e:	e7ca      	b.n	800a7c6 <__swbuf_r+0x1a>
 800a830:	4621      	mov	r1, r4
 800a832:	4628      	mov	r0, r5
 800a834:	f000 f81a 	bl	800a86c <__swsetup_r>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d0cb      	beq.n	800a7d4 <__swbuf_r+0x28>
 800a83c:	f04f 37ff 	mov.w	r7, #4294967295
 800a840:	e7ea      	b.n	800a818 <__swbuf_r+0x6c>
 800a842:	bf00      	nop
 800a844:	0800e32c 	.word	0x0800e32c
 800a848:	0800e34c 	.word	0x0800e34c
 800a84c:	0800e30c 	.word	0x0800e30c

0800a850 <__ascii_wctomb>:
 800a850:	b149      	cbz	r1, 800a866 <__ascii_wctomb+0x16>
 800a852:	2aff      	cmp	r2, #255	; 0xff
 800a854:	bf85      	ittet	hi
 800a856:	238a      	movhi	r3, #138	; 0x8a
 800a858:	6003      	strhi	r3, [r0, #0]
 800a85a:	700a      	strbls	r2, [r1, #0]
 800a85c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a860:	bf98      	it	ls
 800a862:	2001      	movls	r0, #1
 800a864:	4770      	bx	lr
 800a866:	4608      	mov	r0, r1
 800a868:	4770      	bx	lr
	...

0800a86c <__swsetup_r>:
 800a86c:	4b32      	ldr	r3, [pc, #200]	; (800a938 <__swsetup_r+0xcc>)
 800a86e:	b570      	push	{r4, r5, r6, lr}
 800a870:	681d      	ldr	r5, [r3, #0]
 800a872:	4606      	mov	r6, r0
 800a874:	460c      	mov	r4, r1
 800a876:	b125      	cbz	r5, 800a882 <__swsetup_r+0x16>
 800a878:	69ab      	ldr	r3, [r5, #24]
 800a87a:	b913      	cbnz	r3, 800a882 <__swsetup_r+0x16>
 800a87c:	4628      	mov	r0, r5
 800a87e:	f000 f985 	bl	800ab8c <__sinit>
 800a882:	4b2e      	ldr	r3, [pc, #184]	; (800a93c <__swsetup_r+0xd0>)
 800a884:	429c      	cmp	r4, r3
 800a886:	d10f      	bne.n	800a8a8 <__swsetup_r+0x3c>
 800a888:	686c      	ldr	r4, [r5, #4]
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a890:	0719      	lsls	r1, r3, #28
 800a892:	d42c      	bmi.n	800a8ee <__swsetup_r+0x82>
 800a894:	06dd      	lsls	r5, r3, #27
 800a896:	d411      	bmi.n	800a8bc <__swsetup_r+0x50>
 800a898:	2309      	movs	r3, #9
 800a89a:	6033      	str	r3, [r6, #0]
 800a89c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8a0:	81a3      	strh	r3, [r4, #12]
 800a8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a6:	e03e      	b.n	800a926 <__swsetup_r+0xba>
 800a8a8:	4b25      	ldr	r3, [pc, #148]	; (800a940 <__swsetup_r+0xd4>)
 800a8aa:	429c      	cmp	r4, r3
 800a8ac:	d101      	bne.n	800a8b2 <__swsetup_r+0x46>
 800a8ae:	68ac      	ldr	r4, [r5, #8]
 800a8b0:	e7eb      	b.n	800a88a <__swsetup_r+0x1e>
 800a8b2:	4b24      	ldr	r3, [pc, #144]	; (800a944 <__swsetup_r+0xd8>)
 800a8b4:	429c      	cmp	r4, r3
 800a8b6:	bf08      	it	eq
 800a8b8:	68ec      	ldreq	r4, [r5, #12]
 800a8ba:	e7e6      	b.n	800a88a <__swsetup_r+0x1e>
 800a8bc:	0758      	lsls	r0, r3, #29
 800a8be:	d512      	bpl.n	800a8e6 <__swsetup_r+0x7a>
 800a8c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8c2:	b141      	cbz	r1, 800a8d6 <__swsetup_r+0x6a>
 800a8c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8c8:	4299      	cmp	r1, r3
 800a8ca:	d002      	beq.n	800a8d2 <__swsetup_r+0x66>
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f7ff fb31 	bl	8009f34 <_free_r>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	6063      	str	r3, [r4, #4]
 800a8e2:	6923      	ldr	r3, [r4, #16]
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	f043 0308 	orr.w	r3, r3, #8
 800a8ec:	81a3      	strh	r3, [r4, #12]
 800a8ee:	6923      	ldr	r3, [r4, #16]
 800a8f0:	b94b      	cbnz	r3, 800a906 <__swsetup_r+0x9a>
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8fc:	d003      	beq.n	800a906 <__swsetup_r+0x9a>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4630      	mov	r0, r6
 800a902:	f000 fa09 	bl	800ad18 <__smakebuf_r>
 800a906:	89a0      	ldrh	r0, [r4, #12]
 800a908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a90c:	f010 0301 	ands.w	r3, r0, #1
 800a910:	d00a      	beq.n	800a928 <__swsetup_r+0xbc>
 800a912:	2300      	movs	r3, #0
 800a914:	60a3      	str	r3, [r4, #8]
 800a916:	6963      	ldr	r3, [r4, #20]
 800a918:	425b      	negs	r3, r3
 800a91a:	61a3      	str	r3, [r4, #24]
 800a91c:	6923      	ldr	r3, [r4, #16]
 800a91e:	b943      	cbnz	r3, 800a932 <__swsetup_r+0xc6>
 800a920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a924:	d1ba      	bne.n	800a89c <__swsetup_r+0x30>
 800a926:	bd70      	pop	{r4, r5, r6, pc}
 800a928:	0781      	lsls	r1, r0, #30
 800a92a:	bf58      	it	pl
 800a92c:	6963      	ldrpl	r3, [r4, #20]
 800a92e:	60a3      	str	r3, [r4, #8]
 800a930:	e7f4      	b.n	800a91c <__swsetup_r+0xb0>
 800a932:	2000      	movs	r0, #0
 800a934:	e7f7      	b.n	800a926 <__swsetup_r+0xba>
 800a936:	bf00      	nop
 800a938:	20000014 	.word	0x20000014
 800a93c:	0800e32c 	.word	0x0800e32c
 800a940:	0800e34c 	.word	0x0800e34c
 800a944:	0800e30c 	.word	0x0800e30c

0800a948 <abort>:
 800a948:	b508      	push	{r3, lr}
 800a94a:	2006      	movs	r0, #6
 800a94c:	f000 fa54 	bl	800adf8 <raise>
 800a950:	2001      	movs	r0, #1
 800a952:	f7f7 ffef 	bl	8002934 <_exit>
	...

0800a958 <__sflush_r>:
 800a958:	898a      	ldrh	r2, [r1, #12]
 800a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	4605      	mov	r5, r0
 800a960:	0710      	lsls	r0, r2, #28
 800a962:	460c      	mov	r4, r1
 800a964:	d458      	bmi.n	800aa18 <__sflush_r+0xc0>
 800a966:	684b      	ldr	r3, [r1, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	dc05      	bgt.n	800a978 <__sflush_r+0x20>
 800a96c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	dc02      	bgt.n	800a978 <__sflush_r+0x20>
 800a972:	2000      	movs	r0, #0
 800a974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a97a:	2e00      	cmp	r6, #0
 800a97c:	d0f9      	beq.n	800a972 <__sflush_r+0x1a>
 800a97e:	2300      	movs	r3, #0
 800a980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a984:	682f      	ldr	r7, [r5, #0]
 800a986:	602b      	str	r3, [r5, #0]
 800a988:	d032      	beq.n	800a9f0 <__sflush_r+0x98>
 800a98a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	075a      	lsls	r2, r3, #29
 800a990:	d505      	bpl.n	800a99e <__sflush_r+0x46>
 800a992:	6863      	ldr	r3, [r4, #4]
 800a994:	1ac0      	subs	r0, r0, r3
 800a996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a998:	b10b      	cbz	r3, 800a99e <__sflush_r+0x46>
 800a99a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a99c:	1ac0      	subs	r0, r0, r3
 800a99e:	2300      	movs	r3, #0
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9a4:	6a21      	ldr	r1, [r4, #32]
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	47b0      	blx	r6
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	d106      	bne.n	800a9be <__sflush_r+0x66>
 800a9b0:	6829      	ldr	r1, [r5, #0]
 800a9b2:	291d      	cmp	r1, #29
 800a9b4:	d82c      	bhi.n	800aa10 <__sflush_r+0xb8>
 800a9b6:	4a2a      	ldr	r2, [pc, #168]	; (800aa60 <__sflush_r+0x108>)
 800a9b8:	40ca      	lsrs	r2, r1
 800a9ba:	07d6      	lsls	r6, r2, #31
 800a9bc:	d528      	bpl.n	800aa10 <__sflush_r+0xb8>
 800a9be:	2200      	movs	r2, #0
 800a9c0:	6062      	str	r2, [r4, #4]
 800a9c2:	04d9      	lsls	r1, r3, #19
 800a9c4:	6922      	ldr	r2, [r4, #16]
 800a9c6:	6022      	str	r2, [r4, #0]
 800a9c8:	d504      	bpl.n	800a9d4 <__sflush_r+0x7c>
 800a9ca:	1c42      	adds	r2, r0, #1
 800a9cc:	d101      	bne.n	800a9d2 <__sflush_r+0x7a>
 800a9ce:	682b      	ldr	r3, [r5, #0]
 800a9d0:	b903      	cbnz	r3, 800a9d4 <__sflush_r+0x7c>
 800a9d2:	6560      	str	r0, [r4, #84]	; 0x54
 800a9d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9d6:	602f      	str	r7, [r5, #0]
 800a9d8:	2900      	cmp	r1, #0
 800a9da:	d0ca      	beq.n	800a972 <__sflush_r+0x1a>
 800a9dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9e0:	4299      	cmp	r1, r3
 800a9e2:	d002      	beq.n	800a9ea <__sflush_r+0x92>
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	f7ff faa5 	bl	8009f34 <_free_r>
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a9ee:	e7c1      	b.n	800a974 <__sflush_r+0x1c>
 800a9f0:	6a21      	ldr	r1, [r4, #32]
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	47b0      	blx	r6
 800a9f8:	1c41      	adds	r1, r0, #1
 800a9fa:	d1c7      	bne.n	800a98c <__sflush_r+0x34>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0c4      	beq.n	800a98c <__sflush_r+0x34>
 800aa02:	2b1d      	cmp	r3, #29
 800aa04:	d001      	beq.n	800aa0a <__sflush_r+0xb2>
 800aa06:	2b16      	cmp	r3, #22
 800aa08:	d101      	bne.n	800aa0e <__sflush_r+0xb6>
 800aa0a:	602f      	str	r7, [r5, #0]
 800aa0c:	e7b1      	b.n	800a972 <__sflush_r+0x1a>
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa14:	81a3      	strh	r3, [r4, #12]
 800aa16:	e7ad      	b.n	800a974 <__sflush_r+0x1c>
 800aa18:	690f      	ldr	r7, [r1, #16]
 800aa1a:	2f00      	cmp	r7, #0
 800aa1c:	d0a9      	beq.n	800a972 <__sflush_r+0x1a>
 800aa1e:	0793      	lsls	r3, r2, #30
 800aa20:	680e      	ldr	r6, [r1, #0]
 800aa22:	bf08      	it	eq
 800aa24:	694b      	ldreq	r3, [r1, #20]
 800aa26:	600f      	str	r7, [r1, #0]
 800aa28:	bf18      	it	ne
 800aa2a:	2300      	movne	r3, #0
 800aa2c:	eba6 0807 	sub.w	r8, r6, r7
 800aa30:	608b      	str	r3, [r1, #8]
 800aa32:	f1b8 0f00 	cmp.w	r8, #0
 800aa36:	dd9c      	ble.n	800a972 <__sflush_r+0x1a>
 800aa38:	6a21      	ldr	r1, [r4, #32]
 800aa3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa3c:	4643      	mov	r3, r8
 800aa3e:	463a      	mov	r2, r7
 800aa40:	4628      	mov	r0, r5
 800aa42:	47b0      	blx	r6
 800aa44:	2800      	cmp	r0, #0
 800aa46:	dc06      	bgt.n	800aa56 <__sflush_r+0xfe>
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	e78e      	b.n	800a974 <__sflush_r+0x1c>
 800aa56:	4407      	add	r7, r0
 800aa58:	eba8 0800 	sub.w	r8, r8, r0
 800aa5c:	e7e9      	b.n	800aa32 <__sflush_r+0xda>
 800aa5e:	bf00      	nop
 800aa60:	20400001 	.word	0x20400001

0800aa64 <_fflush_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	690b      	ldr	r3, [r1, #16]
 800aa68:	4605      	mov	r5, r0
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	b913      	cbnz	r3, 800aa74 <_fflush_r+0x10>
 800aa6e:	2500      	movs	r5, #0
 800aa70:	4628      	mov	r0, r5
 800aa72:	bd38      	pop	{r3, r4, r5, pc}
 800aa74:	b118      	cbz	r0, 800aa7e <_fflush_r+0x1a>
 800aa76:	6983      	ldr	r3, [r0, #24]
 800aa78:	b90b      	cbnz	r3, 800aa7e <_fflush_r+0x1a>
 800aa7a:	f000 f887 	bl	800ab8c <__sinit>
 800aa7e:	4b14      	ldr	r3, [pc, #80]	; (800aad0 <_fflush_r+0x6c>)
 800aa80:	429c      	cmp	r4, r3
 800aa82:	d11b      	bne.n	800aabc <_fflush_r+0x58>
 800aa84:	686c      	ldr	r4, [r5, #4]
 800aa86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0ef      	beq.n	800aa6e <_fflush_r+0xa>
 800aa8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa90:	07d0      	lsls	r0, r2, #31
 800aa92:	d404      	bmi.n	800aa9e <_fflush_r+0x3a>
 800aa94:	0599      	lsls	r1, r3, #22
 800aa96:	d402      	bmi.n	800aa9e <_fflush_r+0x3a>
 800aa98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa9a:	f000 f915 	bl	800acc8 <__retarget_lock_acquire_recursive>
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	f7ff ff59 	bl	800a958 <__sflush_r>
 800aaa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaa8:	07da      	lsls	r2, r3, #31
 800aaaa:	4605      	mov	r5, r0
 800aaac:	d4e0      	bmi.n	800aa70 <_fflush_r+0xc>
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	059b      	lsls	r3, r3, #22
 800aab2:	d4dd      	bmi.n	800aa70 <_fflush_r+0xc>
 800aab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aab6:	f000 f908 	bl	800acca <__retarget_lock_release_recursive>
 800aaba:	e7d9      	b.n	800aa70 <_fflush_r+0xc>
 800aabc:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <_fflush_r+0x70>)
 800aabe:	429c      	cmp	r4, r3
 800aac0:	d101      	bne.n	800aac6 <_fflush_r+0x62>
 800aac2:	68ac      	ldr	r4, [r5, #8]
 800aac4:	e7df      	b.n	800aa86 <_fflush_r+0x22>
 800aac6:	4b04      	ldr	r3, [pc, #16]	; (800aad8 <_fflush_r+0x74>)
 800aac8:	429c      	cmp	r4, r3
 800aaca:	bf08      	it	eq
 800aacc:	68ec      	ldreq	r4, [r5, #12]
 800aace:	e7da      	b.n	800aa86 <_fflush_r+0x22>
 800aad0:	0800e32c 	.word	0x0800e32c
 800aad4:	0800e34c 	.word	0x0800e34c
 800aad8:	0800e30c 	.word	0x0800e30c

0800aadc <std>:
 800aadc:	2300      	movs	r3, #0
 800aade:	b510      	push	{r4, lr}
 800aae0:	4604      	mov	r4, r0
 800aae2:	e9c0 3300 	strd	r3, r3, [r0]
 800aae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaea:	6083      	str	r3, [r0, #8]
 800aaec:	8181      	strh	r1, [r0, #12]
 800aaee:	6643      	str	r3, [r0, #100]	; 0x64
 800aaf0:	81c2      	strh	r2, [r0, #14]
 800aaf2:	6183      	str	r3, [r0, #24]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	2208      	movs	r2, #8
 800aaf8:	305c      	adds	r0, #92	; 0x5c
 800aafa:	f7fd fb59 	bl	80081b0 <memset>
 800aafe:	4b05      	ldr	r3, [pc, #20]	; (800ab14 <std+0x38>)
 800ab00:	6263      	str	r3, [r4, #36]	; 0x24
 800ab02:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <std+0x3c>)
 800ab04:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab06:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <std+0x40>)
 800ab08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab0a:	4b05      	ldr	r3, [pc, #20]	; (800ab20 <std+0x44>)
 800ab0c:	6224      	str	r4, [r4, #32]
 800ab0e:	6323      	str	r3, [r4, #48]	; 0x30
 800ab10:	bd10      	pop	{r4, pc}
 800ab12:	bf00      	nop
 800ab14:	0800ae31 	.word	0x0800ae31
 800ab18:	0800ae53 	.word	0x0800ae53
 800ab1c:	0800ae8b 	.word	0x0800ae8b
 800ab20:	0800aeaf 	.word	0x0800aeaf

0800ab24 <_cleanup_r>:
 800ab24:	4901      	ldr	r1, [pc, #4]	; (800ab2c <_cleanup_r+0x8>)
 800ab26:	f000 b8af 	b.w	800ac88 <_fwalk_reent>
 800ab2a:	bf00      	nop
 800ab2c:	0800aa65 	.word	0x0800aa65

0800ab30 <__sfmoreglue>:
 800ab30:	b570      	push	{r4, r5, r6, lr}
 800ab32:	2268      	movs	r2, #104	; 0x68
 800ab34:	1e4d      	subs	r5, r1, #1
 800ab36:	4355      	muls	r5, r2
 800ab38:	460e      	mov	r6, r1
 800ab3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab3e:	f7ff fa65 	bl	800a00c <_malloc_r>
 800ab42:	4604      	mov	r4, r0
 800ab44:	b140      	cbz	r0, 800ab58 <__sfmoreglue+0x28>
 800ab46:	2100      	movs	r1, #0
 800ab48:	e9c0 1600 	strd	r1, r6, [r0]
 800ab4c:	300c      	adds	r0, #12
 800ab4e:	60a0      	str	r0, [r4, #8]
 800ab50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab54:	f7fd fb2c 	bl	80081b0 <memset>
 800ab58:	4620      	mov	r0, r4
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}

0800ab5c <__sfp_lock_acquire>:
 800ab5c:	4801      	ldr	r0, [pc, #4]	; (800ab64 <__sfp_lock_acquire+0x8>)
 800ab5e:	f000 b8b3 	b.w	800acc8 <__retarget_lock_acquire_recursive>
 800ab62:	bf00      	nop
 800ab64:	20000621 	.word	0x20000621

0800ab68 <__sfp_lock_release>:
 800ab68:	4801      	ldr	r0, [pc, #4]	; (800ab70 <__sfp_lock_release+0x8>)
 800ab6a:	f000 b8ae 	b.w	800acca <__retarget_lock_release_recursive>
 800ab6e:	bf00      	nop
 800ab70:	20000621 	.word	0x20000621

0800ab74 <__sinit_lock_acquire>:
 800ab74:	4801      	ldr	r0, [pc, #4]	; (800ab7c <__sinit_lock_acquire+0x8>)
 800ab76:	f000 b8a7 	b.w	800acc8 <__retarget_lock_acquire_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	20000622 	.word	0x20000622

0800ab80 <__sinit_lock_release>:
 800ab80:	4801      	ldr	r0, [pc, #4]	; (800ab88 <__sinit_lock_release+0x8>)
 800ab82:	f000 b8a2 	b.w	800acca <__retarget_lock_release_recursive>
 800ab86:	bf00      	nop
 800ab88:	20000622 	.word	0x20000622

0800ab8c <__sinit>:
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	4604      	mov	r4, r0
 800ab90:	f7ff fff0 	bl	800ab74 <__sinit_lock_acquire>
 800ab94:	69a3      	ldr	r3, [r4, #24]
 800ab96:	b11b      	cbz	r3, 800aba0 <__sinit+0x14>
 800ab98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab9c:	f7ff bff0 	b.w	800ab80 <__sinit_lock_release>
 800aba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aba4:	6523      	str	r3, [r4, #80]	; 0x50
 800aba6:	4b13      	ldr	r3, [pc, #76]	; (800abf4 <__sinit+0x68>)
 800aba8:	4a13      	ldr	r2, [pc, #76]	; (800abf8 <__sinit+0x6c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	62a2      	str	r2, [r4, #40]	; 0x28
 800abae:	42a3      	cmp	r3, r4
 800abb0:	bf04      	itt	eq
 800abb2:	2301      	moveq	r3, #1
 800abb4:	61a3      	streq	r3, [r4, #24]
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 f820 	bl	800abfc <__sfp>
 800abbc:	6060      	str	r0, [r4, #4]
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 f81c 	bl	800abfc <__sfp>
 800abc4:	60a0      	str	r0, [r4, #8]
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 f818 	bl	800abfc <__sfp>
 800abcc:	2200      	movs	r2, #0
 800abce:	60e0      	str	r0, [r4, #12]
 800abd0:	2104      	movs	r1, #4
 800abd2:	6860      	ldr	r0, [r4, #4]
 800abd4:	f7ff ff82 	bl	800aadc <std>
 800abd8:	68a0      	ldr	r0, [r4, #8]
 800abda:	2201      	movs	r2, #1
 800abdc:	2109      	movs	r1, #9
 800abde:	f7ff ff7d 	bl	800aadc <std>
 800abe2:	68e0      	ldr	r0, [r4, #12]
 800abe4:	2202      	movs	r2, #2
 800abe6:	2112      	movs	r1, #18
 800abe8:	f7ff ff78 	bl	800aadc <std>
 800abec:	2301      	movs	r3, #1
 800abee:	61a3      	str	r3, [r4, #24]
 800abf0:	e7d2      	b.n	800ab98 <__sinit+0xc>
 800abf2:	bf00      	nop
 800abf4:	0800df90 	.word	0x0800df90
 800abf8:	0800ab25 	.word	0x0800ab25

0800abfc <__sfp>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	4607      	mov	r7, r0
 800ac00:	f7ff ffac 	bl	800ab5c <__sfp_lock_acquire>
 800ac04:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <__sfp+0x84>)
 800ac06:	681e      	ldr	r6, [r3, #0]
 800ac08:	69b3      	ldr	r3, [r6, #24]
 800ac0a:	b913      	cbnz	r3, 800ac12 <__sfp+0x16>
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	f7ff ffbd 	bl	800ab8c <__sinit>
 800ac12:	3648      	adds	r6, #72	; 0x48
 800ac14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	d503      	bpl.n	800ac24 <__sfp+0x28>
 800ac1c:	6833      	ldr	r3, [r6, #0]
 800ac1e:	b30b      	cbz	r3, 800ac64 <__sfp+0x68>
 800ac20:	6836      	ldr	r6, [r6, #0]
 800ac22:	e7f7      	b.n	800ac14 <__sfp+0x18>
 800ac24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac28:	b9d5      	cbnz	r5, 800ac60 <__sfp+0x64>
 800ac2a:	4b16      	ldr	r3, [pc, #88]	; (800ac84 <__sfp+0x88>)
 800ac2c:	60e3      	str	r3, [r4, #12]
 800ac2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac32:	6665      	str	r5, [r4, #100]	; 0x64
 800ac34:	f000 f847 	bl	800acc6 <__retarget_lock_init_recursive>
 800ac38:	f7ff ff96 	bl	800ab68 <__sfp_lock_release>
 800ac3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac44:	6025      	str	r5, [r4, #0]
 800ac46:	61a5      	str	r5, [r4, #24]
 800ac48:	2208      	movs	r2, #8
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac50:	f7fd faae 	bl	80081b0 <memset>
 800ac54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac60:	3468      	adds	r4, #104	; 0x68
 800ac62:	e7d9      	b.n	800ac18 <__sfp+0x1c>
 800ac64:	2104      	movs	r1, #4
 800ac66:	4638      	mov	r0, r7
 800ac68:	f7ff ff62 	bl	800ab30 <__sfmoreglue>
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	6030      	str	r0, [r6, #0]
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d1d5      	bne.n	800ac20 <__sfp+0x24>
 800ac74:	f7ff ff78 	bl	800ab68 <__sfp_lock_release>
 800ac78:	230c      	movs	r3, #12
 800ac7a:	603b      	str	r3, [r7, #0]
 800ac7c:	e7ee      	b.n	800ac5c <__sfp+0x60>
 800ac7e:	bf00      	nop
 800ac80:	0800df90 	.word	0x0800df90
 800ac84:	ffff0001 	.word	0xffff0001

0800ac88 <_fwalk_reent>:
 800ac88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	4688      	mov	r8, r1
 800ac90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac94:	2700      	movs	r7, #0
 800ac96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac9e:	d505      	bpl.n	800acac <_fwalk_reent+0x24>
 800aca0:	6824      	ldr	r4, [r4, #0]
 800aca2:	2c00      	cmp	r4, #0
 800aca4:	d1f7      	bne.n	800ac96 <_fwalk_reent+0xe>
 800aca6:	4638      	mov	r0, r7
 800aca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acac:	89ab      	ldrh	r3, [r5, #12]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d907      	bls.n	800acc2 <_fwalk_reent+0x3a>
 800acb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acb6:	3301      	adds	r3, #1
 800acb8:	d003      	beq.n	800acc2 <_fwalk_reent+0x3a>
 800acba:	4629      	mov	r1, r5
 800acbc:	4630      	mov	r0, r6
 800acbe:	47c0      	blx	r8
 800acc0:	4307      	orrs	r7, r0
 800acc2:	3568      	adds	r5, #104	; 0x68
 800acc4:	e7e9      	b.n	800ac9a <_fwalk_reent+0x12>

0800acc6 <__retarget_lock_init_recursive>:
 800acc6:	4770      	bx	lr

0800acc8 <__retarget_lock_acquire_recursive>:
 800acc8:	4770      	bx	lr

0800acca <__retarget_lock_release_recursive>:
 800acca:	4770      	bx	lr

0800accc <__swhatbuf_r>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	460e      	mov	r6, r1
 800acd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd4:	2900      	cmp	r1, #0
 800acd6:	b096      	sub	sp, #88	; 0x58
 800acd8:	4614      	mov	r4, r2
 800acda:	461d      	mov	r5, r3
 800acdc:	da08      	bge.n	800acf0 <__swhatbuf_r+0x24>
 800acde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	602a      	str	r2, [r5, #0]
 800ace6:	061a      	lsls	r2, r3, #24
 800ace8:	d410      	bmi.n	800ad0c <__swhatbuf_r+0x40>
 800acea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acee:	e00e      	b.n	800ad0e <__swhatbuf_r+0x42>
 800acf0:	466a      	mov	r2, sp
 800acf2:	f000 f903 	bl	800aefc <_fstat_r>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	dbf1      	blt.n	800acde <__swhatbuf_r+0x12>
 800acfa:	9a01      	ldr	r2, [sp, #4]
 800acfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad04:	425a      	negs	r2, r3
 800ad06:	415a      	adcs	r2, r3
 800ad08:	602a      	str	r2, [r5, #0]
 800ad0a:	e7ee      	b.n	800acea <__swhatbuf_r+0x1e>
 800ad0c:	2340      	movs	r3, #64	; 0x40
 800ad0e:	2000      	movs	r0, #0
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	b016      	add	sp, #88	; 0x58
 800ad14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad18 <__smakebuf_r>:
 800ad18:	898b      	ldrh	r3, [r1, #12]
 800ad1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad1c:	079d      	lsls	r5, r3, #30
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	d507      	bpl.n	800ad34 <__smakebuf_r+0x1c>
 800ad24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	6123      	str	r3, [r4, #16]
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	6163      	str	r3, [r4, #20]
 800ad30:	b002      	add	sp, #8
 800ad32:	bd70      	pop	{r4, r5, r6, pc}
 800ad34:	ab01      	add	r3, sp, #4
 800ad36:	466a      	mov	r2, sp
 800ad38:	f7ff ffc8 	bl	800accc <__swhatbuf_r>
 800ad3c:	9900      	ldr	r1, [sp, #0]
 800ad3e:	4605      	mov	r5, r0
 800ad40:	4630      	mov	r0, r6
 800ad42:	f7ff f963 	bl	800a00c <_malloc_r>
 800ad46:	b948      	cbnz	r0, 800ad5c <__smakebuf_r+0x44>
 800ad48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad4c:	059a      	lsls	r2, r3, #22
 800ad4e:	d4ef      	bmi.n	800ad30 <__smakebuf_r+0x18>
 800ad50:	f023 0303 	bic.w	r3, r3, #3
 800ad54:	f043 0302 	orr.w	r3, r3, #2
 800ad58:	81a3      	strh	r3, [r4, #12]
 800ad5a:	e7e3      	b.n	800ad24 <__smakebuf_r+0xc>
 800ad5c:	4b0d      	ldr	r3, [pc, #52]	; (800ad94 <__smakebuf_r+0x7c>)
 800ad5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	6020      	str	r0, [r4, #0]
 800ad64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	9b00      	ldr	r3, [sp, #0]
 800ad6c:	6163      	str	r3, [r4, #20]
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	6120      	str	r0, [r4, #16]
 800ad72:	b15b      	cbz	r3, 800ad8c <__smakebuf_r+0x74>
 800ad74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f000 f8d1 	bl	800af20 <_isatty_r>
 800ad7e:	b128      	cbz	r0, 800ad8c <__smakebuf_r+0x74>
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	f023 0303 	bic.w	r3, r3, #3
 800ad86:	f043 0301 	orr.w	r3, r3, #1
 800ad8a:	81a3      	strh	r3, [r4, #12]
 800ad8c:	89a0      	ldrh	r0, [r4, #12]
 800ad8e:	4305      	orrs	r5, r0
 800ad90:	81a5      	strh	r5, [r4, #12]
 800ad92:	e7cd      	b.n	800ad30 <__smakebuf_r+0x18>
 800ad94:	0800ab25 	.word	0x0800ab25

0800ad98 <_malloc_usable_size_r>:
 800ad98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9c:	1f18      	subs	r0, r3, #4
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	bfbc      	itt	lt
 800ada2:	580b      	ldrlt	r3, [r1, r0]
 800ada4:	18c0      	addlt	r0, r0, r3
 800ada6:	4770      	bx	lr

0800ada8 <_raise_r>:
 800ada8:	291f      	cmp	r1, #31
 800adaa:	b538      	push	{r3, r4, r5, lr}
 800adac:	4604      	mov	r4, r0
 800adae:	460d      	mov	r5, r1
 800adb0:	d904      	bls.n	800adbc <_raise_r+0x14>
 800adb2:	2316      	movs	r3, #22
 800adb4:	6003      	str	r3, [r0, #0]
 800adb6:	f04f 30ff 	mov.w	r0, #4294967295
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adbe:	b112      	cbz	r2, 800adc6 <_raise_r+0x1e>
 800adc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adc4:	b94b      	cbnz	r3, 800adda <_raise_r+0x32>
 800adc6:	4620      	mov	r0, r4
 800adc8:	f000 f830 	bl	800ae2c <_getpid_r>
 800adcc:	462a      	mov	r2, r5
 800adce:	4601      	mov	r1, r0
 800add0:	4620      	mov	r0, r4
 800add2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add6:	f000 b817 	b.w	800ae08 <_kill_r>
 800adda:	2b01      	cmp	r3, #1
 800addc:	d00a      	beq.n	800adf4 <_raise_r+0x4c>
 800adde:	1c59      	adds	r1, r3, #1
 800ade0:	d103      	bne.n	800adea <_raise_r+0x42>
 800ade2:	2316      	movs	r3, #22
 800ade4:	6003      	str	r3, [r0, #0]
 800ade6:	2001      	movs	r0, #1
 800ade8:	e7e7      	b.n	800adba <_raise_r+0x12>
 800adea:	2400      	movs	r4, #0
 800adec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adf0:	4628      	mov	r0, r5
 800adf2:	4798      	blx	r3
 800adf4:	2000      	movs	r0, #0
 800adf6:	e7e0      	b.n	800adba <_raise_r+0x12>

0800adf8 <raise>:
 800adf8:	4b02      	ldr	r3, [pc, #8]	; (800ae04 <raise+0xc>)
 800adfa:	4601      	mov	r1, r0
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	f7ff bfd3 	b.w	800ada8 <_raise_r>
 800ae02:	bf00      	nop
 800ae04:	20000014 	.word	0x20000014

0800ae08 <_kill_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d07      	ldr	r5, [pc, #28]	; (800ae28 <_kill_r+0x20>)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4604      	mov	r4, r0
 800ae10:	4608      	mov	r0, r1
 800ae12:	4611      	mov	r1, r2
 800ae14:	602b      	str	r3, [r5, #0]
 800ae16:	f7f7 fd7d 	bl	8002914 <_kill>
 800ae1a:	1c43      	adds	r3, r0, #1
 800ae1c:	d102      	bne.n	800ae24 <_kill_r+0x1c>
 800ae1e:	682b      	ldr	r3, [r5, #0]
 800ae20:	b103      	cbz	r3, 800ae24 <_kill_r+0x1c>
 800ae22:	6023      	str	r3, [r4, #0]
 800ae24:	bd38      	pop	{r3, r4, r5, pc}
 800ae26:	bf00      	nop
 800ae28:	2000061c 	.word	0x2000061c

0800ae2c <_getpid_r>:
 800ae2c:	f7f7 bd6a 	b.w	8002904 <_getpid>

0800ae30 <__sread>:
 800ae30:	b510      	push	{r4, lr}
 800ae32:	460c      	mov	r4, r1
 800ae34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae38:	f000 f894 	bl	800af64 <_read_r>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	bfab      	itete	ge
 800ae40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae42:	89a3      	ldrhlt	r3, [r4, #12]
 800ae44:	181b      	addge	r3, r3, r0
 800ae46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae4a:	bfac      	ite	ge
 800ae4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae4e:	81a3      	strhlt	r3, [r4, #12]
 800ae50:	bd10      	pop	{r4, pc}

0800ae52 <__swrite>:
 800ae52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae56:	461f      	mov	r7, r3
 800ae58:	898b      	ldrh	r3, [r1, #12]
 800ae5a:	05db      	lsls	r3, r3, #23
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	460c      	mov	r4, r1
 800ae60:	4616      	mov	r6, r2
 800ae62:	d505      	bpl.n	800ae70 <__swrite+0x1e>
 800ae64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae68:	2302      	movs	r3, #2
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f000 f868 	bl	800af40 <_lseek_r>
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	4632      	mov	r2, r6
 800ae7e:	463b      	mov	r3, r7
 800ae80:	4628      	mov	r0, r5
 800ae82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae86:	f000 b817 	b.w	800aeb8 <_write_r>

0800ae8a <__sseek>:
 800ae8a:	b510      	push	{r4, lr}
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae92:	f000 f855 	bl	800af40 <_lseek_r>
 800ae96:	1c43      	adds	r3, r0, #1
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	bf15      	itete	ne
 800ae9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aea6:	81a3      	strheq	r3, [r4, #12]
 800aea8:	bf18      	it	ne
 800aeaa:	81a3      	strhne	r3, [r4, #12]
 800aeac:	bd10      	pop	{r4, pc}

0800aeae <__sclose>:
 800aeae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb2:	f000 b813 	b.w	800aedc <_close_r>
	...

0800aeb8 <_write_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4d07      	ldr	r5, [pc, #28]	; (800aed8 <_write_r+0x20>)
 800aebc:	4604      	mov	r4, r0
 800aebe:	4608      	mov	r0, r1
 800aec0:	4611      	mov	r1, r2
 800aec2:	2200      	movs	r2, #0
 800aec4:	602a      	str	r2, [r5, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	f7f7 fd5b 	bl	8002982 <_write>
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	d102      	bne.n	800aed6 <_write_r+0x1e>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	b103      	cbz	r3, 800aed6 <_write_r+0x1e>
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	bd38      	pop	{r3, r4, r5, pc}
 800aed8:	2000061c 	.word	0x2000061c

0800aedc <_close_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4d06      	ldr	r5, [pc, #24]	; (800aef8 <_close_r+0x1c>)
 800aee0:	2300      	movs	r3, #0
 800aee2:	4604      	mov	r4, r0
 800aee4:	4608      	mov	r0, r1
 800aee6:	602b      	str	r3, [r5, #0]
 800aee8:	f7f7 fd67 	bl	80029ba <_close>
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d102      	bne.n	800aef6 <_close_r+0x1a>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b103      	cbz	r3, 800aef6 <_close_r+0x1a>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	2000061c 	.word	0x2000061c

0800aefc <_fstat_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4d07      	ldr	r5, [pc, #28]	; (800af1c <_fstat_r+0x20>)
 800af00:	2300      	movs	r3, #0
 800af02:	4604      	mov	r4, r0
 800af04:	4608      	mov	r0, r1
 800af06:	4611      	mov	r1, r2
 800af08:	602b      	str	r3, [r5, #0]
 800af0a:	f7f7 fd62 	bl	80029d2 <_fstat>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	d102      	bne.n	800af18 <_fstat_r+0x1c>
 800af12:	682b      	ldr	r3, [r5, #0]
 800af14:	b103      	cbz	r3, 800af18 <_fstat_r+0x1c>
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	bd38      	pop	{r3, r4, r5, pc}
 800af1a:	bf00      	nop
 800af1c:	2000061c 	.word	0x2000061c

0800af20 <_isatty_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4d06      	ldr	r5, [pc, #24]	; (800af3c <_isatty_r+0x1c>)
 800af24:	2300      	movs	r3, #0
 800af26:	4604      	mov	r4, r0
 800af28:	4608      	mov	r0, r1
 800af2a:	602b      	str	r3, [r5, #0]
 800af2c:	f7f7 fd61 	bl	80029f2 <_isatty>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_isatty_r+0x1a>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_isatty_r+0x1a>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	2000061c 	.word	0x2000061c

0800af40 <_lseek_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4d07      	ldr	r5, [pc, #28]	; (800af60 <_lseek_r+0x20>)
 800af44:	4604      	mov	r4, r0
 800af46:	4608      	mov	r0, r1
 800af48:	4611      	mov	r1, r2
 800af4a:	2200      	movs	r2, #0
 800af4c:	602a      	str	r2, [r5, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	f7f7 fd5a 	bl	8002a08 <_lseek>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d102      	bne.n	800af5e <_lseek_r+0x1e>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	b103      	cbz	r3, 800af5e <_lseek_r+0x1e>
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	bd38      	pop	{r3, r4, r5, pc}
 800af60:	2000061c 	.word	0x2000061c

0800af64 <_read_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d07      	ldr	r5, [pc, #28]	; (800af84 <_read_r+0x20>)
 800af68:	4604      	mov	r4, r0
 800af6a:	4608      	mov	r0, r1
 800af6c:	4611      	mov	r1, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	602a      	str	r2, [r5, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	f7f7 fce8 	bl	8002948 <_read>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_read_r+0x1e>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_read_r+0x1e>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	2000061c 	.word	0x2000061c

0800af88 <_init>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr

0800af94 <_fini>:
 800af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af96:	bf00      	nop
 800af98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9a:	bc08      	pop	{r3}
 800af9c:	469e      	mov	lr, r3
 800af9e:	4770      	bx	lr
